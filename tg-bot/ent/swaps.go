// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/swaps"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/user"
)

// Swaps is the model entity for the Swaps schema.
type Swaps struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// ToAddress holds the value of the "to_address" field.
	ToAddress string `json:"to_address,omitempty"`
	// FromCurrency holds the value of the "from_currency" field.
	FromCurrency string `json:"from_currency,omitempty"`
	// ToCurrency holds the value of the "to_currency" field.
	ToCurrency string `json:"to_currency,omitempty"`
	// ToNetwork holds the value of the "to_network" field.
	ToNetwork string `json:"to_network,omitempty"`
	// FromNetwork holds the value of the "from_network" field.
	FromNetwork string `json:"from_network,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount string `json:"amount,omitempty"`
	// AmountRecive holds the value of the "amountRecive" field.
	AmountRecive string `json:"amountRecive,omitempty"`
	// RefundAddress holds the value of the "refund_address" field.
	RefundAddress string `json:"refund_address,omitempty"`
	// SwapID holds the value of the "swap_id" field.
	SwapID string `json:"swap_id,omitempty"`
	// ExtraID holds the value of the "extra_id" field.
	ExtraID string `json:"extra_id,omitempty"`
	// InvoiceID holds the value of the "invoiceID" field.
	InvoiceID int64 `json:"invoiceID,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SwapsQuery when eager-loading is set.
	Edges        SwapsEdges `json:"edges"`
	user_swaps   *int64
	selectValues sql.SelectValues
}

// SwapsEdges holds the relations/edges for other nodes in the graph.
type SwapsEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SwapsEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Swaps) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case swaps.FieldID, swaps.FieldInvoiceID:
			values[i] = new(sql.NullInt64)
		case swaps.FieldType, swaps.FieldToAddress, swaps.FieldFromCurrency, swaps.FieldToCurrency, swaps.FieldToNetwork, swaps.FieldFromNetwork, swaps.FieldAmount, swaps.FieldAmountRecive, swaps.FieldRefundAddress, swaps.FieldSwapID, swaps.FieldExtraID:
			values[i] = new(sql.NullString)
		case swaps.ForeignKeys[0]: // user_swaps
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Swaps fields.
func (s *Swaps) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case swaps.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case swaps.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				s.Type = value.String
			}
		case swaps.FieldToAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field to_address", values[i])
			} else if value.Valid {
				s.ToAddress = value.String
			}
		case swaps.FieldFromCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from_currency", values[i])
			} else if value.Valid {
				s.FromCurrency = value.String
			}
		case swaps.FieldToCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field to_currency", values[i])
			} else if value.Valid {
				s.ToCurrency = value.String
			}
		case swaps.FieldToNetwork:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field to_network", values[i])
			} else if value.Valid {
				s.ToNetwork = value.String
			}
		case swaps.FieldFromNetwork:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from_network", values[i])
			} else if value.Valid {
				s.FromNetwork = value.String
			}
		case swaps.FieldAmount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				s.Amount = value.String
			}
		case swaps.FieldAmountRecive:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field amountRecive", values[i])
			} else if value.Valid {
				s.AmountRecive = value.String
			}
		case swaps.FieldRefundAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refund_address", values[i])
			} else if value.Valid {
				s.RefundAddress = value.String
			}
		case swaps.FieldSwapID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field swap_id", values[i])
			} else if value.Valid {
				s.SwapID = value.String
			}
		case swaps.FieldExtraID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field extra_id", values[i])
			} else if value.Valid {
				s.ExtraID = value.String
			}
		case swaps.FieldInvoiceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field invoiceID", values[i])
			} else if value.Valid {
				s.InvoiceID = value.Int64
			}
		case swaps.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_swaps", value)
			} else if value.Valid {
				s.user_swaps = new(int64)
				*s.user_swaps = int64(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Swaps.
// This includes values selected through modifiers, order, etc.
func (s *Swaps) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Swaps entity.
func (s *Swaps) QueryOwner() *UserQuery {
	return NewSwapsClient(s.config).QueryOwner(s)
}

// Update returns a builder for updating this Swaps.
// Note that you need to call Swaps.Unwrap() before calling this method if this Swaps
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Swaps) Update() *SwapsUpdateOne {
	return NewSwapsClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Swaps entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Swaps) Unwrap() *Swaps {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Swaps is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Swaps) String() string {
	var builder strings.Builder
	builder.WriteString("Swaps(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("type=")
	builder.WriteString(s.Type)
	builder.WriteString(", ")
	builder.WriteString("to_address=")
	builder.WriteString(s.ToAddress)
	builder.WriteString(", ")
	builder.WriteString("from_currency=")
	builder.WriteString(s.FromCurrency)
	builder.WriteString(", ")
	builder.WriteString("to_currency=")
	builder.WriteString(s.ToCurrency)
	builder.WriteString(", ")
	builder.WriteString("to_network=")
	builder.WriteString(s.ToNetwork)
	builder.WriteString(", ")
	builder.WriteString("from_network=")
	builder.WriteString(s.FromNetwork)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(s.Amount)
	builder.WriteString(", ")
	builder.WriteString("amountRecive=")
	builder.WriteString(s.AmountRecive)
	builder.WriteString(", ")
	builder.WriteString("refund_address=")
	builder.WriteString(s.RefundAddress)
	builder.WriteString(", ")
	builder.WriteString("swap_id=")
	builder.WriteString(s.SwapID)
	builder.WriteString(", ")
	builder.WriteString("extra_id=")
	builder.WriteString(s.ExtraID)
	builder.WriteString(", ")
	builder.WriteString("invoiceID=")
	builder.WriteString(fmt.Sprintf("%v", s.InvoiceID))
	builder.WriteByte(')')
	return builder.String()
}

// SwapsSlice is a parsable slice of Swaps.
type SwapsSlice []*Swaps
