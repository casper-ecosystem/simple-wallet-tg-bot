// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Simplewallethq/tg-bot/ent/recentinvoices"
	"github.com/Simplewallethq/tg-bot/ent/user"
)

// RecentInvoices is the model entity for the RecentInvoices schema.
type RecentInvoices struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// InvoiceID holds the value of the "invoiceID" field.
	InvoiceID int64 `json:"invoiceID,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RecentInvoicesQuery when eager-loading is set.
	Edges                RecentInvoicesEdges `json:"edges"`
	user_recent_invoices *int64
	selectValues         sql.SelectValues
}

// RecentInvoicesEdges holds the relations/edges for other nodes in the graph.
type RecentInvoicesEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RecentInvoicesEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RecentInvoices) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case recentinvoices.FieldID, recentinvoices.FieldInvoiceID:
			values[i] = new(sql.NullInt64)
		case recentinvoices.FieldStatus:
			values[i] = new(sql.NullString)
		case recentinvoices.ForeignKeys[0]: // user_recent_invoices
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RecentInvoices fields.
func (ri *RecentInvoices) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case recentinvoices.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ri.ID = int(value.Int64)
		case recentinvoices.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ri.Status = value.String
			}
		case recentinvoices.FieldInvoiceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field invoiceID", values[i])
			} else if value.Valid {
				ri.InvoiceID = value.Int64
			}
		case recentinvoices.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_recent_invoices", value)
			} else if value.Valid {
				ri.user_recent_invoices = new(int64)
				*ri.user_recent_invoices = int64(value.Int64)
			}
		default:
			ri.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RecentInvoices.
// This includes values selected through modifiers, order, etc.
func (ri *RecentInvoices) Value(name string) (ent.Value, error) {
	return ri.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the RecentInvoices entity.
func (ri *RecentInvoices) QueryOwner() *UserQuery {
	return NewRecentInvoicesClient(ri.config).QueryOwner(ri)
}

// Update returns a builder for updating this RecentInvoices.
// Note that you need to call RecentInvoices.Unwrap() before calling this method if this RecentInvoices
// was returned from a transaction, and the transaction was committed or rolled back.
func (ri *RecentInvoices) Update() *RecentInvoicesUpdateOne {
	return NewRecentInvoicesClient(ri.config).UpdateOne(ri)
}

// Unwrap unwraps the RecentInvoices entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ri *RecentInvoices) Unwrap() *RecentInvoices {
	_tx, ok := ri.config.driver.(*txDriver)
	if !ok {
		panic("ent: RecentInvoices is not a transactional entity")
	}
	ri.config.driver = _tx.drv
	return ri
}

// String implements the fmt.Stringer.
func (ri *RecentInvoices) String() string {
	var builder strings.Builder
	builder.WriteString("RecentInvoices(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ri.ID))
	builder.WriteString("status=")
	builder.WriteString(ri.Status)
	builder.WriteString(", ")
	builder.WriteString("invoiceID=")
	builder.WriteString(fmt.Sprintf("%v", ri.InvoiceID))
	builder.WriteByte(')')
	return builder.String()
}

// RecentInvoicesSlice is a parsable slice of RecentInvoices.
type RecentInvoicesSlice []*RecentInvoices
