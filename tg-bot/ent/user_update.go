// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/adressbook"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/balances"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/delegates"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/invoice"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/predicate"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/privatekeys"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/recentinvoices"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/rewardsdata"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/swaps"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/transfers"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/undelegates"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/user"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/userstate"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetPublicKey sets the "public_key" field.
func (uu *UserUpdate) SetPublicKey(s string) *UserUpdate {
	uu.mutation.SetPublicKey(s)
	return uu
}

// SetNillablePublicKey sets the "public_key" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePublicKey(s *string) *UserUpdate {
	if s != nil {
		uu.SetPublicKey(*s)
	}
	return uu
}

// ClearPublicKey clears the value of the "public_key" field.
func (uu *UserUpdate) ClearPublicKey() *UserUpdate {
	uu.mutation.ClearPublicKey()
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePassword(s *string) *UserUpdate {
	if s != nil {
		uu.SetPassword(*s)
	}
	return uu
}

// ClearPassword clears the value of the "password" field.
func (uu *UserUpdate) ClearPassword() *UserUpdate {
	uu.mutation.ClearPassword()
	return uu
}

// SetLoggedIn sets the "logged_in" field.
func (uu *UserUpdate) SetLoggedIn(b bool) *UserUpdate {
	uu.mutation.SetLoggedIn(b)
	return uu
}

// SetNillableLoggedIn sets the "logged_in" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLoggedIn(b *bool) *UserUpdate {
	if b != nil {
		uu.SetLoggedIn(*b)
	}
	return uu
}

// SetLastAccess sets the "last_access" field.
func (uu *UserUpdate) SetLastAccess(t time.Time) *UserUpdate {
	uu.mutation.SetLastAccess(t)
	return uu
}

// SetNillableLastAccess sets the "last_access" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastAccess(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLastAccess(*t)
	}
	return uu
}

// ClearLastAccess clears the value of the "last_access" field.
func (uu *UserUpdate) ClearLastAccess() *UserUpdate {
	uu.mutation.ClearLastAccess()
	return uu
}

// SetLockTimeout sets the "lock_timeout" field.
func (uu *UserUpdate) SetLockTimeout(i int64) *UserUpdate {
	uu.mutation.ResetLockTimeout()
	uu.mutation.SetLockTimeout(i)
	return uu
}

// SetNillableLockTimeout sets the "lock_timeout" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLockTimeout(i *int64) *UserUpdate {
	if i != nil {
		uu.SetLockTimeout(*i)
	}
	return uu
}

// AddLockTimeout adds i to the "lock_timeout" field.
func (uu *UserUpdate) AddLockTimeout(i int64) *UserUpdate {
	uu.mutation.AddLockTimeout(i)
	return uu
}

// ClearLockTimeout clears the value of the "lock_timeout" field.
func (uu *UserUpdate) ClearLockTimeout() *UserUpdate {
	uu.mutation.ClearLockTimeout()
	return uu
}

// SetLockedManual sets the "locked_manual" field.
func (uu *UserUpdate) SetLockedManual(b bool) *UserUpdate {
	uu.mutation.SetLockedManual(b)
	return uu
}

// SetNillableLockedManual sets the "locked_manual" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLockedManual(b *bool) *UserUpdate {
	if b != nil {
		uu.SetLockedManual(*b)
	}
	return uu
}

// ClearLockedManual clears the value of the "locked_manual" field.
func (uu *UserUpdate) ClearLockedManual() *UserUpdate {
	uu.mutation.ClearLockedManual()
	return uu
}

// SetNotify sets the "notify" field.
func (uu *UserUpdate) SetNotify(b bool) *UserUpdate {
	uu.mutation.SetNotify(b)
	return uu
}

// SetNillableNotify sets the "notify" field if the given value is not nil.
func (uu *UserUpdate) SetNillableNotify(b *bool) *UserUpdate {
	if b != nil {
		uu.SetNotify(*b)
	}
	return uu
}

// SetNotifyTime sets the "notify_time" field.
func (uu *UserUpdate) SetNotifyTime(i int8) *UserUpdate {
	uu.mutation.ResetNotifyTime()
	uu.mutation.SetNotifyTime(i)
	return uu
}

// SetNillableNotifyTime sets the "notify_time" field if the given value is not nil.
func (uu *UserUpdate) SetNillableNotifyTime(i *int8) *UserUpdate {
	if i != nil {
		uu.SetNotifyTime(*i)
	}
	return uu
}

// AddNotifyTime adds i to the "notify_time" field.
func (uu *UserUpdate) AddNotifyTime(i int8) *UserUpdate {
	uu.mutation.AddNotifyTime(i)
	return uu
}

// SetNotifyLastTime sets the "notify_last_time" field.
func (uu *UserUpdate) SetNotifyLastTime(t time.Time) *UserUpdate {
	uu.mutation.SetNotifyLastTime(t)
	return uu
}

// SetNillableNotifyLastTime sets the "notify_last_time" field if the given value is not nil.
func (uu *UserUpdate) SetNillableNotifyLastTime(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetNotifyLastTime(*t)
	}
	return uu
}

// SetStorePrivatKey sets the "store_privat_key" field.
func (uu *UserUpdate) SetStorePrivatKey(b bool) *UserUpdate {
	uu.mutation.SetStorePrivatKey(b)
	return uu
}

// SetNillableStorePrivatKey sets the "store_privat_key" field if the given value is not nil.
func (uu *UserUpdate) SetNillableStorePrivatKey(b *bool) *UserUpdate {
	if b != nil {
		uu.SetStorePrivatKey(*b)
	}
	return uu
}

// SetEnableLogging sets the "enable_logging" field.
func (uu *UserUpdate) SetEnableLogging(b bool) *UserUpdate {
	uu.mutation.SetEnableLogging(b)
	return uu
}

// SetNillableEnableLogging sets the "enable_logging" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEnableLogging(b *bool) *UserUpdate {
	if b != nil {
		uu.SetEnableLogging(*b)
	}
	return uu
}

// SetRegistered sets the "registered" field.
func (uu *UserUpdate) SetRegistered(b bool) *UserUpdate {
	uu.mutation.SetRegistered(b)
	return uu
}

// SetNillableRegistered sets the "registered" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRegistered(b *bool) *UserUpdate {
	if b != nil {
		uu.SetRegistered(*b)
	}
	return uu
}

// SetBalanceID sets the "balance" edge to the Balances entity by ID.
func (uu *UserUpdate) SetBalanceID(id int) *UserUpdate {
	uu.mutation.SetBalanceID(id)
	return uu
}

// SetNillableBalanceID sets the "balance" edge to the Balances entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableBalanceID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetBalanceID(*id)
	}
	return uu
}

// SetBalance sets the "balance" edge to the Balances entity.
func (uu *UserUpdate) SetBalance(b *Balances) *UserUpdate {
	return uu.SetBalanceID(b.ID)
}

// AddAddressBookIDs adds the "address_book" edge to the AdressBook entity by IDs.
func (uu *UserUpdate) AddAddressBookIDs(ids ...int) *UserUpdate {
	uu.mutation.AddAddressBookIDs(ids...)
	return uu
}

// AddAddressBook adds the "address_book" edges to the AdressBook entity.
func (uu *UserUpdate) AddAddressBook(a ...*AdressBook) *UserUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.AddAddressBookIDs(ids...)
}

// SetStateID sets the "state" edge to the UserState entity by ID.
func (uu *UserUpdate) SetStateID(id int) *UserUpdate {
	uu.mutation.SetStateID(id)
	return uu
}

// SetNillableStateID sets the "state" edge to the UserState entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableStateID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetStateID(*id)
	}
	return uu
}

// SetState sets the "state" edge to the UserState entity.
func (uu *UserUpdate) SetState(u *UserState) *UserUpdate {
	return uu.SetStateID(u.ID)
}

// AddRewardsDatumIDs adds the "rewards_data" edge to the RewardsData entity by IDs.
func (uu *UserUpdate) AddRewardsDatumIDs(ids ...int) *UserUpdate {
	uu.mutation.AddRewardsDatumIDs(ids...)
	return uu
}

// AddRewardsData adds the "rewards_data" edges to the RewardsData entity.
func (uu *UserUpdate) AddRewardsData(r ...*RewardsData) *UserUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.AddRewardsDatumIDs(ids...)
}

// SetPrivateKeyID sets the "PrivateKey" edge to the PrivateKeys entity by ID.
func (uu *UserUpdate) SetPrivateKeyID(id int) *UserUpdate {
	uu.mutation.SetPrivateKeyID(id)
	return uu
}

// SetNillablePrivateKeyID sets the "PrivateKey" edge to the PrivateKeys entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillablePrivateKeyID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetPrivateKeyID(*id)
	}
	return uu
}

// SetPrivateKey sets the "PrivateKey" edge to the PrivateKeys entity.
func (uu *UserUpdate) SetPrivateKey(p *PrivateKeys) *UserUpdate {
	return uu.SetPrivateKeyID(p.ID)
}

// AddTransferIDs adds the "transfers" edge to the Transfers entity by IDs.
func (uu *UserUpdate) AddTransferIDs(ids ...int) *UserUpdate {
	uu.mutation.AddTransferIDs(ids...)
	return uu
}

// AddTransfers adds the "transfers" edges to the Transfers entity.
func (uu *UserUpdate) AddTransfers(t ...*Transfers) *UserUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.AddTransferIDs(ids...)
}

// AddDelegateIDs adds the "delegates" edge to the Delegates entity by IDs.
func (uu *UserUpdate) AddDelegateIDs(ids ...int) *UserUpdate {
	uu.mutation.AddDelegateIDs(ids...)
	return uu
}

// AddDelegates adds the "delegates" edges to the Delegates entity.
func (uu *UserUpdate) AddDelegates(d ...*Delegates) *UserUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uu.AddDelegateIDs(ids...)
}

// AddUndelegateIDs adds the "undelegates" edge to the Undelegates entity by IDs.
func (uu *UserUpdate) AddUndelegateIDs(ids ...int) *UserUpdate {
	uu.mutation.AddUndelegateIDs(ids...)
	return uu
}

// AddUndelegates adds the "undelegates" edges to the Undelegates entity.
func (uu *UserUpdate) AddUndelegates(u ...*Undelegates) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddUndelegateIDs(ids...)
}

// AddSwapIDs adds the "swaps" edge to the Swaps entity by IDs.
func (uu *UserUpdate) AddSwapIDs(ids ...int) *UserUpdate {
	uu.mutation.AddSwapIDs(ids...)
	return uu
}

// AddSwaps adds the "swaps" edges to the Swaps entity.
func (uu *UserUpdate) AddSwaps(s ...*Swaps) *UserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddSwapIDs(ids...)
}

// AddInvoiceIDs adds the "invoices" edge to the Invoice entity by IDs.
func (uu *UserUpdate) AddInvoiceIDs(ids ...int) *UserUpdate {
	uu.mutation.AddInvoiceIDs(ids...)
	return uu
}

// AddInvoices adds the "invoices" edges to the Invoice entity.
func (uu *UserUpdate) AddInvoices(i ...*Invoice) *UserUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.AddInvoiceIDs(ids...)
}

// AddRecentInvoiceIDs adds the "recentInvoices" edge to the RecentInvoices entity by IDs.
func (uu *UserUpdate) AddRecentInvoiceIDs(ids ...int) *UserUpdate {
	uu.mutation.AddRecentInvoiceIDs(ids...)
	return uu
}

// AddRecentInvoices adds the "recentInvoices" edges to the RecentInvoices entity.
func (uu *UserUpdate) AddRecentInvoices(r ...*RecentInvoices) *UserUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.AddRecentInvoiceIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearBalance clears the "balance" edge to the Balances entity.
func (uu *UserUpdate) ClearBalance() *UserUpdate {
	uu.mutation.ClearBalance()
	return uu
}

// ClearAddressBook clears all "address_book" edges to the AdressBook entity.
func (uu *UserUpdate) ClearAddressBook() *UserUpdate {
	uu.mutation.ClearAddressBook()
	return uu
}

// RemoveAddressBookIDs removes the "address_book" edge to AdressBook entities by IDs.
func (uu *UserUpdate) RemoveAddressBookIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveAddressBookIDs(ids...)
	return uu
}

// RemoveAddressBook removes "address_book" edges to AdressBook entities.
func (uu *UserUpdate) RemoveAddressBook(a ...*AdressBook) *UserUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.RemoveAddressBookIDs(ids...)
}

// ClearState clears the "state" edge to the UserState entity.
func (uu *UserUpdate) ClearState() *UserUpdate {
	uu.mutation.ClearState()
	return uu
}

// ClearRewardsData clears all "rewards_data" edges to the RewardsData entity.
func (uu *UserUpdate) ClearRewardsData() *UserUpdate {
	uu.mutation.ClearRewardsData()
	return uu
}

// RemoveRewardsDatumIDs removes the "rewards_data" edge to RewardsData entities by IDs.
func (uu *UserUpdate) RemoveRewardsDatumIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveRewardsDatumIDs(ids...)
	return uu
}

// RemoveRewardsData removes "rewards_data" edges to RewardsData entities.
func (uu *UserUpdate) RemoveRewardsData(r ...*RewardsData) *UserUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.RemoveRewardsDatumIDs(ids...)
}

// ClearPrivateKey clears the "PrivateKey" edge to the PrivateKeys entity.
func (uu *UserUpdate) ClearPrivateKey() *UserUpdate {
	uu.mutation.ClearPrivateKey()
	return uu
}

// ClearTransfers clears all "transfers" edges to the Transfers entity.
func (uu *UserUpdate) ClearTransfers() *UserUpdate {
	uu.mutation.ClearTransfers()
	return uu
}

// RemoveTransferIDs removes the "transfers" edge to Transfers entities by IDs.
func (uu *UserUpdate) RemoveTransferIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveTransferIDs(ids...)
	return uu
}

// RemoveTransfers removes "transfers" edges to Transfers entities.
func (uu *UserUpdate) RemoveTransfers(t ...*Transfers) *UserUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.RemoveTransferIDs(ids...)
}

// ClearDelegates clears all "delegates" edges to the Delegates entity.
func (uu *UserUpdate) ClearDelegates() *UserUpdate {
	uu.mutation.ClearDelegates()
	return uu
}

// RemoveDelegateIDs removes the "delegates" edge to Delegates entities by IDs.
func (uu *UserUpdate) RemoveDelegateIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveDelegateIDs(ids...)
	return uu
}

// RemoveDelegates removes "delegates" edges to Delegates entities.
func (uu *UserUpdate) RemoveDelegates(d ...*Delegates) *UserUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uu.RemoveDelegateIDs(ids...)
}

// ClearUndelegates clears all "undelegates" edges to the Undelegates entity.
func (uu *UserUpdate) ClearUndelegates() *UserUpdate {
	uu.mutation.ClearUndelegates()
	return uu
}

// RemoveUndelegateIDs removes the "undelegates" edge to Undelegates entities by IDs.
func (uu *UserUpdate) RemoveUndelegateIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveUndelegateIDs(ids...)
	return uu
}

// RemoveUndelegates removes "undelegates" edges to Undelegates entities.
func (uu *UserUpdate) RemoveUndelegates(u ...*Undelegates) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveUndelegateIDs(ids...)
}

// ClearSwaps clears all "swaps" edges to the Swaps entity.
func (uu *UserUpdate) ClearSwaps() *UserUpdate {
	uu.mutation.ClearSwaps()
	return uu
}

// RemoveSwapIDs removes the "swaps" edge to Swaps entities by IDs.
func (uu *UserUpdate) RemoveSwapIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveSwapIDs(ids...)
	return uu
}

// RemoveSwaps removes "swaps" edges to Swaps entities.
func (uu *UserUpdate) RemoveSwaps(s ...*Swaps) *UserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveSwapIDs(ids...)
}

// ClearInvoices clears all "invoices" edges to the Invoice entity.
func (uu *UserUpdate) ClearInvoices() *UserUpdate {
	uu.mutation.ClearInvoices()
	return uu
}

// RemoveInvoiceIDs removes the "invoices" edge to Invoice entities by IDs.
func (uu *UserUpdate) RemoveInvoiceIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveInvoiceIDs(ids...)
	return uu
}

// RemoveInvoices removes "invoices" edges to Invoice entities.
func (uu *UserUpdate) RemoveInvoices(i ...*Invoice) *UserUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.RemoveInvoiceIDs(ids...)
}

// ClearRecentInvoices clears all "recentInvoices" edges to the RecentInvoices entity.
func (uu *UserUpdate) ClearRecentInvoices() *UserUpdate {
	uu.mutation.ClearRecentInvoices()
	return uu
}

// RemoveRecentInvoiceIDs removes the "recentInvoices" edge to RecentInvoices entities by IDs.
func (uu *UserUpdate) RemoveRecentInvoiceIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveRecentInvoiceIDs(ids...)
	return uu
}

// RemoveRecentInvoices removes "recentInvoices" edges to RecentInvoices entities.
func (uu *UserUpdate) RemoveRecentInvoices(r ...*RecentInvoices) *UserUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.RemoveRecentInvoiceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.PublicKey(); ok {
		_spec.SetField(user.FieldPublicKey, field.TypeString, value)
	}
	if uu.mutation.PublicKeyCleared() {
		_spec.ClearField(user.FieldPublicKey, field.TypeString)
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if uu.mutation.PasswordCleared() {
		_spec.ClearField(user.FieldPassword, field.TypeString)
	}
	if value, ok := uu.mutation.LoggedIn(); ok {
		_spec.SetField(user.FieldLoggedIn, field.TypeBool, value)
	}
	if value, ok := uu.mutation.LastAccess(); ok {
		_spec.SetField(user.FieldLastAccess, field.TypeTime, value)
	}
	if uu.mutation.LastAccessCleared() {
		_spec.ClearField(user.FieldLastAccess, field.TypeTime)
	}
	if value, ok := uu.mutation.LockTimeout(); ok {
		_spec.SetField(user.FieldLockTimeout, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedLockTimeout(); ok {
		_spec.AddField(user.FieldLockTimeout, field.TypeInt64, value)
	}
	if uu.mutation.LockTimeoutCleared() {
		_spec.ClearField(user.FieldLockTimeout, field.TypeInt64)
	}
	if value, ok := uu.mutation.LockedManual(); ok {
		_spec.SetField(user.FieldLockedManual, field.TypeBool, value)
	}
	if uu.mutation.LockedManualCleared() {
		_spec.ClearField(user.FieldLockedManual, field.TypeBool)
	}
	if value, ok := uu.mutation.Notify(); ok {
		_spec.SetField(user.FieldNotify, field.TypeBool, value)
	}
	if value, ok := uu.mutation.NotifyTime(); ok {
		_spec.SetField(user.FieldNotifyTime, field.TypeInt8, value)
	}
	if value, ok := uu.mutation.AddedNotifyTime(); ok {
		_spec.AddField(user.FieldNotifyTime, field.TypeInt8, value)
	}
	if value, ok := uu.mutation.NotifyLastTime(); ok {
		_spec.SetField(user.FieldNotifyLastTime, field.TypeTime, value)
	}
	if value, ok := uu.mutation.StorePrivatKey(); ok {
		_spec.SetField(user.FieldStorePrivatKey, field.TypeBool, value)
	}
	if value, ok := uu.mutation.EnableLogging(); ok {
		_spec.SetField(user.FieldEnableLogging, field.TypeBool, value)
	}
	if value, ok := uu.mutation.Registered(); ok {
		_spec.SetField(user.FieldRegistered, field.TypeBool, value)
	}
	if uu.mutation.BalanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.BalanceTable,
			Columns: []string{user.BalanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(balances.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.BalanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.BalanceTable,
			Columns: []string{user.BalanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(balances.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.AddressBookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AddressBookTable,
			Columns: []string{user.AddressBookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adressbook.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAddressBookIDs(); len(nodes) > 0 && !uu.mutation.AddressBookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AddressBookTable,
			Columns: []string{user.AddressBookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adressbook.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AddressBookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AddressBookTable,
			Columns: []string{user.AddressBookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adressbook.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.StateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.StateTable,
			Columns: []string{user.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userstate.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.StateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.StateTable,
			Columns: []string{user.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userstate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.RewardsDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RewardsDataTable,
			Columns: []string{user.RewardsDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rewardsdata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedRewardsDataIDs(); len(nodes) > 0 && !uu.mutation.RewardsDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RewardsDataTable,
			Columns: []string{user.RewardsDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rewardsdata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RewardsDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RewardsDataTable,
			Columns: []string{user.RewardsDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rewardsdata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.PrivateKeyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.PrivateKeyTable,
			Columns: []string{user.PrivateKeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(privatekeys.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PrivateKeyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.PrivateKeyTable,
			Columns: []string{user.PrivateKeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(privatekeys.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.TransfersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TransfersTable,
			Columns: []string{user.TransfersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transfers.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedTransfersIDs(); len(nodes) > 0 && !uu.mutation.TransfersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TransfersTable,
			Columns: []string{user.TransfersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transfers.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.TransfersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TransfersTable,
			Columns: []string{user.TransfersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transfers.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.DelegatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DelegatesTable,
			Columns: []string{user.DelegatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delegates.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedDelegatesIDs(); len(nodes) > 0 && !uu.mutation.DelegatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DelegatesTable,
			Columns: []string{user.DelegatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delegates.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.DelegatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DelegatesTable,
			Columns: []string{user.DelegatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delegates.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UndelegatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UndelegatesTable,
			Columns: []string{user.UndelegatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(undelegates.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUndelegatesIDs(); len(nodes) > 0 && !uu.mutation.UndelegatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UndelegatesTable,
			Columns: []string{user.UndelegatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(undelegates.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UndelegatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UndelegatesTable,
			Columns: []string{user.UndelegatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(undelegates.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SwapsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SwapsTable,
			Columns: []string{user.SwapsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(swaps.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSwapsIDs(); len(nodes) > 0 && !uu.mutation.SwapsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SwapsTable,
			Columns: []string{user.SwapsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(swaps.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SwapsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SwapsTable,
			Columns: []string{user.SwapsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(swaps.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.InvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InvoicesTable,
			Columns: []string{user.InvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedInvoicesIDs(); len(nodes) > 0 && !uu.mutation.InvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InvoicesTable,
			Columns: []string{user.InvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.InvoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InvoicesTable,
			Columns: []string{user.InvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.RecentInvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RecentInvoicesTable,
			Columns: []string{user.RecentInvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recentinvoices.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedRecentInvoicesIDs(); len(nodes) > 0 && !uu.mutation.RecentInvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RecentInvoicesTable,
			Columns: []string{user.RecentInvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recentinvoices.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RecentInvoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RecentInvoicesTable,
			Columns: []string{user.RecentInvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recentinvoices.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetPublicKey sets the "public_key" field.
func (uuo *UserUpdateOne) SetPublicKey(s string) *UserUpdateOne {
	uuo.mutation.SetPublicKey(s)
	return uuo
}

// SetNillablePublicKey sets the "public_key" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePublicKey(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPublicKey(*s)
	}
	return uuo
}

// ClearPublicKey clears the value of the "public_key" field.
func (uuo *UserUpdateOne) ClearPublicKey() *UserUpdateOne {
	uuo.mutation.ClearPublicKey()
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePassword(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPassword(*s)
	}
	return uuo
}

// ClearPassword clears the value of the "password" field.
func (uuo *UserUpdateOne) ClearPassword() *UserUpdateOne {
	uuo.mutation.ClearPassword()
	return uuo
}

// SetLoggedIn sets the "logged_in" field.
func (uuo *UserUpdateOne) SetLoggedIn(b bool) *UserUpdateOne {
	uuo.mutation.SetLoggedIn(b)
	return uuo
}

// SetNillableLoggedIn sets the "logged_in" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLoggedIn(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetLoggedIn(*b)
	}
	return uuo
}

// SetLastAccess sets the "last_access" field.
func (uuo *UserUpdateOne) SetLastAccess(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLastAccess(t)
	return uuo
}

// SetNillableLastAccess sets the "last_access" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastAccess(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLastAccess(*t)
	}
	return uuo
}

// ClearLastAccess clears the value of the "last_access" field.
func (uuo *UserUpdateOne) ClearLastAccess() *UserUpdateOne {
	uuo.mutation.ClearLastAccess()
	return uuo
}

// SetLockTimeout sets the "lock_timeout" field.
func (uuo *UserUpdateOne) SetLockTimeout(i int64) *UserUpdateOne {
	uuo.mutation.ResetLockTimeout()
	uuo.mutation.SetLockTimeout(i)
	return uuo
}

// SetNillableLockTimeout sets the "lock_timeout" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLockTimeout(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetLockTimeout(*i)
	}
	return uuo
}

// AddLockTimeout adds i to the "lock_timeout" field.
func (uuo *UserUpdateOne) AddLockTimeout(i int64) *UserUpdateOne {
	uuo.mutation.AddLockTimeout(i)
	return uuo
}

// ClearLockTimeout clears the value of the "lock_timeout" field.
func (uuo *UserUpdateOne) ClearLockTimeout() *UserUpdateOne {
	uuo.mutation.ClearLockTimeout()
	return uuo
}

// SetLockedManual sets the "locked_manual" field.
func (uuo *UserUpdateOne) SetLockedManual(b bool) *UserUpdateOne {
	uuo.mutation.SetLockedManual(b)
	return uuo
}

// SetNillableLockedManual sets the "locked_manual" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLockedManual(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetLockedManual(*b)
	}
	return uuo
}

// ClearLockedManual clears the value of the "locked_manual" field.
func (uuo *UserUpdateOne) ClearLockedManual() *UserUpdateOne {
	uuo.mutation.ClearLockedManual()
	return uuo
}

// SetNotify sets the "notify" field.
func (uuo *UserUpdateOne) SetNotify(b bool) *UserUpdateOne {
	uuo.mutation.SetNotify(b)
	return uuo
}

// SetNillableNotify sets the "notify" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableNotify(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetNotify(*b)
	}
	return uuo
}

// SetNotifyTime sets the "notify_time" field.
func (uuo *UserUpdateOne) SetNotifyTime(i int8) *UserUpdateOne {
	uuo.mutation.ResetNotifyTime()
	uuo.mutation.SetNotifyTime(i)
	return uuo
}

// SetNillableNotifyTime sets the "notify_time" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableNotifyTime(i *int8) *UserUpdateOne {
	if i != nil {
		uuo.SetNotifyTime(*i)
	}
	return uuo
}

// AddNotifyTime adds i to the "notify_time" field.
func (uuo *UserUpdateOne) AddNotifyTime(i int8) *UserUpdateOne {
	uuo.mutation.AddNotifyTime(i)
	return uuo
}

// SetNotifyLastTime sets the "notify_last_time" field.
func (uuo *UserUpdateOne) SetNotifyLastTime(t time.Time) *UserUpdateOne {
	uuo.mutation.SetNotifyLastTime(t)
	return uuo
}

// SetNillableNotifyLastTime sets the "notify_last_time" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableNotifyLastTime(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetNotifyLastTime(*t)
	}
	return uuo
}

// SetStorePrivatKey sets the "store_privat_key" field.
func (uuo *UserUpdateOne) SetStorePrivatKey(b bool) *UserUpdateOne {
	uuo.mutation.SetStorePrivatKey(b)
	return uuo
}

// SetNillableStorePrivatKey sets the "store_privat_key" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableStorePrivatKey(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetStorePrivatKey(*b)
	}
	return uuo
}

// SetEnableLogging sets the "enable_logging" field.
func (uuo *UserUpdateOne) SetEnableLogging(b bool) *UserUpdateOne {
	uuo.mutation.SetEnableLogging(b)
	return uuo
}

// SetNillableEnableLogging sets the "enable_logging" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEnableLogging(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetEnableLogging(*b)
	}
	return uuo
}

// SetRegistered sets the "registered" field.
func (uuo *UserUpdateOne) SetRegistered(b bool) *UserUpdateOne {
	uuo.mutation.SetRegistered(b)
	return uuo
}

// SetNillableRegistered sets the "registered" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRegistered(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetRegistered(*b)
	}
	return uuo
}

// SetBalanceID sets the "balance" edge to the Balances entity by ID.
func (uuo *UserUpdateOne) SetBalanceID(id int) *UserUpdateOne {
	uuo.mutation.SetBalanceID(id)
	return uuo
}

// SetNillableBalanceID sets the "balance" edge to the Balances entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBalanceID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetBalanceID(*id)
	}
	return uuo
}

// SetBalance sets the "balance" edge to the Balances entity.
func (uuo *UserUpdateOne) SetBalance(b *Balances) *UserUpdateOne {
	return uuo.SetBalanceID(b.ID)
}

// AddAddressBookIDs adds the "address_book" edge to the AdressBook entity by IDs.
func (uuo *UserUpdateOne) AddAddressBookIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddAddressBookIDs(ids...)
	return uuo
}

// AddAddressBook adds the "address_book" edges to the AdressBook entity.
func (uuo *UserUpdateOne) AddAddressBook(a ...*AdressBook) *UserUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.AddAddressBookIDs(ids...)
}

// SetStateID sets the "state" edge to the UserState entity by ID.
func (uuo *UserUpdateOne) SetStateID(id int) *UserUpdateOne {
	uuo.mutation.SetStateID(id)
	return uuo
}

// SetNillableStateID sets the "state" edge to the UserState entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableStateID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetStateID(*id)
	}
	return uuo
}

// SetState sets the "state" edge to the UserState entity.
func (uuo *UserUpdateOne) SetState(u *UserState) *UserUpdateOne {
	return uuo.SetStateID(u.ID)
}

// AddRewardsDatumIDs adds the "rewards_data" edge to the RewardsData entity by IDs.
func (uuo *UserUpdateOne) AddRewardsDatumIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddRewardsDatumIDs(ids...)
	return uuo
}

// AddRewardsData adds the "rewards_data" edges to the RewardsData entity.
func (uuo *UserUpdateOne) AddRewardsData(r ...*RewardsData) *UserUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.AddRewardsDatumIDs(ids...)
}

// SetPrivateKeyID sets the "PrivateKey" edge to the PrivateKeys entity by ID.
func (uuo *UserUpdateOne) SetPrivateKeyID(id int) *UserUpdateOne {
	uuo.mutation.SetPrivateKeyID(id)
	return uuo
}

// SetNillablePrivateKeyID sets the "PrivateKey" edge to the PrivateKeys entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePrivateKeyID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetPrivateKeyID(*id)
	}
	return uuo
}

// SetPrivateKey sets the "PrivateKey" edge to the PrivateKeys entity.
func (uuo *UserUpdateOne) SetPrivateKey(p *PrivateKeys) *UserUpdateOne {
	return uuo.SetPrivateKeyID(p.ID)
}

// AddTransferIDs adds the "transfers" edge to the Transfers entity by IDs.
func (uuo *UserUpdateOne) AddTransferIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddTransferIDs(ids...)
	return uuo
}

// AddTransfers adds the "transfers" edges to the Transfers entity.
func (uuo *UserUpdateOne) AddTransfers(t ...*Transfers) *UserUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.AddTransferIDs(ids...)
}

// AddDelegateIDs adds the "delegates" edge to the Delegates entity by IDs.
func (uuo *UserUpdateOne) AddDelegateIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddDelegateIDs(ids...)
	return uuo
}

// AddDelegates adds the "delegates" edges to the Delegates entity.
func (uuo *UserUpdateOne) AddDelegates(d ...*Delegates) *UserUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uuo.AddDelegateIDs(ids...)
}

// AddUndelegateIDs adds the "undelegates" edge to the Undelegates entity by IDs.
func (uuo *UserUpdateOne) AddUndelegateIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddUndelegateIDs(ids...)
	return uuo
}

// AddUndelegates adds the "undelegates" edges to the Undelegates entity.
func (uuo *UserUpdateOne) AddUndelegates(u ...*Undelegates) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddUndelegateIDs(ids...)
}

// AddSwapIDs adds the "swaps" edge to the Swaps entity by IDs.
func (uuo *UserUpdateOne) AddSwapIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddSwapIDs(ids...)
	return uuo
}

// AddSwaps adds the "swaps" edges to the Swaps entity.
func (uuo *UserUpdateOne) AddSwaps(s ...*Swaps) *UserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddSwapIDs(ids...)
}

// AddInvoiceIDs adds the "invoices" edge to the Invoice entity by IDs.
func (uuo *UserUpdateOne) AddInvoiceIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddInvoiceIDs(ids...)
	return uuo
}

// AddInvoices adds the "invoices" edges to the Invoice entity.
func (uuo *UserUpdateOne) AddInvoices(i ...*Invoice) *UserUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.AddInvoiceIDs(ids...)
}

// AddRecentInvoiceIDs adds the "recentInvoices" edge to the RecentInvoices entity by IDs.
func (uuo *UserUpdateOne) AddRecentInvoiceIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddRecentInvoiceIDs(ids...)
	return uuo
}

// AddRecentInvoices adds the "recentInvoices" edges to the RecentInvoices entity.
func (uuo *UserUpdateOne) AddRecentInvoices(r ...*RecentInvoices) *UserUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.AddRecentInvoiceIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearBalance clears the "balance" edge to the Balances entity.
func (uuo *UserUpdateOne) ClearBalance() *UserUpdateOne {
	uuo.mutation.ClearBalance()
	return uuo
}

// ClearAddressBook clears all "address_book" edges to the AdressBook entity.
func (uuo *UserUpdateOne) ClearAddressBook() *UserUpdateOne {
	uuo.mutation.ClearAddressBook()
	return uuo
}

// RemoveAddressBookIDs removes the "address_book" edge to AdressBook entities by IDs.
func (uuo *UserUpdateOne) RemoveAddressBookIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveAddressBookIDs(ids...)
	return uuo
}

// RemoveAddressBook removes "address_book" edges to AdressBook entities.
func (uuo *UserUpdateOne) RemoveAddressBook(a ...*AdressBook) *UserUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.RemoveAddressBookIDs(ids...)
}

// ClearState clears the "state" edge to the UserState entity.
func (uuo *UserUpdateOne) ClearState() *UserUpdateOne {
	uuo.mutation.ClearState()
	return uuo
}

// ClearRewardsData clears all "rewards_data" edges to the RewardsData entity.
func (uuo *UserUpdateOne) ClearRewardsData() *UserUpdateOne {
	uuo.mutation.ClearRewardsData()
	return uuo
}

// RemoveRewardsDatumIDs removes the "rewards_data" edge to RewardsData entities by IDs.
func (uuo *UserUpdateOne) RemoveRewardsDatumIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveRewardsDatumIDs(ids...)
	return uuo
}

// RemoveRewardsData removes "rewards_data" edges to RewardsData entities.
func (uuo *UserUpdateOne) RemoveRewardsData(r ...*RewardsData) *UserUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.RemoveRewardsDatumIDs(ids...)
}

// ClearPrivateKey clears the "PrivateKey" edge to the PrivateKeys entity.
func (uuo *UserUpdateOne) ClearPrivateKey() *UserUpdateOne {
	uuo.mutation.ClearPrivateKey()
	return uuo
}

// ClearTransfers clears all "transfers" edges to the Transfers entity.
func (uuo *UserUpdateOne) ClearTransfers() *UserUpdateOne {
	uuo.mutation.ClearTransfers()
	return uuo
}

// RemoveTransferIDs removes the "transfers" edge to Transfers entities by IDs.
func (uuo *UserUpdateOne) RemoveTransferIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveTransferIDs(ids...)
	return uuo
}

// RemoveTransfers removes "transfers" edges to Transfers entities.
func (uuo *UserUpdateOne) RemoveTransfers(t ...*Transfers) *UserUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.RemoveTransferIDs(ids...)
}

// ClearDelegates clears all "delegates" edges to the Delegates entity.
func (uuo *UserUpdateOne) ClearDelegates() *UserUpdateOne {
	uuo.mutation.ClearDelegates()
	return uuo
}

// RemoveDelegateIDs removes the "delegates" edge to Delegates entities by IDs.
func (uuo *UserUpdateOne) RemoveDelegateIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveDelegateIDs(ids...)
	return uuo
}

// RemoveDelegates removes "delegates" edges to Delegates entities.
func (uuo *UserUpdateOne) RemoveDelegates(d ...*Delegates) *UserUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uuo.RemoveDelegateIDs(ids...)
}

// ClearUndelegates clears all "undelegates" edges to the Undelegates entity.
func (uuo *UserUpdateOne) ClearUndelegates() *UserUpdateOne {
	uuo.mutation.ClearUndelegates()
	return uuo
}

// RemoveUndelegateIDs removes the "undelegates" edge to Undelegates entities by IDs.
func (uuo *UserUpdateOne) RemoveUndelegateIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveUndelegateIDs(ids...)
	return uuo
}

// RemoveUndelegates removes "undelegates" edges to Undelegates entities.
func (uuo *UserUpdateOne) RemoveUndelegates(u ...*Undelegates) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveUndelegateIDs(ids...)
}

// ClearSwaps clears all "swaps" edges to the Swaps entity.
func (uuo *UserUpdateOne) ClearSwaps() *UserUpdateOne {
	uuo.mutation.ClearSwaps()
	return uuo
}

// RemoveSwapIDs removes the "swaps" edge to Swaps entities by IDs.
func (uuo *UserUpdateOne) RemoveSwapIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveSwapIDs(ids...)
	return uuo
}

// RemoveSwaps removes "swaps" edges to Swaps entities.
func (uuo *UserUpdateOne) RemoveSwaps(s ...*Swaps) *UserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveSwapIDs(ids...)
}

// ClearInvoices clears all "invoices" edges to the Invoice entity.
func (uuo *UserUpdateOne) ClearInvoices() *UserUpdateOne {
	uuo.mutation.ClearInvoices()
	return uuo
}

// RemoveInvoiceIDs removes the "invoices" edge to Invoice entities by IDs.
func (uuo *UserUpdateOne) RemoveInvoiceIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveInvoiceIDs(ids...)
	return uuo
}

// RemoveInvoices removes "invoices" edges to Invoice entities.
func (uuo *UserUpdateOne) RemoveInvoices(i ...*Invoice) *UserUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.RemoveInvoiceIDs(ids...)
}

// ClearRecentInvoices clears all "recentInvoices" edges to the RecentInvoices entity.
func (uuo *UserUpdateOne) ClearRecentInvoices() *UserUpdateOne {
	uuo.mutation.ClearRecentInvoices()
	return uuo
}

// RemoveRecentInvoiceIDs removes the "recentInvoices" edge to RecentInvoices entities by IDs.
func (uuo *UserUpdateOne) RemoveRecentInvoiceIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveRecentInvoiceIDs(ids...)
	return uuo
}

// RemoveRecentInvoices removes "recentInvoices" edges to RecentInvoices entities.
func (uuo *UserUpdateOne) RemoveRecentInvoices(r ...*RecentInvoices) *UserUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.RemoveRecentInvoiceIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.PublicKey(); ok {
		_spec.SetField(user.FieldPublicKey, field.TypeString, value)
	}
	if uuo.mutation.PublicKeyCleared() {
		_spec.ClearField(user.FieldPublicKey, field.TypeString)
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if uuo.mutation.PasswordCleared() {
		_spec.ClearField(user.FieldPassword, field.TypeString)
	}
	if value, ok := uuo.mutation.LoggedIn(); ok {
		_spec.SetField(user.FieldLoggedIn, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.LastAccess(); ok {
		_spec.SetField(user.FieldLastAccess, field.TypeTime, value)
	}
	if uuo.mutation.LastAccessCleared() {
		_spec.ClearField(user.FieldLastAccess, field.TypeTime)
	}
	if value, ok := uuo.mutation.LockTimeout(); ok {
		_spec.SetField(user.FieldLockTimeout, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedLockTimeout(); ok {
		_spec.AddField(user.FieldLockTimeout, field.TypeInt64, value)
	}
	if uuo.mutation.LockTimeoutCleared() {
		_spec.ClearField(user.FieldLockTimeout, field.TypeInt64)
	}
	if value, ok := uuo.mutation.LockedManual(); ok {
		_spec.SetField(user.FieldLockedManual, field.TypeBool, value)
	}
	if uuo.mutation.LockedManualCleared() {
		_spec.ClearField(user.FieldLockedManual, field.TypeBool)
	}
	if value, ok := uuo.mutation.Notify(); ok {
		_spec.SetField(user.FieldNotify, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.NotifyTime(); ok {
		_spec.SetField(user.FieldNotifyTime, field.TypeInt8, value)
	}
	if value, ok := uuo.mutation.AddedNotifyTime(); ok {
		_spec.AddField(user.FieldNotifyTime, field.TypeInt8, value)
	}
	if value, ok := uuo.mutation.NotifyLastTime(); ok {
		_spec.SetField(user.FieldNotifyLastTime, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.StorePrivatKey(); ok {
		_spec.SetField(user.FieldStorePrivatKey, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.EnableLogging(); ok {
		_spec.SetField(user.FieldEnableLogging, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.Registered(); ok {
		_spec.SetField(user.FieldRegistered, field.TypeBool, value)
	}
	if uuo.mutation.BalanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.BalanceTable,
			Columns: []string{user.BalanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(balances.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.BalanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.BalanceTable,
			Columns: []string{user.BalanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(balances.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.AddressBookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AddressBookTable,
			Columns: []string{user.AddressBookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adressbook.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAddressBookIDs(); len(nodes) > 0 && !uuo.mutation.AddressBookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AddressBookTable,
			Columns: []string{user.AddressBookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adressbook.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AddressBookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AddressBookTable,
			Columns: []string{user.AddressBookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adressbook.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.StateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.StateTable,
			Columns: []string{user.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userstate.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.StateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.StateTable,
			Columns: []string{user.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userstate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.RewardsDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RewardsDataTable,
			Columns: []string{user.RewardsDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rewardsdata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedRewardsDataIDs(); len(nodes) > 0 && !uuo.mutation.RewardsDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RewardsDataTable,
			Columns: []string{user.RewardsDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rewardsdata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RewardsDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RewardsDataTable,
			Columns: []string{user.RewardsDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rewardsdata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.PrivateKeyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.PrivateKeyTable,
			Columns: []string{user.PrivateKeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(privatekeys.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PrivateKeyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.PrivateKeyTable,
			Columns: []string{user.PrivateKeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(privatekeys.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.TransfersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TransfersTable,
			Columns: []string{user.TransfersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transfers.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedTransfersIDs(); len(nodes) > 0 && !uuo.mutation.TransfersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TransfersTable,
			Columns: []string{user.TransfersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transfers.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.TransfersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TransfersTable,
			Columns: []string{user.TransfersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transfers.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.DelegatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DelegatesTable,
			Columns: []string{user.DelegatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delegates.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedDelegatesIDs(); len(nodes) > 0 && !uuo.mutation.DelegatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DelegatesTable,
			Columns: []string{user.DelegatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delegates.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.DelegatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DelegatesTable,
			Columns: []string{user.DelegatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delegates.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UndelegatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UndelegatesTable,
			Columns: []string{user.UndelegatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(undelegates.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUndelegatesIDs(); len(nodes) > 0 && !uuo.mutation.UndelegatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UndelegatesTable,
			Columns: []string{user.UndelegatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(undelegates.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UndelegatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UndelegatesTable,
			Columns: []string{user.UndelegatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(undelegates.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SwapsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SwapsTable,
			Columns: []string{user.SwapsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(swaps.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSwapsIDs(); len(nodes) > 0 && !uuo.mutation.SwapsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SwapsTable,
			Columns: []string{user.SwapsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(swaps.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SwapsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SwapsTable,
			Columns: []string{user.SwapsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(swaps.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.InvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InvoicesTable,
			Columns: []string{user.InvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedInvoicesIDs(); len(nodes) > 0 && !uuo.mutation.InvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InvoicesTable,
			Columns: []string{user.InvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.InvoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InvoicesTable,
			Columns: []string{user.InvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.RecentInvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RecentInvoicesTable,
			Columns: []string{user.RecentInvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recentinvoices.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedRecentInvoicesIDs(); len(nodes) > 0 && !uuo.mutation.RecentInvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RecentInvoicesTable,
			Columns: []string{user.RecentInvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recentinvoices.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RecentInvoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RecentInvoicesTable,
			Columns: []string{user.RecentInvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recentinvoices.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
