// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Simplewallethq/tg-bot/ent/undelegates"
	"github.com/Simplewallethq/tg-bot/ent/user"
)

// Undelegates is the model entity for the Undelegates schema.
type Undelegates struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Delegator holds the value of the "delegator" field.
	Delegator string `json:"delegator,omitempty"`
	// Validator holds the value of the "validator" field.
	Validator string `json:"validator,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// StakedBalance holds the value of the "staked_balance" field.
	StakedBalance string `json:"staked_balance,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount string `json:"amount,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Deploy holds the value of the "Deploy" field.
	Deploy string `json:"Deploy,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UndelegatesQuery when eager-loading is set.
	Edges            UndelegatesEdges `json:"edges"`
	user_undelegates *int64
	selectValues     sql.SelectValues
}

// UndelegatesEdges holds the relations/edges for other nodes in the graph.
type UndelegatesEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UndelegatesEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Undelegates) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case undelegates.FieldID:
			values[i] = new(sql.NullInt64)
		case undelegates.FieldDelegator, undelegates.FieldValidator, undelegates.FieldName, undelegates.FieldStakedBalance, undelegates.FieldAmount, undelegates.FieldStatus, undelegates.FieldDeploy:
			values[i] = new(sql.NullString)
		case undelegates.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case undelegates.ForeignKeys[0]: // user_undelegates
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Undelegates fields.
func (u *Undelegates) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case undelegates.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case undelegates.FieldDelegator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field delegator", values[i])
			} else if value.Valid {
				u.Delegator = value.String
			}
		case undelegates.FieldValidator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field validator", values[i])
			} else if value.Valid {
				u.Validator = value.String
			}
		case undelegates.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case undelegates.FieldStakedBalance:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field staked_balance", values[i])
			} else if value.Valid {
				u.StakedBalance = value.String
			}
		case undelegates.FieldAmount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				u.Amount = value.String
			}
		case undelegates.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case undelegates.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				u.Status = value.String
			}
		case undelegates.FieldDeploy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Deploy", values[i])
			} else if value.Valid {
				u.Deploy = value.String
			}
		case undelegates.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_undelegates", value)
			} else if value.Valid {
				u.user_undelegates = new(int64)
				*u.user_undelegates = int64(value.Int64)
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Undelegates.
// This includes values selected through modifiers, order, etc.
func (u *Undelegates) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Undelegates entity.
func (u *Undelegates) QueryOwner() *UserQuery {
	return NewUndelegatesClient(u.config).QueryOwner(u)
}

// Update returns a builder for updating this Undelegates.
// Note that you need to call Undelegates.Unwrap() before calling this method if this Undelegates
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *Undelegates) Update() *UndelegatesUpdateOne {
	return NewUndelegatesClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the Undelegates entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *Undelegates) Unwrap() *Undelegates {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: Undelegates is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *Undelegates) String() string {
	var builder strings.Builder
	builder.WriteString("Undelegates(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("delegator=")
	builder.WriteString(u.Delegator)
	builder.WriteString(", ")
	builder.WriteString("validator=")
	builder.WriteString(u.Validator)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(u.Name)
	builder.WriteString(", ")
	builder.WriteString("staked_balance=")
	builder.WriteString(u.StakedBalance)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(u.Amount)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(u.Status)
	builder.WriteString(", ")
	builder.WriteString("Deploy=")
	builder.WriteString(u.Deploy)
	builder.WriteByte(')')
	return builder.String()
}

// UndelegatesSlice is a parsable slice of Undelegates.
type UndelegatesSlice []*Undelegates
