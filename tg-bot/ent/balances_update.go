// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Simplewallethq/tg-bot/ent/balances"
	"github.com/Simplewallethq/tg-bot/ent/predicate"
	"github.com/Simplewallethq/tg-bot/ent/user"
)

// BalancesUpdate is the builder for updating Balances entities.
type BalancesUpdate struct {
	config
	hooks    []Hook
	mutation *BalancesMutation
}

// Where appends a list predicates to the BalancesUpdate builder.
func (bu *BalancesUpdate) Where(ps ...predicate.Balances) *BalancesUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetBalance sets the "balance" field.
func (bu *BalancesUpdate) SetBalance(f float64) *BalancesUpdate {
	bu.mutation.ResetBalance()
	bu.mutation.SetBalance(f)
	return bu
}

// AddBalance adds f to the "balance" field.
func (bu *BalancesUpdate) AddBalance(f float64) *BalancesUpdate {
	bu.mutation.AddBalance(f)
	return bu
}

// SetHeight sets the "height" field.
func (bu *BalancesUpdate) SetHeight(u uint64) *BalancesUpdate {
	bu.mutation.ResetHeight()
	bu.mutation.SetHeight(u)
	return bu
}

// AddHeight adds u to the "height" field.
func (bu *BalancesUpdate) AddHeight(u int64) *BalancesUpdate {
	bu.mutation.AddHeight(u)
	return bu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (bu *BalancesUpdate) SetOwnerID(id int64) *BalancesUpdate {
	bu.mutation.SetOwnerID(id)
	return bu
}

// SetOwner sets the "owner" edge to the User entity.
func (bu *BalancesUpdate) SetOwner(u *User) *BalancesUpdate {
	return bu.SetOwnerID(u.ID)
}

// Mutation returns the BalancesMutation object of the builder.
func (bu *BalancesUpdate) Mutation() *BalancesMutation {
	return bu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (bu *BalancesUpdate) ClearOwner() *BalancesUpdate {
	bu.mutation.ClearOwner()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BalancesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BalancesUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BalancesUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BalancesUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BalancesUpdate) check() error {
	if _, ok := bu.mutation.OwnerID(); bu.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Balances.owner"`)
	}
	return nil
}

func (bu *BalancesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(balances.Table, balances.Columns, sqlgraph.NewFieldSpec(balances.FieldID, field.TypeInt))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Balance(); ok {
		_spec.SetField(balances.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.AddedBalance(); ok {
		_spec.AddField(balances.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.Height(); ok {
		_spec.SetField(balances.FieldHeight, field.TypeUint64, value)
	}
	if value, ok := bu.mutation.AddedHeight(); ok {
		_spec.AddField(balances.FieldHeight, field.TypeUint64, value)
	}
	if bu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   balances.OwnerTable,
			Columns: []string{balances.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   balances.OwnerTable,
			Columns: []string{balances.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{balances.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BalancesUpdateOne is the builder for updating a single Balances entity.
type BalancesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BalancesMutation
}

// SetBalance sets the "balance" field.
func (buo *BalancesUpdateOne) SetBalance(f float64) *BalancesUpdateOne {
	buo.mutation.ResetBalance()
	buo.mutation.SetBalance(f)
	return buo
}

// AddBalance adds f to the "balance" field.
func (buo *BalancesUpdateOne) AddBalance(f float64) *BalancesUpdateOne {
	buo.mutation.AddBalance(f)
	return buo
}

// SetHeight sets the "height" field.
func (buo *BalancesUpdateOne) SetHeight(u uint64) *BalancesUpdateOne {
	buo.mutation.ResetHeight()
	buo.mutation.SetHeight(u)
	return buo
}

// AddHeight adds u to the "height" field.
func (buo *BalancesUpdateOne) AddHeight(u int64) *BalancesUpdateOne {
	buo.mutation.AddHeight(u)
	return buo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (buo *BalancesUpdateOne) SetOwnerID(id int64) *BalancesUpdateOne {
	buo.mutation.SetOwnerID(id)
	return buo
}

// SetOwner sets the "owner" edge to the User entity.
func (buo *BalancesUpdateOne) SetOwner(u *User) *BalancesUpdateOne {
	return buo.SetOwnerID(u.ID)
}

// Mutation returns the BalancesMutation object of the builder.
func (buo *BalancesUpdateOne) Mutation() *BalancesMutation {
	return buo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (buo *BalancesUpdateOne) ClearOwner() *BalancesUpdateOne {
	buo.mutation.ClearOwner()
	return buo
}

// Where appends a list predicates to the BalancesUpdate builder.
func (buo *BalancesUpdateOne) Where(ps ...predicate.Balances) *BalancesUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BalancesUpdateOne) Select(field string, fields ...string) *BalancesUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Balances entity.
func (buo *BalancesUpdateOne) Save(ctx context.Context) (*Balances, error) {
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BalancesUpdateOne) SaveX(ctx context.Context) *Balances {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BalancesUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BalancesUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BalancesUpdateOne) check() error {
	if _, ok := buo.mutation.OwnerID(); buo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Balances.owner"`)
	}
	return nil
}

func (buo *BalancesUpdateOne) sqlSave(ctx context.Context) (_node *Balances, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(balances.Table, balances.Columns, sqlgraph.NewFieldSpec(balances.FieldID, field.TypeInt))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Balances.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, balances.FieldID)
		for _, f := range fields {
			if !balances.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != balances.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Balance(); ok {
		_spec.SetField(balances.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.AddedBalance(); ok {
		_spec.AddField(balances.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.Height(); ok {
		_spec.SetField(balances.FieldHeight, field.TypeUint64, value)
	}
	if value, ok := buo.mutation.AddedHeight(); ok {
		_spec.AddField(balances.FieldHeight, field.TypeUint64, value)
	}
	if buo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   balances.OwnerTable,
			Columns: []string{balances.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   balances.OwnerTable,
			Columns: []string{balances.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Balances{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{balances.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
