// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Simplewallethq/tg-bot/ent/validators"
)

// Validators is the model entity for the Validators schema.
type Validators struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Fee holds the value of the "fee" field.
	Fee int8 `json:"fee,omitempty"`
	// Delegators holds the value of the "delegators" field.
	Delegators int64 `json:"delegators,omitempty"`
	// Active holds the value of the "active" field.
	Active       bool `json:"active,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Validators) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case validators.FieldActive:
			values[i] = new(sql.NullBool)
		case validators.FieldID, validators.FieldFee, validators.FieldDelegators:
			values[i] = new(sql.NullInt64)
		case validators.FieldAddress, validators.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Validators fields.
func (v *Validators) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case validators.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			v.ID = int(value.Int64)
		case validators.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				v.Address = value.String
			}
		case validators.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				v.Name = value.String
			}
		case validators.FieldFee:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field fee", values[i])
			} else if value.Valid {
				v.Fee = int8(value.Int64)
			}
		case validators.FieldDelegators:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delegators", values[i])
			} else if value.Valid {
				v.Delegators = value.Int64
			}
		case validators.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				v.Active = value.Bool
			}
		default:
			v.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Validators.
// This includes values selected through modifiers, order, etc.
func (v *Validators) Value(name string) (ent.Value, error) {
	return v.selectValues.Get(name)
}

// Update returns a builder for updating this Validators.
// Note that you need to call Validators.Unwrap() before calling this method if this Validators
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Validators) Update() *ValidatorsUpdateOne {
	return NewValidatorsClient(v.config).UpdateOne(v)
}

// Unwrap unwraps the Validators entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Validators) Unwrap() *Validators {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Validators is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Validators) String() string {
	var builder strings.Builder
	builder.WriteString("Validators(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("address=")
	builder.WriteString(v.Address)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(v.Name)
	builder.WriteString(", ")
	builder.WriteString("fee=")
	builder.WriteString(fmt.Sprintf("%v", v.Fee))
	builder.WriteString(", ")
	builder.WriteString("delegators=")
	builder.WriteString(fmt.Sprintf("%v", v.Delegators))
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", v.Active))
	builder.WriteByte(')')
	return builder.String()
}

// ValidatorsSlice is a parsable slice of Validators.
type ValidatorsSlice []*Validators
