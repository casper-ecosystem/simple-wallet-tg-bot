// Code generated by ent, DO NOT EDIT.

package privatekeys

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PrivateKeys {
	return predicate.PrivateKeys(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PrivateKeys {
	return predicate.PrivateKeys(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PrivateKeys {
	return predicate.PrivateKeys(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PrivateKeys {
	return predicate.PrivateKeys(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PrivateKeys {
	return predicate.PrivateKeys(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PrivateKeys {
	return predicate.PrivateKeys(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PrivateKeys {
	return predicate.PrivateKeys(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PrivateKeys {
	return predicate.PrivateKeys(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PrivateKeys {
	return predicate.PrivateKeys(sql.FieldLTE(FieldID, id))
}

// PrivateKey applies equality check predicate on the "private_key" field. It's identical to PrivateKeyEQ.
func PrivateKey(v []byte) predicate.PrivateKeys {
	return predicate.PrivateKeys(sql.FieldEQ(FieldPrivateKey, v))
}

// PrivateKeyEQ applies the EQ predicate on the "private_key" field.
func PrivateKeyEQ(v []byte) predicate.PrivateKeys {
	return predicate.PrivateKeys(sql.FieldEQ(FieldPrivateKey, v))
}

// PrivateKeyNEQ applies the NEQ predicate on the "private_key" field.
func PrivateKeyNEQ(v []byte) predicate.PrivateKeys {
	return predicate.PrivateKeys(sql.FieldNEQ(FieldPrivateKey, v))
}

// PrivateKeyIn applies the In predicate on the "private_key" field.
func PrivateKeyIn(vs ...[]byte) predicate.PrivateKeys {
	return predicate.PrivateKeys(sql.FieldIn(FieldPrivateKey, vs...))
}

// PrivateKeyNotIn applies the NotIn predicate on the "private_key" field.
func PrivateKeyNotIn(vs ...[]byte) predicate.PrivateKeys {
	return predicate.PrivateKeys(sql.FieldNotIn(FieldPrivateKey, vs...))
}

// PrivateKeyGT applies the GT predicate on the "private_key" field.
func PrivateKeyGT(v []byte) predicate.PrivateKeys {
	return predicate.PrivateKeys(sql.FieldGT(FieldPrivateKey, v))
}

// PrivateKeyGTE applies the GTE predicate on the "private_key" field.
func PrivateKeyGTE(v []byte) predicate.PrivateKeys {
	return predicate.PrivateKeys(sql.FieldGTE(FieldPrivateKey, v))
}

// PrivateKeyLT applies the LT predicate on the "private_key" field.
func PrivateKeyLT(v []byte) predicate.PrivateKeys {
	return predicate.PrivateKeys(sql.FieldLT(FieldPrivateKey, v))
}

// PrivateKeyLTE applies the LTE predicate on the "private_key" field.
func PrivateKeyLTE(v []byte) predicate.PrivateKeys {
	return predicate.PrivateKeys(sql.FieldLTE(FieldPrivateKey, v))
}

// PrivateKeyIsNil applies the IsNil predicate on the "private_key" field.
func PrivateKeyIsNil() predicate.PrivateKeys {
	return predicate.PrivateKeys(sql.FieldIsNull(FieldPrivateKey))
}

// PrivateKeyNotNil applies the NotNil predicate on the "private_key" field.
func PrivateKeyNotNil() predicate.PrivateKeys {
	return predicate.PrivateKeys(sql.FieldNotNull(FieldPrivateKey))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.PrivateKeys {
	return predicate.PrivateKeys(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.PrivateKeys {
	return predicate.PrivateKeys(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PrivateKeys) predicate.PrivateKeys {
	return predicate.PrivateKeys(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PrivateKeys) predicate.PrivateKeys {
	return predicate.PrivateKeys(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PrivateKeys) predicate.PrivateKeys {
	return predicate.PrivateKeys(func(s *sql.Selector) {
		p(s.Not())
	})
}
