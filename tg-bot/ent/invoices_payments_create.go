// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Simplewallethq/tg-bot/ent/invoice"
	"github.com/Simplewallethq/tg-bot/ent/invoices_payments"
)

// InvoicesPaymentsCreate is the builder for creating a Invoices_payments entity.
type InvoicesPaymentsCreate struct {
	config
	mutation *InvoicesPaymentsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetFrom sets the "from" field.
func (ipc *InvoicesPaymentsCreate) SetFrom(s string) *InvoicesPaymentsCreate {
	ipc.mutation.SetFrom(s)
	return ipc
}

// SetNillableFrom sets the "from" field if the given value is not nil.
func (ipc *InvoicesPaymentsCreate) SetNillableFrom(s *string) *InvoicesPaymentsCreate {
	if s != nil {
		ipc.SetFrom(*s)
	}
	return ipc
}

// SetAmount sets the "amount" field.
func (ipc *InvoicesPaymentsCreate) SetAmount(s string) *InvoicesPaymentsCreate {
	ipc.mutation.SetAmount(s)
	return ipc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (ipc *InvoicesPaymentsCreate) SetNillableAmount(s *string) *InvoicesPaymentsCreate {
	if s != nil {
		ipc.SetAmount(*s)
	}
	return ipc
}

// SetCorrect sets the "correct" field.
func (ipc *InvoicesPaymentsCreate) SetCorrect(b bool) *InvoicesPaymentsCreate {
	ipc.mutation.SetCorrect(b)
	return ipc
}

// SetNillableCorrect sets the "correct" field if the given value is not nil.
func (ipc *InvoicesPaymentsCreate) SetNillableCorrect(b *bool) *InvoicesPaymentsCreate {
	if b != nil {
		ipc.SetCorrect(*b)
	}
	return ipc
}

// SetInvoiceID sets the "invoice" edge to the Invoice entity by ID.
func (ipc *InvoicesPaymentsCreate) SetInvoiceID(id int) *InvoicesPaymentsCreate {
	ipc.mutation.SetInvoiceID(id)
	return ipc
}

// SetInvoice sets the "invoice" edge to the Invoice entity.
func (ipc *InvoicesPaymentsCreate) SetInvoice(i *Invoice) *InvoicesPaymentsCreate {
	return ipc.SetInvoiceID(i.ID)
}

// Mutation returns the InvoicesPaymentsMutation object of the builder.
func (ipc *InvoicesPaymentsCreate) Mutation() *InvoicesPaymentsMutation {
	return ipc.mutation
}

// Save creates the Invoices_payments in the database.
func (ipc *InvoicesPaymentsCreate) Save(ctx context.Context) (*Invoices_payments, error) {
	return withHooks(ctx, ipc.sqlSave, ipc.mutation, ipc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ipc *InvoicesPaymentsCreate) SaveX(ctx context.Context) *Invoices_payments {
	v, err := ipc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ipc *InvoicesPaymentsCreate) Exec(ctx context.Context) error {
	_, err := ipc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ipc *InvoicesPaymentsCreate) ExecX(ctx context.Context) {
	if err := ipc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ipc *InvoicesPaymentsCreate) check() error {
	if _, ok := ipc.mutation.InvoiceID(); !ok {
		return &ValidationError{Name: "invoice", err: errors.New(`ent: missing required edge "Invoices_payments.invoice"`)}
	}
	return nil
}

func (ipc *InvoicesPaymentsCreate) sqlSave(ctx context.Context) (*Invoices_payments, error) {
	if err := ipc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ipc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ipc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ipc.mutation.id = &_node.ID
	ipc.mutation.done = true
	return _node, nil
}

func (ipc *InvoicesPaymentsCreate) createSpec() (*Invoices_payments, *sqlgraph.CreateSpec) {
	var (
		_node = &Invoices_payments{config: ipc.config}
		_spec = sqlgraph.NewCreateSpec(invoices_payments.Table, sqlgraph.NewFieldSpec(invoices_payments.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ipc.conflict
	if value, ok := ipc.mutation.From(); ok {
		_spec.SetField(invoices_payments.FieldFrom, field.TypeString, value)
		_node.From = value
	}
	if value, ok := ipc.mutation.Amount(); ok {
		_spec.SetField(invoices_payments.FieldAmount, field.TypeString, value)
		_node.Amount = value
	}
	if value, ok := ipc.mutation.Correct(); ok {
		_spec.SetField(invoices_payments.FieldCorrect, field.TypeBool, value)
		_node.Correct = value
	}
	if nodes := ipc.mutation.InvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoices_payments.InvoiceTable,
			Columns: []string{invoices_payments.InvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.invoice_payments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Invoices_payments.Create().
//		SetFrom(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.Invoices_paymentsUpsert) {
//			SetFrom(v+v).
//		}).
//		Exec(ctx)
func (ipc *InvoicesPaymentsCreate) OnConflict(opts ...sql.ConflictOption) *Invoices_paymentsUpsertOne {
	ipc.conflict = opts
	return &Invoices_paymentsUpsertOne{
		create: ipc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Invoices_payments.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ipc *InvoicesPaymentsCreate) OnConflictColumns(columns ...string) *Invoices_paymentsUpsertOne {
	ipc.conflict = append(ipc.conflict, sql.ConflictColumns(columns...))
	return &Invoices_paymentsUpsertOne{
		create: ipc,
	}
}

type (
	// Invoices_paymentsUpsertOne is the builder for "upsert"-ing
	//  one Invoices_payments node.
	Invoices_paymentsUpsertOne struct {
		create *InvoicesPaymentsCreate
	}

	// Invoices_paymentsUpsert is the "OnConflict" setter.
	Invoices_paymentsUpsert struct {
		*sql.UpdateSet
	}
)

// SetFrom sets the "from" field.
func (u *Invoices_paymentsUpsert) SetFrom(v string) *Invoices_paymentsUpsert {
	u.Set(invoices_payments.FieldFrom, v)
	return u
}

// UpdateFrom sets the "from" field to the value that was provided on create.
func (u *Invoices_paymentsUpsert) UpdateFrom() *Invoices_paymentsUpsert {
	u.SetExcluded(invoices_payments.FieldFrom)
	return u
}

// ClearFrom clears the value of the "from" field.
func (u *Invoices_paymentsUpsert) ClearFrom() *Invoices_paymentsUpsert {
	u.SetNull(invoices_payments.FieldFrom)
	return u
}

// SetAmount sets the "amount" field.
func (u *Invoices_paymentsUpsert) SetAmount(v string) *Invoices_paymentsUpsert {
	u.Set(invoices_payments.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *Invoices_paymentsUpsert) UpdateAmount() *Invoices_paymentsUpsert {
	u.SetExcluded(invoices_payments.FieldAmount)
	return u
}

// ClearAmount clears the value of the "amount" field.
func (u *Invoices_paymentsUpsert) ClearAmount() *Invoices_paymentsUpsert {
	u.SetNull(invoices_payments.FieldAmount)
	return u
}

// SetCorrect sets the "correct" field.
func (u *Invoices_paymentsUpsert) SetCorrect(v bool) *Invoices_paymentsUpsert {
	u.Set(invoices_payments.FieldCorrect, v)
	return u
}

// UpdateCorrect sets the "correct" field to the value that was provided on create.
func (u *Invoices_paymentsUpsert) UpdateCorrect() *Invoices_paymentsUpsert {
	u.SetExcluded(invoices_payments.FieldCorrect)
	return u
}

// ClearCorrect clears the value of the "correct" field.
func (u *Invoices_paymentsUpsert) ClearCorrect() *Invoices_paymentsUpsert {
	u.SetNull(invoices_payments.FieldCorrect)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Invoices_payments.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *Invoices_paymentsUpsertOne) UpdateNewValues() *Invoices_paymentsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Invoices_payments.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *Invoices_paymentsUpsertOne) Ignore() *Invoices_paymentsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *Invoices_paymentsUpsertOne) DoNothing() *Invoices_paymentsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InvoicesPaymentsCreate.OnConflict
// documentation for more info.
func (u *Invoices_paymentsUpsertOne) Update(set func(*Invoices_paymentsUpsert)) *Invoices_paymentsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&Invoices_paymentsUpsert{UpdateSet: update})
	}))
	return u
}

// SetFrom sets the "from" field.
func (u *Invoices_paymentsUpsertOne) SetFrom(v string) *Invoices_paymentsUpsertOne {
	return u.Update(func(s *Invoices_paymentsUpsert) {
		s.SetFrom(v)
	})
}

// UpdateFrom sets the "from" field to the value that was provided on create.
func (u *Invoices_paymentsUpsertOne) UpdateFrom() *Invoices_paymentsUpsertOne {
	return u.Update(func(s *Invoices_paymentsUpsert) {
		s.UpdateFrom()
	})
}

// ClearFrom clears the value of the "from" field.
func (u *Invoices_paymentsUpsertOne) ClearFrom() *Invoices_paymentsUpsertOne {
	return u.Update(func(s *Invoices_paymentsUpsert) {
		s.ClearFrom()
	})
}

// SetAmount sets the "amount" field.
func (u *Invoices_paymentsUpsertOne) SetAmount(v string) *Invoices_paymentsUpsertOne {
	return u.Update(func(s *Invoices_paymentsUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *Invoices_paymentsUpsertOne) UpdateAmount() *Invoices_paymentsUpsertOne {
	return u.Update(func(s *Invoices_paymentsUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *Invoices_paymentsUpsertOne) ClearAmount() *Invoices_paymentsUpsertOne {
	return u.Update(func(s *Invoices_paymentsUpsert) {
		s.ClearAmount()
	})
}

// SetCorrect sets the "correct" field.
func (u *Invoices_paymentsUpsertOne) SetCorrect(v bool) *Invoices_paymentsUpsertOne {
	return u.Update(func(s *Invoices_paymentsUpsert) {
		s.SetCorrect(v)
	})
}

// UpdateCorrect sets the "correct" field to the value that was provided on create.
func (u *Invoices_paymentsUpsertOne) UpdateCorrect() *Invoices_paymentsUpsertOne {
	return u.Update(func(s *Invoices_paymentsUpsert) {
		s.UpdateCorrect()
	})
}

// ClearCorrect clears the value of the "correct" field.
func (u *Invoices_paymentsUpsertOne) ClearCorrect() *Invoices_paymentsUpsertOne {
	return u.Update(func(s *Invoices_paymentsUpsert) {
		s.ClearCorrect()
	})
}

// Exec executes the query.
func (u *Invoices_paymentsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InvoicesPaymentsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *Invoices_paymentsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *Invoices_paymentsUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *Invoices_paymentsUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// InvoicesPaymentsCreateBulk is the builder for creating many Invoices_payments entities in bulk.
type InvoicesPaymentsCreateBulk struct {
	config
	builders []*InvoicesPaymentsCreate
	conflict []sql.ConflictOption
}

// Save creates the Invoices_payments entities in the database.
func (ipcb *InvoicesPaymentsCreateBulk) Save(ctx context.Context) ([]*Invoices_payments, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ipcb.builders))
	nodes := make([]*Invoices_payments, len(ipcb.builders))
	mutators := make([]Mutator, len(ipcb.builders))
	for i := range ipcb.builders {
		func(i int, root context.Context) {
			builder := ipcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InvoicesPaymentsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ipcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ipcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ipcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ipcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ipcb *InvoicesPaymentsCreateBulk) SaveX(ctx context.Context) []*Invoices_payments {
	v, err := ipcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ipcb *InvoicesPaymentsCreateBulk) Exec(ctx context.Context) error {
	_, err := ipcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ipcb *InvoicesPaymentsCreateBulk) ExecX(ctx context.Context) {
	if err := ipcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Invoices_payments.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.Invoices_paymentsUpsert) {
//			SetFrom(v+v).
//		}).
//		Exec(ctx)
func (ipcb *InvoicesPaymentsCreateBulk) OnConflict(opts ...sql.ConflictOption) *Invoices_paymentsUpsertBulk {
	ipcb.conflict = opts
	return &Invoices_paymentsUpsertBulk{
		create: ipcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Invoices_payments.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ipcb *InvoicesPaymentsCreateBulk) OnConflictColumns(columns ...string) *Invoices_paymentsUpsertBulk {
	ipcb.conflict = append(ipcb.conflict, sql.ConflictColumns(columns...))
	return &Invoices_paymentsUpsertBulk{
		create: ipcb,
	}
}

// Invoices_paymentsUpsertBulk is the builder for "upsert"-ing
// a bulk of Invoices_payments nodes.
type Invoices_paymentsUpsertBulk struct {
	create *InvoicesPaymentsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Invoices_payments.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *Invoices_paymentsUpsertBulk) UpdateNewValues() *Invoices_paymentsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Invoices_payments.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *Invoices_paymentsUpsertBulk) Ignore() *Invoices_paymentsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *Invoices_paymentsUpsertBulk) DoNothing() *Invoices_paymentsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InvoicesPaymentsCreateBulk.OnConflict
// documentation for more info.
func (u *Invoices_paymentsUpsertBulk) Update(set func(*Invoices_paymentsUpsert)) *Invoices_paymentsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&Invoices_paymentsUpsert{UpdateSet: update})
	}))
	return u
}

// SetFrom sets the "from" field.
func (u *Invoices_paymentsUpsertBulk) SetFrom(v string) *Invoices_paymentsUpsertBulk {
	return u.Update(func(s *Invoices_paymentsUpsert) {
		s.SetFrom(v)
	})
}

// UpdateFrom sets the "from" field to the value that was provided on create.
func (u *Invoices_paymentsUpsertBulk) UpdateFrom() *Invoices_paymentsUpsertBulk {
	return u.Update(func(s *Invoices_paymentsUpsert) {
		s.UpdateFrom()
	})
}

// ClearFrom clears the value of the "from" field.
func (u *Invoices_paymentsUpsertBulk) ClearFrom() *Invoices_paymentsUpsertBulk {
	return u.Update(func(s *Invoices_paymentsUpsert) {
		s.ClearFrom()
	})
}

// SetAmount sets the "amount" field.
func (u *Invoices_paymentsUpsertBulk) SetAmount(v string) *Invoices_paymentsUpsertBulk {
	return u.Update(func(s *Invoices_paymentsUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *Invoices_paymentsUpsertBulk) UpdateAmount() *Invoices_paymentsUpsertBulk {
	return u.Update(func(s *Invoices_paymentsUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *Invoices_paymentsUpsertBulk) ClearAmount() *Invoices_paymentsUpsertBulk {
	return u.Update(func(s *Invoices_paymentsUpsert) {
		s.ClearAmount()
	})
}

// SetCorrect sets the "correct" field.
func (u *Invoices_paymentsUpsertBulk) SetCorrect(v bool) *Invoices_paymentsUpsertBulk {
	return u.Update(func(s *Invoices_paymentsUpsert) {
		s.SetCorrect(v)
	})
}

// UpdateCorrect sets the "correct" field to the value that was provided on create.
func (u *Invoices_paymentsUpsertBulk) UpdateCorrect() *Invoices_paymentsUpsertBulk {
	return u.Update(func(s *Invoices_paymentsUpsert) {
		s.UpdateCorrect()
	})
}

// ClearCorrect clears the value of the "correct" field.
func (u *Invoices_paymentsUpsertBulk) ClearCorrect() *Invoices_paymentsUpsertBulk {
	return u.Update(func(s *Invoices_paymentsUpsert) {
		s.ClearCorrect()
	})
}

// Exec executes the query.
func (u *Invoices_paymentsUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the InvoicesPaymentsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InvoicesPaymentsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *Invoices_paymentsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
