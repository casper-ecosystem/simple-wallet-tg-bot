// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/invoice"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/invoices_payments"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/predicate"
)

// InvoicesPaymentsUpdate is the builder for updating Invoices_payments entities.
type InvoicesPaymentsUpdate struct {
	config
	hooks    []Hook
	mutation *InvoicesPaymentsMutation
}

// Where appends a list predicates to the InvoicesPaymentsUpdate builder.
func (ipu *InvoicesPaymentsUpdate) Where(ps ...predicate.Invoices_payments) *InvoicesPaymentsUpdate {
	ipu.mutation.Where(ps...)
	return ipu
}

// SetFrom sets the "from" field.
func (ipu *InvoicesPaymentsUpdate) SetFrom(s string) *InvoicesPaymentsUpdate {
	ipu.mutation.SetFrom(s)
	return ipu
}

// SetNillableFrom sets the "from" field if the given value is not nil.
func (ipu *InvoicesPaymentsUpdate) SetNillableFrom(s *string) *InvoicesPaymentsUpdate {
	if s != nil {
		ipu.SetFrom(*s)
	}
	return ipu
}

// ClearFrom clears the value of the "from" field.
func (ipu *InvoicesPaymentsUpdate) ClearFrom() *InvoicesPaymentsUpdate {
	ipu.mutation.ClearFrom()
	return ipu
}

// SetAmount sets the "amount" field.
func (ipu *InvoicesPaymentsUpdate) SetAmount(s string) *InvoicesPaymentsUpdate {
	ipu.mutation.SetAmount(s)
	return ipu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (ipu *InvoicesPaymentsUpdate) SetNillableAmount(s *string) *InvoicesPaymentsUpdate {
	if s != nil {
		ipu.SetAmount(*s)
	}
	return ipu
}

// ClearAmount clears the value of the "amount" field.
func (ipu *InvoicesPaymentsUpdate) ClearAmount() *InvoicesPaymentsUpdate {
	ipu.mutation.ClearAmount()
	return ipu
}

// SetCorrect sets the "correct" field.
func (ipu *InvoicesPaymentsUpdate) SetCorrect(b bool) *InvoicesPaymentsUpdate {
	ipu.mutation.SetCorrect(b)
	return ipu
}

// SetNillableCorrect sets the "correct" field if the given value is not nil.
func (ipu *InvoicesPaymentsUpdate) SetNillableCorrect(b *bool) *InvoicesPaymentsUpdate {
	if b != nil {
		ipu.SetCorrect(*b)
	}
	return ipu
}

// ClearCorrect clears the value of the "correct" field.
func (ipu *InvoicesPaymentsUpdate) ClearCorrect() *InvoicesPaymentsUpdate {
	ipu.mutation.ClearCorrect()
	return ipu
}

// SetInvoiceID sets the "invoice" edge to the Invoice entity by ID.
func (ipu *InvoicesPaymentsUpdate) SetInvoiceID(id int) *InvoicesPaymentsUpdate {
	ipu.mutation.SetInvoiceID(id)
	return ipu
}

// SetInvoice sets the "invoice" edge to the Invoice entity.
func (ipu *InvoicesPaymentsUpdate) SetInvoice(i *Invoice) *InvoicesPaymentsUpdate {
	return ipu.SetInvoiceID(i.ID)
}

// Mutation returns the InvoicesPaymentsMutation object of the builder.
func (ipu *InvoicesPaymentsUpdate) Mutation() *InvoicesPaymentsMutation {
	return ipu.mutation
}

// ClearInvoice clears the "invoice" edge to the Invoice entity.
func (ipu *InvoicesPaymentsUpdate) ClearInvoice() *InvoicesPaymentsUpdate {
	ipu.mutation.ClearInvoice()
	return ipu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ipu *InvoicesPaymentsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ipu.sqlSave, ipu.mutation, ipu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ipu *InvoicesPaymentsUpdate) SaveX(ctx context.Context) int {
	affected, err := ipu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ipu *InvoicesPaymentsUpdate) Exec(ctx context.Context) error {
	_, err := ipu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ipu *InvoicesPaymentsUpdate) ExecX(ctx context.Context) {
	if err := ipu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ipu *InvoicesPaymentsUpdate) check() error {
	if _, ok := ipu.mutation.InvoiceID(); ipu.mutation.InvoiceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Invoices_payments.invoice"`)
	}
	return nil
}

func (ipu *InvoicesPaymentsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ipu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(invoices_payments.Table, invoices_payments.Columns, sqlgraph.NewFieldSpec(invoices_payments.FieldID, field.TypeInt))
	if ps := ipu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ipu.mutation.From(); ok {
		_spec.SetField(invoices_payments.FieldFrom, field.TypeString, value)
	}
	if ipu.mutation.FromCleared() {
		_spec.ClearField(invoices_payments.FieldFrom, field.TypeString)
	}
	if value, ok := ipu.mutation.Amount(); ok {
		_spec.SetField(invoices_payments.FieldAmount, field.TypeString, value)
	}
	if ipu.mutation.AmountCleared() {
		_spec.ClearField(invoices_payments.FieldAmount, field.TypeString)
	}
	if value, ok := ipu.mutation.Correct(); ok {
		_spec.SetField(invoices_payments.FieldCorrect, field.TypeBool, value)
	}
	if ipu.mutation.CorrectCleared() {
		_spec.ClearField(invoices_payments.FieldCorrect, field.TypeBool)
	}
	if ipu.mutation.InvoiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoices_payments.InvoiceTable,
			Columns: []string{invoices_payments.InvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipu.mutation.InvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoices_payments.InvoiceTable,
			Columns: []string{invoices_payments.InvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ipu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invoices_payments.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ipu.mutation.done = true
	return n, nil
}

// InvoicesPaymentsUpdateOne is the builder for updating a single Invoices_payments entity.
type InvoicesPaymentsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InvoicesPaymentsMutation
}

// SetFrom sets the "from" field.
func (ipuo *InvoicesPaymentsUpdateOne) SetFrom(s string) *InvoicesPaymentsUpdateOne {
	ipuo.mutation.SetFrom(s)
	return ipuo
}

// SetNillableFrom sets the "from" field if the given value is not nil.
func (ipuo *InvoicesPaymentsUpdateOne) SetNillableFrom(s *string) *InvoicesPaymentsUpdateOne {
	if s != nil {
		ipuo.SetFrom(*s)
	}
	return ipuo
}

// ClearFrom clears the value of the "from" field.
func (ipuo *InvoicesPaymentsUpdateOne) ClearFrom() *InvoicesPaymentsUpdateOne {
	ipuo.mutation.ClearFrom()
	return ipuo
}

// SetAmount sets the "amount" field.
func (ipuo *InvoicesPaymentsUpdateOne) SetAmount(s string) *InvoicesPaymentsUpdateOne {
	ipuo.mutation.SetAmount(s)
	return ipuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (ipuo *InvoicesPaymentsUpdateOne) SetNillableAmount(s *string) *InvoicesPaymentsUpdateOne {
	if s != nil {
		ipuo.SetAmount(*s)
	}
	return ipuo
}

// ClearAmount clears the value of the "amount" field.
func (ipuo *InvoicesPaymentsUpdateOne) ClearAmount() *InvoicesPaymentsUpdateOne {
	ipuo.mutation.ClearAmount()
	return ipuo
}

// SetCorrect sets the "correct" field.
func (ipuo *InvoicesPaymentsUpdateOne) SetCorrect(b bool) *InvoicesPaymentsUpdateOne {
	ipuo.mutation.SetCorrect(b)
	return ipuo
}

// SetNillableCorrect sets the "correct" field if the given value is not nil.
func (ipuo *InvoicesPaymentsUpdateOne) SetNillableCorrect(b *bool) *InvoicesPaymentsUpdateOne {
	if b != nil {
		ipuo.SetCorrect(*b)
	}
	return ipuo
}

// ClearCorrect clears the value of the "correct" field.
func (ipuo *InvoicesPaymentsUpdateOne) ClearCorrect() *InvoicesPaymentsUpdateOne {
	ipuo.mutation.ClearCorrect()
	return ipuo
}

// SetInvoiceID sets the "invoice" edge to the Invoice entity by ID.
func (ipuo *InvoicesPaymentsUpdateOne) SetInvoiceID(id int) *InvoicesPaymentsUpdateOne {
	ipuo.mutation.SetInvoiceID(id)
	return ipuo
}

// SetInvoice sets the "invoice" edge to the Invoice entity.
func (ipuo *InvoicesPaymentsUpdateOne) SetInvoice(i *Invoice) *InvoicesPaymentsUpdateOne {
	return ipuo.SetInvoiceID(i.ID)
}

// Mutation returns the InvoicesPaymentsMutation object of the builder.
func (ipuo *InvoicesPaymentsUpdateOne) Mutation() *InvoicesPaymentsMutation {
	return ipuo.mutation
}

// ClearInvoice clears the "invoice" edge to the Invoice entity.
func (ipuo *InvoicesPaymentsUpdateOne) ClearInvoice() *InvoicesPaymentsUpdateOne {
	ipuo.mutation.ClearInvoice()
	return ipuo
}

// Where appends a list predicates to the InvoicesPaymentsUpdate builder.
func (ipuo *InvoicesPaymentsUpdateOne) Where(ps ...predicate.Invoices_payments) *InvoicesPaymentsUpdateOne {
	ipuo.mutation.Where(ps...)
	return ipuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ipuo *InvoicesPaymentsUpdateOne) Select(field string, fields ...string) *InvoicesPaymentsUpdateOne {
	ipuo.fields = append([]string{field}, fields...)
	return ipuo
}

// Save executes the query and returns the updated Invoices_payments entity.
func (ipuo *InvoicesPaymentsUpdateOne) Save(ctx context.Context) (*Invoices_payments, error) {
	return withHooks(ctx, ipuo.sqlSave, ipuo.mutation, ipuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ipuo *InvoicesPaymentsUpdateOne) SaveX(ctx context.Context) *Invoices_payments {
	node, err := ipuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ipuo *InvoicesPaymentsUpdateOne) Exec(ctx context.Context) error {
	_, err := ipuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ipuo *InvoicesPaymentsUpdateOne) ExecX(ctx context.Context) {
	if err := ipuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ipuo *InvoicesPaymentsUpdateOne) check() error {
	if _, ok := ipuo.mutation.InvoiceID(); ipuo.mutation.InvoiceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Invoices_payments.invoice"`)
	}
	return nil
}

func (ipuo *InvoicesPaymentsUpdateOne) sqlSave(ctx context.Context) (_node *Invoices_payments, err error) {
	if err := ipuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(invoices_payments.Table, invoices_payments.Columns, sqlgraph.NewFieldSpec(invoices_payments.FieldID, field.TypeInt))
	id, ok := ipuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Invoices_payments.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ipuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, invoices_payments.FieldID)
		for _, f := range fields {
			if !invoices_payments.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != invoices_payments.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ipuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ipuo.mutation.From(); ok {
		_spec.SetField(invoices_payments.FieldFrom, field.TypeString, value)
	}
	if ipuo.mutation.FromCleared() {
		_spec.ClearField(invoices_payments.FieldFrom, field.TypeString)
	}
	if value, ok := ipuo.mutation.Amount(); ok {
		_spec.SetField(invoices_payments.FieldAmount, field.TypeString, value)
	}
	if ipuo.mutation.AmountCleared() {
		_spec.ClearField(invoices_payments.FieldAmount, field.TypeString)
	}
	if value, ok := ipuo.mutation.Correct(); ok {
		_spec.SetField(invoices_payments.FieldCorrect, field.TypeBool, value)
	}
	if ipuo.mutation.CorrectCleared() {
		_spec.ClearField(invoices_payments.FieldCorrect, field.TypeBool)
	}
	if ipuo.mutation.InvoiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoices_payments.InvoiceTable,
			Columns: []string{invoices_payments.InvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipuo.mutation.InvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoices_payments.InvoiceTable,
			Columns: []string{invoices_payments.InvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Invoices_payments{config: ipuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ipuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invoices_payments.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ipuo.mutation.done = true
	return _node, nil
}
