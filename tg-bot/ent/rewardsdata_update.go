// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Simplewallethq/tg-bot/ent/predicate"
	"github.com/Simplewallethq/tg-bot/ent/rewardsdata"
	"github.com/Simplewallethq/tg-bot/ent/user"
)

// RewardsDataUpdate is the builder for updating RewardsData entities.
type RewardsDataUpdate struct {
	config
	hooks    []Hook
	mutation *RewardsDataMutation
}

// Where appends a list predicates to the RewardsDataUpdate builder.
func (rdu *RewardsDataUpdate) Where(ps ...predicate.RewardsData) *RewardsDataUpdate {
	rdu.mutation.Where(ps...)
	return rdu
}

// SetValidator sets the "validator" field.
func (rdu *RewardsDataUpdate) SetValidator(s string) *RewardsDataUpdate {
	rdu.mutation.SetValidator(s)
	return rdu
}

// SetAmount sets the "amount" field.
func (rdu *RewardsDataUpdate) SetAmount(s string) *RewardsDataUpdate {
	rdu.mutation.SetAmount(s)
	return rdu
}

// SetLastReward sets the "last_reward" field.
func (rdu *RewardsDataUpdate) SetLastReward(t time.Time) *RewardsDataUpdate {
	rdu.mutation.SetLastReward(t)
	return rdu
}

// SetFirstEra sets the "first_era" field.
func (rdu *RewardsDataUpdate) SetFirstEra(i int64) *RewardsDataUpdate {
	rdu.mutation.ResetFirstEra()
	rdu.mutation.SetFirstEra(i)
	return rdu
}

// SetNillableFirstEra sets the "first_era" field if the given value is not nil.
func (rdu *RewardsDataUpdate) SetNillableFirstEra(i *int64) *RewardsDataUpdate {
	if i != nil {
		rdu.SetFirstEra(*i)
	}
	return rdu
}

// AddFirstEra adds i to the "first_era" field.
func (rdu *RewardsDataUpdate) AddFirstEra(i int64) *RewardsDataUpdate {
	rdu.mutation.AddFirstEra(i)
	return rdu
}

// SetLastEra sets the "last_era" field.
func (rdu *RewardsDataUpdate) SetLastEra(i int64) *RewardsDataUpdate {
	rdu.mutation.ResetLastEra()
	rdu.mutation.SetLastEra(i)
	return rdu
}

// SetNillableLastEra sets the "last_era" field if the given value is not nil.
func (rdu *RewardsDataUpdate) SetNillableLastEra(i *int64) *RewardsDataUpdate {
	if i != nil {
		rdu.SetLastEra(*i)
	}
	return rdu
}

// AddLastEra adds i to the "last_era" field.
func (rdu *RewardsDataUpdate) AddLastEra(i int64) *RewardsDataUpdate {
	rdu.mutation.AddLastEra(i)
	return rdu
}

// SetFirstEraTimestamp sets the "first_era_timestamp" field.
func (rdu *RewardsDataUpdate) SetFirstEraTimestamp(s string) *RewardsDataUpdate {
	rdu.mutation.SetFirstEraTimestamp(s)
	return rdu
}

// SetLastEraTimestamp sets the "last_era_timestamp" field.
func (rdu *RewardsDataUpdate) SetLastEraTimestamp(s string) *RewardsDataUpdate {
	rdu.mutation.SetLastEraTimestamp(s)
	return rdu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (rdu *RewardsDataUpdate) SetOwnerID(id int64) *RewardsDataUpdate {
	rdu.mutation.SetOwnerID(id)
	return rdu
}

// SetOwner sets the "owner" edge to the User entity.
func (rdu *RewardsDataUpdate) SetOwner(u *User) *RewardsDataUpdate {
	return rdu.SetOwnerID(u.ID)
}

// Mutation returns the RewardsDataMutation object of the builder.
func (rdu *RewardsDataUpdate) Mutation() *RewardsDataMutation {
	return rdu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (rdu *RewardsDataUpdate) ClearOwner() *RewardsDataUpdate {
	rdu.mutation.ClearOwner()
	return rdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rdu *RewardsDataUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rdu.sqlSave, rdu.mutation, rdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rdu *RewardsDataUpdate) SaveX(ctx context.Context) int {
	affected, err := rdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rdu *RewardsDataUpdate) Exec(ctx context.Context) error {
	_, err := rdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdu *RewardsDataUpdate) ExecX(ctx context.Context) {
	if err := rdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rdu *RewardsDataUpdate) check() error {
	if _, ok := rdu.mutation.OwnerID(); rdu.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RewardsData.owner"`)
	}
	return nil
}

func (rdu *RewardsDataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(rewardsdata.Table, rewardsdata.Columns, sqlgraph.NewFieldSpec(rewardsdata.FieldID, field.TypeInt))
	if ps := rdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rdu.mutation.Validator(); ok {
		_spec.SetField(rewardsdata.FieldValidator, field.TypeString, value)
	}
	if value, ok := rdu.mutation.Amount(); ok {
		_spec.SetField(rewardsdata.FieldAmount, field.TypeString, value)
	}
	if value, ok := rdu.mutation.LastReward(); ok {
		_spec.SetField(rewardsdata.FieldLastReward, field.TypeTime, value)
	}
	if value, ok := rdu.mutation.FirstEra(); ok {
		_spec.SetField(rewardsdata.FieldFirstEra, field.TypeInt64, value)
	}
	if value, ok := rdu.mutation.AddedFirstEra(); ok {
		_spec.AddField(rewardsdata.FieldFirstEra, field.TypeInt64, value)
	}
	if value, ok := rdu.mutation.LastEra(); ok {
		_spec.SetField(rewardsdata.FieldLastEra, field.TypeInt64, value)
	}
	if value, ok := rdu.mutation.AddedLastEra(); ok {
		_spec.AddField(rewardsdata.FieldLastEra, field.TypeInt64, value)
	}
	if value, ok := rdu.mutation.FirstEraTimestamp(); ok {
		_spec.SetField(rewardsdata.FieldFirstEraTimestamp, field.TypeString, value)
	}
	if value, ok := rdu.mutation.LastEraTimestamp(); ok {
		_spec.SetField(rewardsdata.FieldLastEraTimestamp, field.TypeString, value)
	}
	if rdu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rewardsdata.OwnerTable,
			Columns: []string{rewardsdata.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rewardsdata.OwnerTable,
			Columns: []string{rewardsdata.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rewardsdata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rdu.mutation.done = true
	return n, nil
}

// RewardsDataUpdateOne is the builder for updating a single RewardsData entity.
type RewardsDataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RewardsDataMutation
}

// SetValidator sets the "validator" field.
func (rduo *RewardsDataUpdateOne) SetValidator(s string) *RewardsDataUpdateOne {
	rduo.mutation.SetValidator(s)
	return rduo
}

// SetAmount sets the "amount" field.
func (rduo *RewardsDataUpdateOne) SetAmount(s string) *RewardsDataUpdateOne {
	rduo.mutation.SetAmount(s)
	return rduo
}

// SetLastReward sets the "last_reward" field.
func (rduo *RewardsDataUpdateOne) SetLastReward(t time.Time) *RewardsDataUpdateOne {
	rduo.mutation.SetLastReward(t)
	return rduo
}

// SetFirstEra sets the "first_era" field.
func (rduo *RewardsDataUpdateOne) SetFirstEra(i int64) *RewardsDataUpdateOne {
	rduo.mutation.ResetFirstEra()
	rduo.mutation.SetFirstEra(i)
	return rduo
}

// SetNillableFirstEra sets the "first_era" field if the given value is not nil.
func (rduo *RewardsDataUpdateOne) SetNillableFirstEra(i *int64) *RewardsDataUpdateOne {
	if i != nil {
		rduo.SetFirstEra(*i)
	}
	return rduo
}

// AddFirstEra adds i to the "first_era" field.
func (rduo *RewardsDataUpdateOne) AddFirstEra(i int64) *RewardsDataUpdateOne {
	rduo.mutation.AddFirstEra(i)
	return rduo
}

// SetLastEra sets the "last_era" field.
func (rduo *RewardsDataUpdateOne) SetLastEra(i int64) *RewardsDataUpdateOne {
	rduo.mutation.ResetLastEra()
	rduo.mutation.SetLastEra(i)
	return rduo
}

// SetNillableLastEra sets the "last_era" field if the given value is not nil.
func (rduo *RewardsDataUpdateOne) SetNillableLastEra(i *int64) *RewardsDataUpdateOne {
	if i != nil {
		rduo.SetLastEra(*i)
	}
	return rduo
}

// AddLastEra adds i to the "last_era" field.
func (rduo *RewardsDataUpdateOne) AddLastEra(i int64) *RewardsDataUpdateOne {
	rduo.mutation.AddLastEra(i)
	return rduo
}

// SetFirstEraTimestamp sets the "first_era_timestamp" field.
func (rduo *RewardsDataUpdateOne) SetFirstEraTimestamp(s string) *RewardsDataUpdateOne {
	rduo.mutation.SetFirstEraTimestamp(s)
	return rduo
}

// SetLastEraTimestamp sets the "last_era_timestamp" field.
func (rduo *RewardsDataUpdateOne) SetLastEraTimestamp(s string) *RewardsDataUpdateOne {
	rduo.mutation.SetLastEraTimestamp(s)
	return rduo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (rduo *RewardsDataUpdateOne) SetOwnerID(id int64) *RewardsDataUpdateOne {
	rduo.mutation.SetOwnerID(id)
	return rduo
}

// SetOwner sets the "owner" edge to the User entity.
func (rduo *RewardsDataUpdateOne) SetOwner(u *User) *RewardsDataUpdateOne {
	return rduo.SetOwnerID(u.ID)
}

// Mutation returns the RewardsDataMutation object of the builder.
func (rduo *RewardsDataUpdateOne) Mutation() *RewardsDataMutation {
	return rduo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (rduo *RewardsDataUpdateOne) ClearOwner() *RewardsDataUpdateOne {
	rduo.mutation.ClearOwner()
	return rduo
}

// Where appends a list predicates to the RewardsDataUpdate builder.
func (rduo *RewardsDataUpdateOne) Where(ps ...predicate.RewardsData) *RewardsDataUpdateOne {
	rduo.mutation.Where(ps...)
	return rduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rduo *RewardsDataUpdateOne) Select(field string, fields ...string) *RewardsDataUpdateOne {
	rduo.fields = append([]string{field}, fields...)
	return rduo
}

// Save executes the query and returns the updated RewardsData entity.
func (rduo *RewardsDataUpdateOne) Save(ctx context.Context) (*RewardsData, error) {
	return withHooks(ctx, rduo.sqlSave, rduo.mutation, rduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rduo *RewardsDataUpdateOne) SaveX(ctx context.Context) *RewardsData {
	node, err := rduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rduo *RewardsDataUpdateOne) Exec(ctx context.Context) error {
	_, err := rduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rduo *RewardsDataUpdateOne) ExecX(ctx context.Context) {
	if err := rduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rduo *RewardsDataUpdateOne) check() error {
	if _, ok := rduo.mutation.OwnerID(); rduo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RewardsData.owner"`)
	}
	return nil
}

func (rduo *RewardsDataUpdateOne) sqlSave(ctx context.Context) (_node *RewardsData, err error) {
	if err := rduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(rewardsdata.Table, rewardsdata.Columns, sqlgraph.NewFieldSpec(rewardsdata.FieldID, field.TypeInt))
	id, ok := rduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RewardsData.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rewardsdata.FieldID)
		for _, f := range fields {
			if !rewardsdata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rewardsdata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rduo.mutation.Validator(); ok {
		_spec.SetField(rewardsdata.FieldValidator, field.TypeString, value)
	}
	if value, ok := rduo.mutation.Amount(); ok {
		_spec.SetField(rewardsdata.FieldAmount, field.TypeString, value)
	}
	if value, ok := rduo.mutation.LastReward(); ok {
		_spec.SetField(rewardsdata.FieldLastReward, field.TypeTime, value)
	}
	if value, ok := rduo.mutation.FirstEra(); ok {
		_spec.SetField(rewardsdata.FieldFirstEra, field.TypeInt64, value)
	}
	if value, ok := rduo.mutation.AddedFirstEra(); ok {
		_spec.AddField(rewardsdata.FieldFirstEra, field.TypeInt64, value)
	}
	if value, ok := rduo.mutation.LastEra(); ok {
		_spec.SetField(rewardsdata.FieldLastEra, field.TypeInt64, value)
	}
	if value, ok := rduo.mutation.AddedLastEra(); ok {
		_spec.AddField(rewardsdata.FieldLastEra, field.TypeInt64, value)
	}
	if value, ok := rduo.mutation.FirstEraTimestamp(); ok {
		_spec.SetField(rewardsdata.FieldFirstEraTimestamp, field.TypeString, value)
	}
	if value, ok := rduo.mutation.LastEraTimestamp(); ok {
		_spec.SetField(rewardsdata.FieldLastEraTimestamp, field.TypeString, value)
	}
	if rduo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rewardsdata.OwnerTable,
			Columns: []string{rewardsdata.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rduo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rewardsdata.OwnerTable,
			Columns: []string{rewardsdata.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RewardsData{config: rduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rewardsdata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rduo.mutation.done = true
	return _node, nil
}
