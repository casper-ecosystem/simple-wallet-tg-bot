// Code generated by ent, DO NOT EDIT.

package rewardsdata

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the rewardsdata type in the database.
	Label = "rewards_data"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldValidator holds the string denoting the validator field in the database.
	FieldValidator = "validator"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldLastReward holds the string denoting the last_reward field in the database.
	FieldLastReward = "last_reward"
	// FieldFirstEra holds the string denoting the first_era field in the database.
	FieldFirstEra = "first_era"
	// FieldLastEra holds the string denoting the last_era field in the database.
	FieldLastEra = "last_era"
	// FieldFirstEraTimestamp holds the string denoting the first_era_timestamp field in the database.
	FieldFirstEraTimestamp = "first_era_timestamp"
	// FieldLastEraTimestamp holds the string denoting the last_era_timestamp field in the database.
	FieldLastEraTimestamp = "last_era_timestamp"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// Table holds the table name of the rewardsdata in the database.
	Table = "rewards_data"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "rewards_data"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_rewards_data"
)

// Columns holds all SQL columns for rewardsdata fields.
var Columns = []string{
	FieldID,
	FieldValidator,
	FieldAmount,
	FieldLastReward,
	FieldFirstEra,
	FieldLastEra,
	FieldFirstEraTimestamp,
	FieldLastEraTimestamp,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "rewards_data"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_rewards_data",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultFirstEra holds the default value on creation for the "first_era" field.
	DefaultFirstEra int64
	// DefaultLastEra holds the default value on creation for the "last_era" field.
	DefaultLastEra int64
)

// OrderOption defines the ordering options for the RewardsData queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByValidator orders the results by the validator field.
func ByValidator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValidator, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByLastReward orders the results by the last_reward field.
func ByLastReward(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastReward, opts...).ToFunc()
}

// ByFirstEra orders the results by the first_era field.
func ByFirstEra(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstEra, opts...).ToFunc()
}

// ByLastEra orders the results by the last_era field.
func ByLastEra(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastEra, opts...).ToFunc()
}

// ByFirstEraTimestamp orders the results by the first_era_timestamp field.
func ByFirstEraTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstEraTimestamp, opts...).ToFunc()
}

// ByLastEraTimestamp orders the results by the last_era_timestamp field.
func ByLastEraTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastEraTimestamp, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
