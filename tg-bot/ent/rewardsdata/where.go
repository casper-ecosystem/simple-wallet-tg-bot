// Code generated by ent, DO NOT EDIT.

package rewardsdata

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldLTE(FieldID, id))
}

// Validator applies equality check predicate on the "validator" field. It's identical to ValidatorEQ.
func Validator(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldEQ(FieldValidator, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldEQ(FieldAmount, v))
}

// LastReward applies equality check predicate on the "last_reward" field. It's identical to LastRewardEQ.
func LastReward(v time.Time) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldEQ(FieldLastReward, v))
}

// FirstEra applies equality check predicate on the "first_era" field. It's identical to FirstEraEQ.
func FirstEra(v int64) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldEQ(FieldFirstEra, v))
}

// LastEra applies equality check predicate on the "last_era" field. It's identical to LastEraEQ.
func LastEra(v int64) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldEQ(FieldLastEra, v))
}

// FirstEraTimestamp applies equality check predicate on the "first_era_timestamp" field. It's identical to FirstEraTimestampEQ.
func FirstEraTimestamp(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldEQ(FieldFirstEraTimestamp, v))
}

// LastEraTimestamp applies equality check predicate on the "last_era_timestamp" field. It's identical to LastEraTimestampEQ.
func LastEraTimestamp(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldEQ(FieldLastEraTimestamp, v))
}

// ValidatorEQ applies the EQ predicate on the "validator" field.
func ValidatorEQ(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldEQ(FieldValidator, v))
}

// ValidatorNEQ applies the NEQ predicate on the "validator" field.
func ValidatorNEQ(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldNEQ(FieldValidator, v))
}

// ValidatorIn applies the In predicate on the "validator" field.
func ValidatorIn(vs ...string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldIn(FieldValidator, vs...))
}

// ValidatorNotIn applies the NotIn predicate on the "validator" field.
func ValidatorNotIn(vs ...string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldNotIn(FieldValidator, vs...))
}

// ValidatorGT applies the GT predicate on the "validator" field.
func ValidatorGT(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldGT(FieldValidator, v))
}

// ValidatorGTE applies the GTE predicate on the "validator" field.
func ValidatorGTE(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldGTE(FieldValidator, v))
}

// ValidatorLT applies the LT predicate on the "validator" field.
func ValidatorLT(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldLT(FieldValidator, v))
}

// ValidatorLTE applies the LTE predicate on the "validator" field.
func ValidatorLTE(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldLTE(FieldValidator, v))
}

// ValidatorContains applies the Contains predicate on the "validator" field.
func ValidatorContains(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldContains(FieldValidator, v))
}

// ValidatorHasPrefix applies the HasPrefix predicate on the "validator" field.
func ValidatorHasPrefix(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldHasPrefix(FieldValidator, v))
}

// ValidatorHasSuffix applies the HasSuffix predicate on the "validator" field.
func ValidatorHasSuffix(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldHasSuffix(FieldValidator, v))
}

// ValidatorEqualFold applies the EqualFold predicate on the "validator" field.
func ValidatorEqualFold(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldEqualFold(FieldValidator, v))
}

// ValidatorContainsFold applies the ContainsFold predicate on the "validator" field.
func ValidatorContainsFold(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldContainsFold(FieldValidator, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldLTE(FieldAmount, v))
}

// AmountContains applies the Contains predicate on the "amount" field.
func AmountContains(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldContains(FieldAmount, v))
}

// AmountHasPrefix applies the HasPrefix predicate on the "amount" field.
func AmountHasPrefix(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldHasPrefix(FieldAmount, v))
}

// AmountHasSuffix applies the HasSuffix predicate on the "amount" field.
func AmountHasSuffix(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldHasSuffix(FieldAmount, v))
}

// AmountEqualFold applies the EqualFold predicate on the "amount" field.
func AmountEqualFold(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldEqualFold(FieldAmount, v))
}

// AmountContainsFold applies the ContainsFold predicate on the "amount" field.
func AmountContainsFold(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldContainsFold(FieldAmount, v))
}

// LastRewardEQ applies the EQ predicate on the "last_reward" field.
func LastRewardEQ(v time.Time) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldEQ(FieldLastReward, v))
}

// LastRewardNEQ applies the NEQ predicate on the "last_reward" field.
func LastRewardNEQ(v time.Time) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldNEQ(FieldLastReward, v))
}

// LastRewardIn applies the In predicate on the "last_reward" field.
func LastRewardIn(vs ...time.Time) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldIn(FieldLastReward, vs...))
}

// LastRewardNotIn applies the NotIn predicate on the "last_reward" field.
func LastRewardNotIn(vs ...time.Time) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldNotIn(FieldLastReward, vs...))
}

// LastRewardGT applies the GT predicate on the "last_reward" field.
func LastRewardGT(v time.Time) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldGT(FieldLastReward, v))
}

// LastRewardGTE applies the GTE predicate on the "last_reward" field.
func LastRewardGTE(v time.Time) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldGTE(FieldLastReward, v))
}

// LastRewardLT applies the LT predicate on the "last_reward" field.
func LastRewardLT(v time.Time) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldLT(FieldLastReward, v))
}

// LastRewardLTE applies the LTE predicate on the "last_reward" field.
func LastRewardLTE(v time.Time) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldLTE(FieldLastReward, v))
}

// FirstEraEQ applies the EQ predicate on the "first_era" field.
func FirstEraEQ(v int64) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldEQ(FieldFirstEra, v))
}

// FirstEraNEQ applies the NEQ predicate on the "first_era" field.
func FirstEraNEQ(v int64) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldNEQ(FieldFirstEra, v))
}

// FirstEraIn applies the In predicate on the "first_era" field.
func FirstEraIn(vs ...int64) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldIn(FieldFirstEra, vs...))
}

// FirstEraNotIn applies the NotIn predicate on the "first_era" field.
func FirstEraNotIn(vs ...int64) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldNotIn(FieldFirstEra, vs...))
}

// FirstEraGT applies the GT predicate on the "first_era" field.
func FirstEraGT(v int64) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldGT(FieldFirstEra, v))
}

// FirstEraGTE applies the GTE predicate on the "first_era" field.
func FirstEraGTE(v int64) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldGTE(FieldFirstEra, v))
}

// FirstEraLT applies the LT predicate on the "first_era" field.
func FirstEraLT(v int64) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldLT(FieldFirstEra, v))
}

// FirstEraLTE applies the LTE predicate on the "first_era" field.
func FirstEraLTE(v int64) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldLTE(FieldFirstEra, v))
}

// LastEraEQ applies the EQ predicate on the "last_era" field.
func LastEraEQ(v int64) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldEQ(FieldLastEra, v))
}

// LastEraNEQ applies the NEQ predicate on the "last_era" field.
func LastEraNEQ(v int64) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldNEQ(FieldLastEra, v))
}

// LastEraIn applies the In predicate on the "last_era" field.
func LastEraIn(vs ...int64) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldIn(FieldLastEra, vs...))
}

// LastEraNotIn applies the NotIn predicate on the "last_era" field.
func LastEraNotIn(vs ...int64) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldNotIn(FieldLastEra, vs...))
}

// LastEraGT applies the GT predicate on the "last_era" field.
func LastEraGT(v int64) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldGT(FieldLastEra, v))
}

// LastEraGTE applies the GTE predicate on the "last_era" field.
func LastEraGTE(v int64) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldGTE(FieldLastEra, v))
}

// LastEraLT applies the LT predicate on the "last_era" field.
func LastEraLT(v int64) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldLT(FieldLastEra, v))
}

// LastEraLTE applies the LTE predicate on the "last_era" field.
func LastEraLTE(v int64) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldLTE(FieldLastEra, v))
}

// FirstEraTimestampEQ applies the EQ predicate on the "first_era_timestamp" field.
func FirstEraTimestampEQ(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldEQ(FieldFirstEraTimestamp, v))
}

// FirstEraTimestampNEQ applies the NEQ predicate on the "first_era_timestamp" field.
func FirstEraTimestampNEQ(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldNEQ(FieldFirstEraTimestamp, v))
}

// FirstEraTimestampIn applies the In predicate on the "first_era_timestamp" field.
func FirstEraTimestampIn(vs ...string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldIn(FieldFirstEraTimestamp, vs...))
}

// FirstEraTimestampNotIn applies the NotIn predicate on the "first_era_timestamp" field.
func FirstEraTimestampNotIn(vs ...string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldNotIn(FieldFirstEraTimestamp, vs...))
}

// FirstEraTimestampGT applies the GT predicate on the "first_era_timestamp" field.
func FirstEraTimestampGT(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldGT(FieldFirstEraTimestamp, v))
}

// FirstEraTimestampGTE applies the GTE predicate on the "first_era_timestamp" field.
func FirstEraTimestampGTE(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldGTE(FieldFirstEraTimestamp, v))
}

// FirstEraTimestampLT applies the LT predicate on the "first_era_timestamp" field.
func FirstEraTimestampLT(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldLT(FieldFirstEraTimestamp, v))
}

// FirstEraTimestampLTE applies the LTE predicate on the "first_era_timestamp" field.
func FirstEraTimestampLTE(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldLTE(FieldFirstEraTimestamp, v))
}

// FirstEraTimestampContains applies the Contains predicate on the "first_era_timestamp" field.
func FirstEraTimestampContains(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldContains(FieldFirstEraTimestamp, v))
}

// FirstEraTimestampHasPrefix applies the HasPrefix predicate on the "first_era_timestamp" field.
func FirstEraTimestampHasPrefix(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldHasPrefix(FieldFirstEraTimestamp, v))
}

// FirstEraTimestampHasSuffix applies the HasSuffix predicate on the "first_era_timestamp" field.
func FirstEraTimestampHasSuffix(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldHasSuffix(FieldFirstEraTimestamp, v))
}

// FirstEraTimestampEqualFold applies the EqualFold predicate on the "first_era_timestamp" field.
func FirstEraTimestampEqualFold(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldEqualFold(FieldFirstEraTimestamp, v))
}

// FirstEraTimestampContainsFold applies the ContainsFold predicate on the "first_era_timestamp" field.
func FirstEraTimestampContainsFold(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldContainsFold(FieldFirstEraTimestamp, v))
}

// LastEraTimestampEQ applies the EQ predicate on the "last_era_timestamp" field.
func LastEraTimestampEQ(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldEQ(FieldLastEraTimestamp, v))
}

// LastEraTimestampNEQ applies the NEQ predicate on the "last_era_timestamp" field.
func LastEraTimestampNEQ(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldNEQ(FieldLastEraTimestamp, v))
}

// LastEraTimestampIn applies the In predicate on the "last_era_timestamp" field.
func LastEraTimestampIn(vs ...string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldIn(FieldLastEraTimestamp, vs...))
}

// LastEraTimestampNotIn applies the NotIn predicate on the "last_era_timestamp" field.
func LastEraTimestampNotIn(vs ...string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldNotIn(FieldLastEraTimestamp, vs...))
}

// LastEraTimestampGT applies the GT predicate on the "last_era_timestamp" field.
func LastEraTimestampGT(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldGT(FieldLastEraTimestamp, v))
}

// LastEraTimestampGTE applies the GTE predicate on the "last_era_timestamp" field.
func LastEraTimestampGTE(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldGTE(FieldLastEraTimestamp, v))
}

// LastEraTimestampLT applies the LT predicate on the "last_era_timestamp" field.
func LastEraTimestampLT(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldLT(FieldLastEraTimestamp, v))
}

// LastEraTimestampLTE applies the LTE predicate on the "last_era_timestamp" field.
func LastEraTimestampLTE(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldLTE(FieldLastEraTimestamp, v))
}

// LastEraTimestampContains applies the Contains predicate on the "last_era_timestamp" field.
func LastEraTimestampContains(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldContains(FieldLastEraTimestamp, v))
}

// LastEraTimestampHasPrefix applies the HasPrefix predicate on the "last_era_timestamp" field.
func LastEraTimestampHasPrefix(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldHasPrefix(FieldLastEraTimestamp, v))
}

// LastEraTimestampHasSuffix applies the HasSuffix predicate on the "last_era_timestamp" field.
func LastEraTimestampHasSuffix(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldHasSuffix(FieldLastEraTimestamp, v))
}

// LastEraTimestampEqualFold applies the EqualFold predicate on the "last_era_timestamp" field.
func LastEraTimestampEqualFold(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldEqualFold(FieldLastEraTimestamp, v))
}

// LastEraTimestampContainsFold applies the ContainsFold predicate on the "last_era_timestamp" field.
func LastEraTimestampContainsFold(v string) predicate.RewardsData {
	return predicate.RewardsData(sql.FieldContainsFold(FieldLastEraTimestamp, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.RewardsData {
	return predicate.RewardsData(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.RewardsData {
	return predicate.RewardsData(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RewardsData) predicate.RewardsData {
	return predicate.RewardsData(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RewardsData) predicate.RewardsData {
	return predicate.RewardsData(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RewardsData) predicate.RewardsData {
	return predicate.RewardsData(func(s *sql.Selector) {
		p(s.Not())
	})
}
