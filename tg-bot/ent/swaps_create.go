// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Simplewallethq/tg-bot/ent/swaps"
	"github.com/Simplewallethq/tg-bot/ent/user"
)

// SwapsCreate is the builder for creating a Swaps entity.
type SwapsCreate struct {
	config
	mutation *SwapsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetType sets the "type" field.
func (sc *SwapsCreate) SetType(s string) *SwapsCreate {
	sc.mutation.SetType(s)
	return sc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (sc *SwapsCreate) SetNillableType(s *string) *SwapsCreate {
	if s != nil {
		sc.SetType(*s)
	}
	return sc
}

// SetToAddress sets the "to_address" field.
func (sc *SwapsCreate) SetToAddress(s string) *SwapsCreate {
	sc.mutation.SetToAddress(s)
	return sc
}

// SetNillableToAddress sets the "to_address" field if the given value is not nil.
func (sc *SwapsCreate) SetNillableToAddress(s *string) *SwapsCreate {
	if s != nil {
		sc.SetToAddress(*s)
	}
	return sc
}

// SetFromCurrency sets the "from_currency" field.
func (sc *SwapsCreate) SetFromCurrency(s string) *SwapsCreate {
	sc.mutation.SetFromCurrency(s)
	return sc
}

// SetNillableFromCurrency sets the "from_currency" field if the given value is not nil.
func (sc *SwapsCreate) SetNillableFromCurrency(s *string) *SwapsCreate {
	if s != nil {
		sc.SetFromCurrency(*s)
	}
	return sc
}

// SetToCurrency sets the "to_currency" field.
func (sc *SwapsCreate) SetToCurrency(s string) *SwapsCreate {
	sc.mutation.SetToCurrency(s)
	return sc
}

// SetNillableToCurrency sets the "to_currency" field if the given value is not nil.
func (sc *SwapsCreate) SetNillableToCurrency(s *string) *SwapsCreate {
	if s != nil {
		sc.SetToCurrency(*s)
	}
	return sc
}

// SetToNetwork sets the "to_network" field.
func (sc *SwapsCreate) SetToNetwork(s string) *SwapsCreate {
	sc.mutation.SetToNetwork(s)
	return sc
}

// SetNillableToNetwork sets the "to_network" field if the given value is not nil.
func (sc *SwapsCreate) SetNillableToNetwork(s *string) *SwapsCreate {
	if s != nil {
		sc.SetToNetwork(*s)
	}
	return sc
}

// SetFromNetwork sets the "from_network" field.
func (sc *SwapsCreate) SetFromNetwork(s string) *SwapsCreate {
	sc.mutation.SetFromNetwork(s)
	return sc
}

// SetNillableFromNetwork sets the "from_network" field if the given value is not nil.
func (sc *SwapsCreate) SetNillableFromNetwork(s *string) *SwapsCreate {
	if s != nil {
		sc.SetFromNetwork(*s)
	}
	return sc
}

// SetAmount sets the "amount" field.
func (sc *SwapsCreate) SetAmount(s string) *SwapsCreate {
	sc.mutation.SetAmount(s)
	return sc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (sc *SwapsCreate) SetNillableAmount(s *string) *SwapsCreate {
	if s != nil {
		sc.SetAmount(*s)
	}
	return sc
}

// SetAmountRecive sets the "amountRecive" field.
func (sc *SwapsCreate) SetAmountRecive(s string) *SwapsCreate {
	sc.mutation.SetAmountRecive(s)
	return sc
}

// SetNillableAmountRecive sets the "amountRecive" field if the given value is not nil.
func (sc *SwapsCreate) SetNillableAmountRecive(s *string) *SwapsCreate {
	if s != nil {
		sc.SetAmountRecive(*s)
	}
	return sc
}

// SetRefundAddress sets the "refund_address" field.
func (sc *SwapsCreate) SetRefundAddress(s string) *SwapsCreate {
	sc.mutation.SetRefundAddress(s)
	return sc
}

// SetNillableRefundAddress sets the "refund_address" field if the given value is not nil.
func (sc *SwapsCreate) SetNillableRefundAddress(s *string) *SwapsCreate {
	if s != nil {
		sc.SetRefundAddress(*s)
	}
	return sc
}

// SetSwapID sets the "swap_id" field.
func (sc *SwapsCreate) SetSwapID(s string) *SwapsCreate {
	sc.mutation.SetSwapID(s)
	return sc
}

// SetNillableSwapID sets the "swap_id" field if the given value is not nil.
func (sc *SwapsCreate) SetNillableSwapID(s *string) *SwapsCreate {
	if s != nil {
		sc.SetSwapID(*s)
	}
	return sc
}

// SetExtraID sets the "extra_id" field.
func (sc *SwapsCreate) SetExtraID(s string) *SwapsCreate {
	sc.mutation.SetExtraID(s)
	return sc
}

// SetNillableExtraID sets the "extra_id" field if the given value is not nil.
func (sc *SwapsCreate) SetNillableExtraID(s *string) *SwapsCreate {
	if s != nil {
		sc.SetExtraID(*s)
	}
	return sc
}

// SetInvoiceID sets the "invoiceID" field.
func (sc *SwapsCreate) SetInvoiceID(i int64) *SwapsCreate {
	sc.mutation.SetInvoiceID(i)
	return sc
}

// SetNillableInvoiceID sets the "invoiceID" field if the given value is not nil.
func (sc *SwapsCreate) SetNillableInvoiceID(i *int64) *SwapsCreate {
	if i != nil {
		sc.SetInvoiceID(*i)
	}
	return sc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (sc *SwapsCreate) SetOwnerID(id int64) *SwapsCreate {
	sc.mutation.SetOwnerID(id)
	return sc
}

// SetOwner sets the "owner" edge to the User entity.
func (sc *SwapsCreate) SetOwner(u *User) *SwapsCreate {
	return sc.SetOwnerID(u.ID)
}

// Mutation returns the SwapsMutation object of the builder.
func (sc *SwapsCreate) Mutation() *SwapsMutation {
	return sc.mutation
}

// Save creates the Swaps in the database.
func (sc *SwapsCreate) Save(ctx context.Context) (*Swaps, error) {
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SwapsCreate) SaveX(ctx context.Context) *Swaps {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SwapsCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SwapsCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SwapsCreate) check() error {
	if _, ok := sc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "Swaps.owner"`)}
	}
	return nil
}

func (sc *SwapsCreate) sqlSave(ctx context.Context) (*Swaps, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SwapsCreate) createSpec() (*Swaps, *sqlgraph.CreateSpec) {
	var (
		_node = &Swaps{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(swaps.Table, sqlgraph.NewFieldSpec(swaps.FieldID, field.TypeInt))
	)
	_spec.OnConflict = sc.conflict
	if value, ok := sc.mutation.GetType(); ok {
		_spec.SetField(swaps.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := sc.mutation.ToAddress(); ok {
		_spec.SetField(swaps.FieldToAddress, field.TypeString, value)
		_node.ToAddress = value
	}
	if value, ok := sc.mutation.FromCurrency(); ok {
		_spec.SetField(swaps.FieldFromCurrency, field.TypeString, value)
		_node.FromCurrency = value
	}
	if value, ok := sc.mutation.ToCurrency(); ok {
		_spec.SetField(swaps.FieldToCurrency, field.TypeString, value)
		_node.ToCurrency = value
	}
	if value, ok := sc.mutation.ToNetwork(); ok {
		_spec.SetField(swaps.FieldToNetwork, field.TypeString, value)
		_node.ToNetwork = value
	}
	if value, ok := sc.mutation.FromNetwork(); ok {
		_spec.SetField(swaps.FieldFromNetwork, field.TypeString, value)
		_node.FromNetwork = value
	}
	if value, ok := sc.mutation.Amount(); ok {
		_spec.SetField(swaps.FieldAmount, field.TypeString, value)
		_node.Amount = value
	}
	if value, ok := sc.mutation.AmountRecive(); ok {
		_spec.SetField(swaps.FieldAmountRecive, field.TypeString, value)
		_node.AmountRecive = value
	}
	if value, ok := sc.mutation.RefundAddress(); ok {
		_spec.SetField(swaps.FieldRefundAddress, field.TypeString, value)
		_node.RefundAddress = value
	}
	if value, ok := sc.mutation.SwapID(); ok {
		_spec.SetField(swaps.FieldSwapID, field.TypeString, value)
		_node.SwapID = value
	}
	if value, ok := sc.mutation.ExtraID(); ok {
		_spec.SetField(swaps.FieldExtraID, field.TypeString, value)
		_node.ExtraID = value
	}
	if value, ok := sc.mutation.InvoiceID(); ok {
		_spec.SetField(swaps.FieldInvoiceID, field.TypeInt64, value)
		_node.InvoiceID = value
	}
	if nodes := sc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   swaps.OwnerTable,
			Columns: []string{swaps.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_swaps = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Swaps.Create().
//		SetType(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SwapsUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (sc *SwapsCreate) OnConflict(opts ...sql.ConflictOption) *SwapsUpsertOne {
	sc.conflict = opts
	return &SwapsUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Swaps.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *SwapsCreate) OnConflictColumns(columns ...string) *SwapsUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SwapsUpsertOne{
		create: sc,
	}
}

type (
	// SwapsUpsertOne is the builder for "upsert"-ing
	//  one Swaps node.
	SwapsUpsertOne struct {
		create *SwapsCreate
	}

	// SwapsUpsert is the "OnConflict" setter.
	SwapsUpsert struct {
		*sql.UpdateSet
	}
)

// SetType sets the "type" field.
func (u *SwapsUpsert) SetType(v string) *SwapsUpsert {
	u.Set(swaps.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *SwapsUpsert) UpdateType() *SwapsUpsert {
	u.SetExcluded(swaps.FieldType)
	return u
}

// ClearType clears the value of the "type" field.
func (u *SwapsUpsert) ClearType() *SwapsUpsert {
	u.SetNull(swaps.FieldType)
	return u
}

// SetToAddress sets the "to_address" field.
func (u *SwapsUpsert) SetToAddress(v string) *SwapsUpsert {
	u.Set(swaps.FieldToAddress, v)
	return u
}

// UpdateToAddress sets the "to_address" field to the value that was provided on create.
func (u *SwapsUpsert) UpdateToAddress() *SwapsUpsert {
	u.SetExcluded(swaps.FieldToAddress)
	return u
}

// ClearToAddress clears the value of the "to_address" field.
func (u *SwapsUpsert) ClearToAddress() *SwapsUpsert {
	u.SetNull(swaps.FieldToAddress)
	return u
}

// SetFromCurrency sets the "from_currency" field.
func (u *SwapsUpsert) SetFromCurrency(v string) *SwapsUpsert {
	u.Set(swaps.FieldFromCurrency, v)
	return u
}

// UpdateFromCurrency sets the "from_currency" field to the value that was provided on create.
func (u *SwapsUpsert) UpdateFromCurrency() *SwapsUpsert {
	u.SetExcluded(swaps.FieldFromCurrency)
	return u
}

// ClearFromCurrency clears the value of the "from_currency" field.
func (u *SwapsUpsert) ClearFromCurrency() *SwapsUpsert {
	u.SetNull(swaps.FieldFromCurrency)
	return u
}

// SetToCurrency sets the "to_currency" field.
func (u *SwapsUpsert) SetToCurrency(v string) *SwapsUpsert {
	u.Set(swaps.FieldToCurrency, v)
	return u
}

// UpdateToCurrency sets the "to_currency" field to the value that was provided on create.
func (u *SwapsUpsert) UpdateToCurrency() *SwapsUpsert {
	u.SetExcluded(swaps.FieldToCurrency)
	return u
}

// ClearToCurrency clears the value of the "to_currency" field.
func (u *SwapsUpsert) ClearToCurrency() *SwapsUpsert {
	u.SetNull(swaps.FieldToCurrency)
	return u
}

// SetToNetwork sets the "to_network" field.
func (u *SwapsUpsert) SetToNetwork(v string) *SwapsUpsert {
	u.Set(swaps.FieldToNetwork, v)
	return u
}

// UpdateToNetwork sets the "to_network" field to the value that was provided on create.
func (u *SwapsUpsert) UpdateToNetwork() *SwapsUpsert {
	u.SetExcluded(swaps.FieldToNetwork)
	return u
}

// ClearToNetwork clears the value of the "to_network" field.
func (u *SwapsUpsert) ClearToNetwork() *SwapsUpsert {
	u.SetNull(swaps.FieldToNetwork)
	return u
}

// SetFromNetwork sets the "from_network" field.
func (u *SwapsUpsert) SetFromNetwork(v string) *SwapsUpsert {
	u.Set(swaps.FieldFromNetwork, v)
	return u
}

// UpdateFromNetwork sets the "from_network" field to the value that was provided on create.
func (u *SwapsUpsert) UpdateFromNetwork() *SwapsUpsert {
	u.SetExcluded(swaps.FieldFromNetwork)
	return u
}

// ClearFromNetwork clears the value of the "from_network" field.
func (u *SwapsUpsert) ClearFromNetwork() *SwapsUpsert {
	u.SetNull(swaps.FieldFromNetwork)
	return u
}

// SetAmount sets the "amount" field.
func (u *SwapsUpsert) SetAmount(v string) *SwapsUpsert {
	u.Set(swaps.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *SwapsUpsert) UpdateAmount() *SwapsUpsert {
	u.SetExcluded(swaps.FieldAmount)
	return u
}

// ClearAmount clears the value of the "amount" field.
func (u *SwapsUpsert) ClearAmount() *SwapsUpsert {
	u.SetNull(swaps.FieldAmount)
	return u
}

// SetAmountRecive sets the "amountRecive" field.
func (u *SwapsUpsert) SetAmountRecive(v string) *SwapsUpsert {
	u.Set(swaps.FieldAmountRecive, v)
	return u
}

// UpdateAmountRecive sets the "amountRecive" field to the value that was provided on create.
func (u *SwapsUpsert) UpdateAmountRecive() *SwapsUpsert {
	u.SetExcluded(swaps.FieldAmountRecive)
	return u
}

// ClearAmountRecive clears the value of the "amountRecive" field.
func (u *SwapsUpsert) ClearAmountRecive() *SwapsUpsert {
	u.SetNull(swaps.FieldAmountRecive)
	return u
}

// SetRefundAddress sets the "refund_address" field.
func (u *SwapsUpsert) SetRefundAddress(v string) *SwapsUpsert {
	u.Set(swaps.FieldRefundAddress, v)
	return u
}

// UpdateRefundAddress sets the "refund_address" field to the value that was provided on create.
func (u *SwapsUpsert) UpdateRefundAddress() *SwapsUpsert {
	u.SetExcluded(swaps.FieldRefundAddress)
	return u
}

// ClearRefundAddress clears the value of the "refund_address" field.
func (u *SwapsUpsert) ClearRefundAddress() *SwapsUpsert {
	u.SetNull(swaps.FieldRefundAddress)
	return u
}

// SetSwapID sets the "swap_id" field.
func (u *SwapsUpsert) SetSwapID(v string) *SwapsUpsert {
	u.Set(swaps.FieldSwapID, v)
	return u
}

// UpdateSwapID sets the "swap_id" field to the value that was provided on create.
func (u *SwapsUpsert) UpdateSwapID() *SwapsUpsert {
	u.SetExcluded(swaps.FieldSwapID)
	return u
}

// ClearSwapID clears the value of the "swap_id" field.
func (u *SwapsUpsert) ClearSwapID() *SwapsUpsert {
	u.SetNull(swaps.FieldSwapID)
	return u
}

// SetExtraID sets the "extra_id" field.
func (u *SwapsUpsert) SetExtraID(v string) *SwapsUpsert {
	u.Set(swaps.FieldExtraID, v)
	return u
}

// UpdateExtraID sets the "extra_id" field to the value that was provided on create.
func (u *SwapsUpsert) UpdateExtraID() *SwapsUpsert {
	u.SetExcluded(swaps.FieldExtraID)
	return u
}

// ClearExtraID clears the value of the "extra_id" field.
func (u *SwapsUpsert) ClearExtraID() *SwapsUpsert {
	u.SetNull(swaps.FieldExtraID)
	return u
}

// SetInvoiceID sets the "invoiceID" field.
func (u *SwapsUpsert) SetInvoiceID(v int64) *SwapsUpsert {
	u.Set(swaps.FieldInvoiceID, v)
	return u
}

// UpdateInvoiceID sets the "invoiceID" field to the value that was provided on create.
func (u *SwapsUpsert) UpdateInvoiceID() *SwapsUpsert {
	u.SetExcluded(swaps.FieldInvoiceID)
	return u
}

// AddInvoiceID adds v to the "invoiceID" field.
func (u *SwapsUpsert) AddInvoiceID(v int64) *SwapsUpsert {
	u.Add(swaps.FieldInvoiceID, v)
	return u
}

// ClearInvoiceID clears the value of the "invoiceID" field.
func (u *SwapsUpsert) ClearInvoiceID() *SwapsUpsert {
	u.SetNull(swaps.FieldInvoiceID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Swaps.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SwapsUpsertOne) UpdateNewValues() *SwapsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Swaps.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SwapsUpsertOne) Ignore() *SwapsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SwapsUpsertOne) DoNothing() *SwapsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SwapsCreate.OnConflict
// documentation for more info.
func (u *SwapsUpsertOne) Update(set func(*SwapsUpsert)) *SwapsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SwapsUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *SwapsUpsertOne) SetType(v string) *SwapsUpsertOne {
	return u.Update(func(s *SwapsUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *SwapsUpsertOne) UpdateType() *SwapsUpsertOne {
	return u.Update(func(s *SwapsUpsert) {
		s.UpdateType()
	})
}

// ClearType clears the value of the "type" field.
func (u *SwapsUpsertOne) ClearType() *SwapsUpsertOne {
	return u.Update(func(s *SwapsUpsert) {
		s.ClearType()
	})
}

// SetToAddress sets the "to_address" field.
func (u *SwapsUpsertOne) SetToAddress(v string) *SwapsUpsertOne {
	return u.Update(func(s *SwapsUpsert) {
		s.SetToAddress(v)
	})
}

// UpdateToAddress sets the "to_address" field to the value that was provided on create.
func (u *SwapsUpsertOne) UpdateToAddress() *SwapsUpsertOne {
	return u.Update(func(s *SwapsUpsert) {
		s.UpdateToAddress()
	})
}

// ClearToAddress clears the value of the "to_address" field.
func (u *SwapsUpsertOne) ClearToAddress() *SwapsUpsertOne {
	return u.Update(func(s *SwapsUpsert) {
		s.ClearToAddress()
	})
}

// SetFromCurrency sets the "from_currency" field.
func (u *SwapsUpsertOne) SetFromCurrency(v string) *SwapsUpsertOne {
	return u.Update(func(s *SwapsUpsert) {
		s.SetFromCurrency(v)
	})
}

// UpdateFromCurrency sets the "from_currency" field to the value that was provided on create.
func (u *SwapsUpsertOne) UpdateFromCurrency() *SwapsUpsertOne {
	return u.Update(func(s *SwapsUpsert) {
		s.UpdateFromCurrency()
	})
}

// ClearFromCurrency clears the value of the "from_currency" field.
func (u *SwapsUpsertOne) ClearFromCurrency() *SwapsUpsertOne {
	return u.Update(func(s *SwapsUpsert) {
		s.ClearFromCurrency()
	})
}

// SetToCurrency sets the "to_currency" field.
func (u *SwapsUpsertOne) SetToCurrency(v string) *SwapsUpsertOne {
	return u.Update(func(s *SwapsUpsert) {
		s.SetToCurrency(v)
	})
}

// UpdateToCurrency sets the "to_currency" field to the value that was provided on create.
func (u *SwapsUpsertOne) UpdateToCurrency() *SwapsUpsertOne {
	return u.Update(func(s *SwapsUpsert) {
		s.UpdateToCurrency()
	})
}

// ClearToCurrency clears the value of the "to_currency" field.
func (u *SwapsUpsertOne) ClearToCurrency() *SwapsUpsertOne {
	return u.Update(func(s *SwapsUpsert) {
		s.ClearToCurrency()
	})
}

// SetToNetwork sets the "to_network" field.
func (u *SwapsUpsertOne) SetToNetwork(v string) *SwapsUpsertOne {
	return u.Update(func(s *SwapsUpsert) {
		s.SetToNetwork(v)
	})
}

// UpdateToNetwork sets the "to_network" field to the value that was provided on create.
func (u *SwapsUpsertOne) UpdateToNetwork() *SwapsUpsertOne {
	return u.Update(func(s *SwapsUpsert) {
		s.UpdateToNetwork()
	})
}

// ClearToNetwork clears the value of the "to_network" field.
func (u *SwapsUpsertOne) ClearToNetwork() *SwapsUpsertOne {
	return u.Update(func(s *SwapsUpsert) {
		s.ClearToNetwork()
	})
}

// SetFromNetwork sets the "from_network" field.
func (u *SwapsUpsertOne) SetFromNetwork(v string) *SwapsUpsertOne {
	return u.Update(func(s *SwapsUpsert) {
		s.SetFromNetwork(v)
	})
}

// UpdateFromNetwork sets the "from_network" field to the value that was provided on create.
func (u *SwapsUpsertOne) UpdateFromNetwork() *SwapsUpsertOne {
	return u.Update(func(s *SwapsUpsert) {
		s.UpdateFromNetwork()
	})
}

// ClearFromNetwork clears the value of the "from_network" field.
func (u *SwapsUpsertOne) ClearFromNetwork() *SwapsUpsertOne {
	return u.Update(func(s *SwapsUpsert) {
		s.ClearFromNetwork()
	})
}

// SetAmount sets the "amount" field.
func (u *SwapsUpsertOne) SetAmount(v string) *SwapsUpsertOne {
	return u.Update(func(s *SwapsUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *SwapsUpsertOne) UpdateAmount() *SwapsUpsertOne {
	return u.Update(func(s *SwapsUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *SwapsUpsertOne) ClearAmount() *SwapsUpsertOne {
	return u.Update(func(s *SwapsUpsert) {
		s.ClearAmount()
	})
}

// SetAmountRecive sets the "amountRecive" field.
func (u *SwapsUpsertOne) SetAmountRecive(v string) *SwapsUpsertOne {
	return u.Update(func(s *SwapsUpsert) {
		s.SetAmountRecive(v)
	})
}

// UpdateAmountRecive sets the "amountRecive" field to the value that was provided on create.
func (u *SwapsUpsertOne) UpdateAmountRecive() *SwapsUpsertOne {
	return u.Update(func(s *SwapsUpsert) {
		s.UpdateAmountRecive()
	})
}

// ClearAmountRecive clears the value of the "amountRecive" field.
func (u *SwapsUpsertOne) ClearAmountRecive() *SwapsUpsertOne {
	return u.Update(func(s *SwapsUpsert) {
		s.ClearAmountRecive()
	})
}

// SetRefundAddress sets the "refund_address" field.
func (u *SwapsUpsertOne) SetRefundAddress(v string) *SwapsUpsertOne {
	return u.Update(func(s *SwapsUpsert) {
		s.SetRefundAddress(v)
	})
}

// UpdateRefundAddress sets the "refund_address" field to the value that was provided on create.
func (u *SwapsUpsertOne) UpdateRefundAddress() *SwapsUpsertOne {
	return u.Update(func(s *SwapsUpsert) {
		s.UpdateRefundAddress()
	})
}

// ClearRefundAddress clears the value of the "refund_address" field.
func (u *SwapsUpsertOne) ClearRefundAddress() *SwapsUpsertOne {
	return u.Update(func(s *SwapsUpsert) {
		s.ClearRefundAddress()
	})
}

// SetSwapID sets the "swap_id" field.
func (u *SwapsUpsertOne) SetSwapID(v string) *SwapsUpsertOne {
	return u.Update(func(s *SwapsUpsert) {
		s.SetSwapID(v)
	})
}

// UpdateSwapID sets the "swap_id" field to the value that was provided on create.
func (u *SwapsUpsertOne) UpdateSwapID() *SwapsUpsertOne {
	return u.Update(func(s *SwapsUpsert) {
		s.UpdateSwapID()
	})
}

// ClearSwapID clears the value of the "swap_id" field.
func (u *SwapsUpsertOne) ClearSwapID() *SwapsUpsertOne {
	return u.Update(func(s *SwapsUpsert) {
		s.ClearSwapID()
	})
}

// SetExtraID sets the "extra_id" field.
func (u *SwapsUpsertOne) SetExtraID(v string) *SwapsUpsertOne {
	return u.Update(func(s *SwapsUpsert) {
		s.SetExtraID(v)
	})
}

// UpdateExtraID sets the "extra_id" field to the value that was provided on create.
func (u *SwapsUpsertOne) UpdateExtraID() *SwapsUpsertOne {
	return u.Update(func(s *SwapsUpsert) {
		s.UpdateExtraID()
	})
}

// ClearExtraID clears the value of the "extra_id" field.
func (u *SwapsUpsertOne) ClearExtraID() *SwapsUpsertOne {
	return u.Update(func(s *SwapsUpsert) {
		s.ClearExtraID()
	})
}

// SetInvoiceID sets the "invoiceID" field.
func (u *SwapsUpsertOne) SetInvoiceID(v int64) *SwapsUpsertOne {
	return u.Update(func(s *SwapsUpsert) {
		s.SetInvoiceID(v)
	})
}

// AddInvoiceID adds v to the "invoiceID" field.
func (u *SwapsUpsertOne) AddInvoiceID(v int64) *SwapsUpsertOne {
	return u.Update(func(s *SwapsUpsert) {
		s.AddInvoiceID(v)
	})
}

// UpdateInvoiceID sets the "invoiceID" field to the value that was provided on create.
func (u *SwapsUpsertOne) UpdateInvoiceID() *SwapsUpsertOne {
	return u.Update(func(s *SwapsUpsert) {
		s.UpdateInvoiceID()
	})
}

// ClearInvoiceID clears the value of the "invoiceID" field.
func (u *SwapsUpsertOne) ClearInvoiceID() *SwapsUpsertOne {
	return u.Update(func(s *SwapsUpsert) {
		s.ClearInvoiceID()
	})
}

// Exec executes the query.
func (u *SwapsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SwapsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SwapsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SwapsUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SwapsUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SwapsCreateBulk is the builder for creating many Swaps entities in bulk.
type SwapsCreateBulk struct {
	config
	builders []*SwapsCreate
	conflict []sql.ConflictOption
}

// Save creates the Swaps entities in the database.
func (scb *SwapsCreateBulk) Save(ctx context.Context) ([]*Swaps, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Swaps, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SwapsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SwapsCreateBulk) SaveX(ctx context.Context) []*Swaps {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SwapsCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SwapsCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Swaps.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SwapsUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (scb *SwapsCreateBulk) OnConflict(opts ...sql.ConflictOption) *SwapsUpsertBulk {
	scb.conflict = opts
	return &SwapsUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Swaps.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *SwapsCreateBulk) OnConflictColumns(columns ...string) *SwapsUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SwapsUpsertBulk{
		create: scb,
	}
}

// SwapsUpsertBulk is the builder for "upsert"-ing
// a bulk of Swaps nodes.
type SwapsUpsertBulk struct {
	create *SwapsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Swaps.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SwapsUpsertBulk) UpdateNewValues() *SwapsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Swaps.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SwapsUpsertBulk) Ignore() *SwapsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SwapsUpsertBulk) DoNothing() *SwapsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SwapsCreateBulk.OnConflict
// documentation for more info.
func (u *SwapsUpsertBulk) Update(set func(*SwapsUpsert)) *SwapsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SwapsUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *SwapsUpsertBulk) SetType(v string) *SwapsUpsertBulk {
	return u.Update(func(s *SwapsUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *SwapsUpsertBulk) UpdateType() *SwapsUpsertBulk {
	return u.Update(func(s *SwapsUpsert) {
		s.UpdateType()
	})
}

// ClearType clears the value of the "type" field.
func (u *SwapsUpsertBulk) ClearType() *SwapsUpsertBulk {
	return u.Update(func(s *SwapsUpsert) {
		s.ClearType()
	})
}

// SetToAddress sets the "to_address" field.
func (u *SwapsUpsertBulk) SetToAddress(v string) *SwapsUpsertBulk {
	return u.Update(func(s *SwapsUpsert) {
		s.SetToAddress(v)
	})
}

// UpdateToAddress sets the "to_address" field to the value that was provided on create.
func (u *SwapsUpsertBulk) UpdateToAddress() *SwapsUpsertBulk {
	return u.Update(func(s *SwapsUpsert) {
		s.UpdateToAddress()
	})
}

// ClearToAddress clears the value of the "to_address" field.
func (u *SwapsUpsertBulk) ClearToAddress() *SwapsUpsertBulk {
	return u.Update(func(s *SwapsUpsert) {
		s.ClearToAddress()
	})
}

// SetFromCurrency sets the "from_currency" field.
func (u *SwapsUpsertBulk) SetFromCurrency(v string) *SwapsUpsertBulk {
	return u.Update(func(s *SwapsUpsert) {
		s.SetFromCurrency(v)
	})
}

// UpdateFromCurrency sets the "from_currency" field to the value that was provided on create.
func (u *SwapsUpsertBulk) UpdateFromCurrency() *SwapsUpsertBulk {
	return u.Update(func(s *SwapsUpsert) {
		s.UpdateFromCurrency()
	})
}

// ClearFromCurrency clears the value of the "from_currency" field.
func (u *SwapsUpsertBulk) ClearFromCurrency() *SwapsUpsertBulk {
	return u.Update(func(s *SwapsUpsert) {
		s.ClearFromCurrency()
	})
}

// SetToCurrency sets the "to_currency" field.
func (u *SwapsUpsertBulk) SetToCurrency(v string) *SwapsUpsertBulk {
	return u.Update(func(s *SwapsUpsert) {
		s.SetToCurrency(v)
	})
}

// UpdateToCurrency sets the "to_currency" field to the value that was provided on create.
func (u *SwapsUpsertBulk) UpdateToCurrency() *SwapsUpsertBulk {
	return u.Update(func(s *SwapsUpsert) {
		s.UpdateToCurrency()
	})
}

// ClearToCurrency clears the value of the "to_currency" field.
func (u *SwapsUpsertBulk) ClearToCurrency() *SwapsUpsertBulk {
	return u.Update(func(s *SwapsUpsert) {
		s.ClearToCurrency()
	})
}

// SetToNetwork sets the "to_network" field.
func (u *SwapsUpsertBulk) SetToNetwork(v string) *SwapsUpsertBulk {
	return u.Update(func(s *SwapsUpsert) {
		s.SetToNetwork(v)
	})
}

// UpdateToNetwork sets the "to_network" field to the value that was provided on create.
func (u *SwapsUpsertBulk) UpdateToNetwork() *SwapsUpsertBulk {
	return u.Update(func(s *SwapsUpsert) {
		s.UpdateToNetwork()
	})
}

// ClearToNetwork clears the value of the "to_network" field.
func (u *SwapsUpsertBulk) ClearToNetwork() *SwapsUpsertBulk {
	return u.Update(func(s *SwapsUpsert) {
		s.ClearToNetwork()
	})
}

// SetFromNetwork sets the "from_network" field.
func (u *SwapsUpsertBulk) SetFromNetwork(v string) *SwapsUpsertBulk {
	return u.Update(func(s *SwapsUpsert) {
		s.SetFromNetwork(v)
	})
}

// UpdateFromNetwork sets the "from_network" field to the value that was provided on create.
func (u *SwapsUpsertBulk) UpdateFromNetwork() *SwapsUpsertBulk {
	return u.Update(func(s *SwapsUpsert) {
		s.UpdateFromNetwork()
	})
}

// ClearFromNetwork clears the value of the "from_network" field.
func (u *SwapsUpsertBulk) ClearFromNetwork() *SwapsUpsertBulk {
	return u.Update(func(s *SwapsUpsert) {
		s.ClearFromNetwork()
	})
}

// SetAmount sets the "amount" field.
func (u *SwapsUpsertBulk) SetAmount(v string) *SwapsUpsertBulk {
	return u.Update(func(s *SwapsUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *SwapsUpsertBulk) UpdateAmount() *SwapsUpsertBulk {
	return u.Update(func(s *SwapsUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *SwapsUpsertBulk) ClearAmount() *SwapsUpsertBulk {
	return u.Update(func(s *SwapsUpsert) {
		s.ClearAmount()
	})
}

// SetAmountRecive sets the "amountRecive" field.
func (u *SwapsUpsertBulk) SetAmountRecive(v string) *SwapsUpsertBulk {
	return u.Update(func(s *SwapsUpsert) {
		s.SetAmountRecive(v)
	})
}

// UpdateAmountRecive sets the "amountRecive" field to the value that was provided on create.
func (u *SwapsUpsertBulk) UpdateAmountRecive() *SwapsUpsertBulk {
	return u.Update(func(s *SwapsUpsert) {
		s.UpdateAmountRecive()
	})
}

// ClearAmountRecive clears the value of the "amountRecive" field.
func (u *SwapsUpsertBulk) ClearAmountRecive() *SwapsUpsertBulk {
	return u.Update(func(s *SwapsUpsert) {
		s.ClearAmountRecive()
	})
}

// SetRefundAddress sets the "refund_address" field.
func (u *SwapsUpsertBulk) SetRefundAddress(v string) *SwapsUpsertBulk {
	return u.Update(func(s *SwapsUpsert) {
		s.SetRefundAddress(v)
	})
}

// UpdateRefundAddress sets the "refund_address" field to the value that was provided on create.
func (u *SwapsUpsertBulk) UpdateRefundAddress() *SwapsUpsertBulk {
	return u.Update(func(s *SwapsUpsert) {
		s.UpdateRefundAddress()
	})
}

// ClearRefundAddress clears the value of the "refund_address" field.
func (u *SwapsUpsertBulk) ClearRefundAddress() *SwapsUpsertBulk {
	return u.Update(func(s *SwapsUpsert) {
		s.ClearRefundAddress()
	})
}

// SetSwapID sets the "swap_id" field.
func (u *SwapsUpsertBulk) SetSwapID(v string) *SwapsUpsertBulk {
	return u.Update(func(s *SwapsUpsert) {
		s.SetSwapID(v)
	})
}

// UpdateSwapID sets the "swap_id" field to the value that was provided on create.
func (u *SwapsUpsertBulk) UpdateSwapID() *SwapsUpsertBulk {
	return u.Update(func(s *SwapsUpsert) {
		s.UpdateSwapID()
	})
}

// ClearSwapID clears the value of the "swap_id" field.
func (u *SwapsUpsertBulk) ClearSwapID() *SwapsUpsertBulk {
	return u.Update(func(s *SwapsUpsert) {
		s.ClearSwapID()
	})
}

// SetExtraID sets the "extra_id" field.
func (u *SwapsUpsertBulk) SetExtraID(v string) *SwapsUpsertBulk {
	return u.Update(func(s *SwapsUpsert) {
		s.SetExtraID(v)
	})
}

// UpdateExtraID sets the "extra_id" field to the value that was provided on create.
func (u *SwapsUpsertBulk) UpdateExtraID() *SwapsUpsertBulk {
	return u.Update(func(s *SwapsUpsert) {
		s.UpdateExtraID()
	})
}

// ClearExtraID clears the value of the "extra_id" field.
func (u *SwapsUpsertBulk) ClearExtraID() *SwapsUpsertBulk {
	return u.Update(func(s *SwapsUpsert) {
		s.ClearExtraID()
	})
}

// SetInvoiceID sets the "invoiceID" field.
func (u *SwapsUpsertBulk) SetInvoiceID(v int64) *SwapsUpsertBulk {
	return u.Update(func(s *SwapsUpsert) {
		s.SetInvoiceID(v)
	})
}

// AddInvoiceID adds v to the "invoiceID" field.
func (u *SwapsUpsertBulk) AddInvoiceID(v int64) *SwapsUpsertBulk {
	return u.Update(func(s *SwapsUpsert) {
		s.AddInvoiceID(v)
	})
}

// UpdateInvoiceID sets the "invoiceID" field to the value that was provided on create.
func (u *SwapsUpsertBulk) UpdateInvoiceID() *SwapsUpsertBulk {
	return u.Update(func(s *SwapsUpsert) {
		s.UpdateInvoiceID()
	})
}

// ClearInvoiceID clears the value of the "invoiceID" field.
func (u *SwapsUpsertBulk) ClearInvoiceID() *SwapsUpsertBulk {
	return u.Update(func(s *SwapsUpsert) {
		s.ClearInvoiceID()
	})
}

// Exec executes the query.
func (u *SwapsUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SwapsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SwapsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SwapsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
