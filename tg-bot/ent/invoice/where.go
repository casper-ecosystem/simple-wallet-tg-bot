// Code generated by ent, DO NOT EDIT.

package invoice

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldName, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldAddress, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldAmount, v))
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCurrency, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldComment, v))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldActive, v))
}

// Repeatability applies equality check predicate on the "repeatability" field. It's identical to RepeatabilityEQ.
func Repeatability(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldRepeatability, v))
}

// Paid applies equality check predicate on the "paid" field. It's identical to PaidEQ.
func Paid(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldPaid, v))
}

// Short applies equality check predicate on the "short" field. It's identical to ShortEQ.
func Short(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldShort, v))
}

// Memo applies equality check predicate on the "memo" field. It's identical to MemoEQ.
func Memo(v uint64) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldMemo, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldName, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressIsNil applies the IsNil predicate on the "address" field.
func AddressIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldAddress))
}

// AddressNotNil applies the NotNil predicate on the "address" field.
func AddressNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldAddress))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldAddress, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldAmount, v))
}

// AmountContains applies the Contains predicate on the "amount" field.
func AmountContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldAmount, v))
}

// AmountHasPrefix applies the HasPrefix predicate on the "amount" field.
func AmountHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldAmount, v))
}

// AmountHasSuffix applies the HasSuffix predicate on the "amount" field.
func AmountHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldAmount, v))
}

// AmountIsNil applies the IsNil predicate on the "amount" field.
func AmountIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldAmount))
}

// AmountNotNil applies the NotNil predicate on the "amount" field.
func AmountNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldAmount))
}

// AmountEqualFold applies the EqualFold predicate on the "amount" field.
func AmountEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldAmount, v))
}

// AmountContainsFold applies the ContainsFold predicate on the "amount" field.
func AmountContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldAmount, v))
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCurrency, v))
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldCurrency, v))
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldCurrency, vs...))
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldCurrency, vs...))
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldCurrency, v))
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldCurrency, v))
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldCurrency, v))
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldCurrency, v))
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldCurrency, v))
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldCurrency, v))
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldCurrency, v))
}

// CurrencyIsNil applies the IsNil predicate on the "currency" field.
func CurrencyIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldCurrency))
}

// CurrencyNotNil applies the NotNil predicate on the "currency" field.
func CurrencyNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldCurrency))
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldCurrency, v))
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldCurrency, v))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldComment, v))
}

// CommentIsNil applies the IsNil predicate on the "comment" field.
func CommentIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldComment))
}

// CommentNotNil applies the NotNil predicate on the "comment" field.
func CommentNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldComment))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldComment, v))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldActive, v))
}

// ActiveIsNil applies the IsNil predicate on the "active" field.
func ActiveIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldActive))
}

// ActiveNotNil applies the NotNil predicate on the "active" field.
func ActiveNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldActive))
}

// RepeatabilityEQ applies the EQ predicate on the "repeatability" field.
func RepeatabilityEQ(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldRepeatability, v))
}

// RepeatabilityNEQ applies the NEQ predicate on the "repeatability" field.
func RepeatabilityNEQ(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldRepeatability, v))
}

// RepeatabilityIn applies the In predicate on the "repeatability" field.
func RepeatabilityIn(vs ...int) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldRepeatability, vs...))
}

// RepeatabilityNotIn applies the NotIn predicate on the "repeatability" field.
func RepeatabilityNotIn(vs ...int) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldRepeatability, vs...))
}

// RepeatabilityGT applies the GT predicate on the "repeatability" field.
func RepeatabilityGT(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldRepeatability, v))
}

// RepeatabilityGTE applies the GTE predicate on the "repeatability" field.
func RepeatabilityGTE(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldRepeatability, v))
}

// RepeatabilityLT applies the LT predicate on the "repeatability" field.
func RepeatabilityLT(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldRepeatability, v))
}

// RepeatabilityLTE applies the LTE predicate on the "repeatability" field.
func RepeatabilityLTE(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldRepeatability, v))
}

// RepeatabilityIsNil applies the IsNil predicate on the "repeatability" field.
func RepeatabilityIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldRepeatability))
}

// RepeatabilityNotNil applies the NotNil predicate on the "repeatability" field.
func RepeatabilityNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldRepeatability))
}

// PaidEQ applies the EQ predicate on the "paid" field.
func PaidEQ(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldPaid, v))
}

// PaidNEQ applies the NEQ predicate on the "paid" field.
func PaidNEQ(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldPaid, v))
}

// PaidIn applies the In predicate on the "paid" field.
func PaidIn(vs ...int) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldPaid, vs...))
}

// PaidNotIn applies the NotIn predicate on the "paid" field.
func PaidNotIn(vs ...int) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldPaid, vs...))
}

// PaidGT applies the GT predicate on the "paid" field.
func PaidGT(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldPaid, v))
}

// PaidGTE applies the GTE predicate on the "paid" field.
func PaidGTE(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldPaid, v))
}

// PaidLT applies the LT predicate on the "paid" field.
func PaidLT(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldPaid, v))
}

// PaidLTE applies the LTE predicate on the "paid" field.
func PaidLTE(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldPaid, v))
}

// PaidIsNil applies the IsNil predicate on the "paid" field.
func PaidIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldPaid))
}

// PaidNotNil applies the NotNil predicate on the "paid" field.
func PaidNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldPaid))
}

// ShortEQ applies the EQ predicate on the "short" field.
func ShortEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldShort, v))
}

// ShortNEQ applies the NEQ predicate on the "short" field.
func ShortNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldShort, v))
}

// ShortIn applies the In predicate on the "short" field.
func ShortIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldShort, vs...))
}

// ShortNotIn applies the NotIn predicate on the "short" field.
func ShortNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldShort, vs...))
}

// ShortGT applies the GT predicate on the "short" field.
func ShortGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldShort, v))
}

// ShortGTE applies the GTE predicate on the "short" field.
func ShortGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldShort, v))
}

// ShortLT applies the LT predicate on the "short" field.
func ShortLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldShort, v))
}

// ShortLTE applies the LTE predicate on the "short" field.
func ShortLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldShort, v))
}

// ShortContains applies the Contains predicate on the "short" field.
func ShortContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldShort, v))
}

// ShortHasPrefix applies the HasPrefix predicate on the "short" field.
func ShortHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldShort, v))
}

// ShortHasSuffix applies the HasSuffix predicate on the "short" field.
func ShortHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldShort, v))
}

// ShortIsNil applies the IsNil predicate on the "short" field.
func ShortIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldShort))
}

// ShortNotNil applies the NotNil predicate on the "short" field.
func ShortNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldShort))
}

// ShortEqualFold applies the EqualFold predicate on the "short" field.
func ShortEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldShort, v))
}

// ShortContainsFold applies the ContainsFold predicate on the "short" field.
func ShortContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldShort, v))
}

// MemoEQ applies the EQ predicate on the "memo" field.
func MemoEQ(v uint64) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldMemo, v))
}

// MemoNEQ applies the NEQ predicate on the "memo" field.
func MemoNEQ(v uint64) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldMemo, v))
}

// MemoIn applies the In predicate on the "memo" field.
func MemoIn(vs ...uint64) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldMemo, vs...))
}

// MemoNotIn applies the NotIn predicate on the "memo" field.
func MemoNotIn(vs ...uint64) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldMemo, vs...))
}

// MemoGT applies the GT predicate on the "memo" field.
func MemoGT(v uint64) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldMemo, v))
}

// MemoGTE applies the GTE predicate on the "memo" field.
func MemoGTE(v uint64) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldMemo, v))
}

// MemoLT applies the LT predicate on the "memo" field.
func MemoLT(v uint64) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldMemo, v))
}

// MemoLTE applies the LTE predicate on the "memo" field.
func MemoLTE(v uint64) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldMemo, v))
}

// MemoIsNil applies the IsNil predicate on the "memo" field.
func MemoIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldMemo))
}

// MemoNotNil applies the NotNil predicate on the "memo" field.
func MemoNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldMemo))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPayments applies the HasEdge predicate on the "payments" edge.
func HasPayments() predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PaymentsTable, PaymentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPaymentsWith applies the HasEdge predicate on the "payments" edge with a given conditions (other predicates).
func HasPaymentsWith(preds ...predicate.Invoices_payments) predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		step := newPaymentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Invoice) predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Invoice) predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Invoice) predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		p(s.Not())
	})
}
