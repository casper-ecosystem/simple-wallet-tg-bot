// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/predicate"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/validators"
)

// ValidatorsUpdate is the builder for updating Validators entities.
type ValidatorsUpdate struct {
	config
	hooks    []Hook
	mutation *ValidatorsMutation
}

// Where appends a list predicates to the ValidatorsUpdate builder.
func (vu *ValidatorsUpdate) Where(ps ...predicate.Validators) *ValidatorsUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetAddress sets the "address" field.
func (vu *ValidatorsUpdate) SetAddress(s string) *ValidatorsUpdate {
	vu.mutation.SetAddress(s)
	return vu
}

// SetName sets the "name" field.
func (vu *ValidatorsUpdate) SetName(s string) *ValidatorsUpdate {
	vu.mutation.SetName(s)
	return vu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vu *ValidatorsUpdate) SetNillableName(s *string) *ValidatorsUpdate {
	if s != nil {
		vu.SetName(*s)
	}
	return vu
}

// ClearName clears the value of the "name" field.
func (vu *ValidatorsUpdate) ClearName() *ValidatorsUpdate {
	vu.mutation.ClearName()
	return vu
}

// SetFee sets the "fee" field.
func (vu *ValidatorsUpdate) SetFee(i int8) *ValidatorsUpdate {
	vu.mutation.ResetFee()
	vu.mutation.SetFee(i)
	return vu
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (vu *ValidatorsUpdate) SetNillableFee(i *int8) *ValidatorsUpdate {
	if i != nil {
		vu.SetFee(*i)
	}
	return vu
}

// AddFee adds i to the "fee" field.
func (vu *ValidatorsUpdate) AddFee(i int8) *ValidatorsUpdate {
	vu.mutation.AddFee(i)
	return vu
}

// ClearFee clears the value of the "fee" field.
func (vu *ValidatorsUpdate) ClearFee() *ValidatorsUpdate {
	vu.mutation.ClearFee()
	return vu
}

// SetDelegators sets the "delegators" field.
func (vu *ValidatorsUpdate) SetDelegators(i int64) *ValidatorsUpdate {
	vu.mutation.ResetDelegators()
	vu.mutation.SetDelegators(i)
	return vu
}

// SetNillableDelegators sets the "delegators" field if the given value is not nil.
func (vu *ValidatorsUpdate) SetNillableDelegators(i *int64) *ValidatorsUpdate {
	if i != nil {
		vu.SetDelegators(*i)
	}
	return vu
}

// AddDelegators adds i to the "delegators" field.
func (vu *ValidatorsUpdate) AddDelegators(i int64) *ValidatorsUpdate {
	vu.mutation.AddDelegators(i)
	return vu
}

// ClearDelegators clears the value of the "delegators" field.
func (vu *ValidatorsUpdate) ClearDelegators() *ValidatorsUpdate {
	vu.mutation.ClearDelegators()
	return vu
}

// SetActive sets the "active" field.
func (vu *ValidatorsUpdate) SetActive(b bool) *ValidatorsUpdate {
	vu.mutation.SetActive(b)
	return vu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (vu *ValidatorsUpdate) SetNillableActive(b *bool) *ValidatorsUpdate {
	if b != nil {
		vu.SetActive(*b)
	}
	return vu
}

// ClearActive clears the value of the "active" field.
func (vu *ValidatorsUpdate) ClearActive() *ValidatorsUpdate {
	vu.mutation.ClearActive()
	return vu
}

// Mutation returns the ValidatorsMutation object of the builder.
func (vu *ValidatorsUpdate) Mutation() *ValidatorsMutation {
	return vu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *ValidatorsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *ValidatorsUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *ValidatorsUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *ValidatorsUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vu *ValidatorsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(validators.Table, validators.Columns, sqlgraph.NewFieldSpec(validators.FieldID, field.TypeInt))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.Address(); ok {
		_spec.SetField(validators.FieldAddress, field.TypeString, value)
	}
	if value, ok := vu.mutation.Name(); ok {
		_spec.SetField(validators.FieldName, field.TypeString, value)
	}
	if vu.mutation.NameCleared() {
		_spec.ClearField(validators.FieldName, field.TypeString)
	}
	if value, ok := vu.mutation.Fee(); ok {
		_spec.SetField(validators.FieldFee, field.TypeInt8, value)
	}
	if value, ok := vu.mutation.AddedFee(); ok {
		_spec.AddField(validators.FieldFee, field.TypeInt8, value)
	}
	if vu.mutation.FeeCleared() {
		_spec.ClearField(validators.FieldFee, field.TypeInt8)
	}
	if value, ok := vu.mutation.Delegators(); ok {
		_spec.SetField(validators.FieldDelegators, field.TypeInt64, value)
	}
	if value, ok := vu.mutation.AddedDelegators(); ok {
		_spec.AddField(validators.FieldDelegators, field.TypeInt64, value)
	}
	if vu.mutation.DelegatorsCleared() {
		_spec.ClearField(validators.FieldDelegators, field.TypeInt64)
	}
	if value, ok := vu.mutation.Active(); ok {
		_spec.SetField(validators.FieldActive, field.TypeBool, value)
	}
	if vu.mutation.ActiveCleared() {
		_spec.ClearField(validators.FieldActive, field.TypeBool)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{validators.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// ValidatorsUpdateOne is the builder for updating a single Validators entity.
type ValidatorsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ValidatorsMutation
}

// SetAddress sets the "address" field.
func (vuo *ValidatorsUpdateOne) SetAddress(s string) *ValidatorsUpdateOne {
	vuo.mutation.SetAddress(s)
	return vuo
}

// SetName sets the "name" field.
func (vuo *ValidatorsUpdateOne) SetName(s string) *ValidatorsUpdateOne {
	vuo.mutation.SetName(s)
	return vuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vuo *ValidatorsUpdateOne) SetNillableName(s *string) *ValidatorsUpdateOne {
	if s != nil {
		vuo.SetName(*s)
	}
	return vuo
}

// ClearName clears the value of the "name" field.
func (vuo *ValidatorsUpdateOne) ClearName() *ValidatorsUpdateOne {
	vuo.mutation.ClearName()
	return vuo
}

// SetFee sets the "fee" field.
func (vuo *ValidatorsUpdateOne) SetFee(i int8) *ValidatorsUpdateOne {
	vuo.mutation.ResetFee()
	vuo.mutation.SetFee(i)
	return vuo
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (vuo *ValidatorsUpdateOne) SetNillableFee(i *int8) *ValidatorsUpdateOne {
	if i != nil {
		vuo.SetFee(*i)
	}
	return vuo
}

// AddFee adds i to the "fee" field.
func (vuo *ValidatorsUpdateOne) AddFee(i int8) *ValidatorsUpdateOne {
	vuo.mutation.AddFee(i)
	return vuo
}

// ClearFee clears the value of the "fee" field.
func (vuo *ValidatorsUpdateOne) ClearFee() *ValidatorsUpdateOne {
	vuo.mutation.ClearFee()
	return vuo
}

// SetDelegators sets the "delegators" field.
func (vuo *ValidatorsUpdateOne) SetDelegators(i int64) *ValidatorsUpdateOne {
	vuo.mutation.ResetDelegators()
	vuo.mutation.SetDelegators(i)
	return vuo
}

// SetNillableDelegators sets the "delegators" field if the given value is not nil.
func (vuo *ValidatorsUpdateOne) SetNillableDelegators(i *int64) *ValidatorsUpdateOne {
	if i != nil {
		vuo.SetDelegators(*i)
	}
	return vuo
}

// AddDelegators adds i to the "delegators" field.
func (vuo *ValidatorsUpdateOne) AddDelegators(i int64) *ValidatorsUpdateOne {
	vuo.mutation.AddDelegators(i)
	return vuo
}

// ClearDelegators clears the value of the "delegators" field.
func (vuo *ValidatorsUpdateOne) ClearDelegators() *ValidatorsUpdateOne {
	vuo.mutation.ClearDelegators()
	return vuo
}

// SetActive sets the "active" field.
func (vuo *ValidatorsUpdateOne) SetActive(b bool) *ValidatorsUpdateOne {
	vuo.mutation.SetActive(b)
	return vuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (vuo *ValidatorsUpdateOne) SetNillableActive(b *bool) *ValidatorsUpdateOne {
	if b != nil {
		vuo.SetActive(*b)
	}
	return vuo
}

// ClearActive clears the value of the "active" field.
func (vuo *ValidatorsUpdateOne) ClearActive() *ValidatorsUpdateOne {
	vuo.mutation.ClearActive()
	return vuo
}

// Mutation returns the ValidatorsMutation object of the builder.
func (vuo *ValidatorsUpdateOne) Mutation() *ValidatorsMutation {
	return vuo.mutation
}

// Where appends a list predicates to the ValidatorsUpdate builder.
func (vuo *ValidatorsUpdateOne) Where(ps ...predicate.Validators) *ValidatorsUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *ValidatorsUpdateOne) Select(field string, fields ...string) *ValidatorsUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Validators entity.
func (vuo *ValidatorsUpdateOne) Save(ctx context.Context) (*Validators, error) {
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *ValidatorsUpdateOne) SaveX(ctx context.Context) *Validators {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *ValidatorsUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *ValidatorsUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vuo *ValidatorsUpdateOne) sqlSave(ctx context.Context) (_node *Validators, err error) {
	_spec := sqlgraph.NewUpdateSpec(validators.Table, validators.Columns, sqlgraph.NewFieldSpec(validators.FieldID, field.TypeInt))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Validators.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, validators.FieldID)
		for _, f := range fields {
			if !validators.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != validators.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.Address(); ok {
		_spec.SetField(validators.FieldAddress, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Name(); ok {
		_spec.SetField(validators.FieldName, field.TypeString, value)
	}
	if vuo.mutation.NameCleared() {
		_spec.ClearField(validators.FieldName, field.TypeString)
	}
	if value, ok := vuo.mutation.Fee(); ok {
		_spec.SetField(validators.FieldFee, field.TypeInt8, value)
	}
	if value, ok := vuo.mutation.AddedFee(); ok {
		_spec.AddField(validators.FieldFee, field.TypeInt8, value)
	}
	if vuo.mutation.FeeCleared() {
		_spec.ClearField(validators.FieldFee, field.TypeInt8)
	}
	if value, ok := vuo.mutation.Delegators(); ok {
		_spec.SetField(validators.FieldDelegators, field.TypeInt64, value)
	}
	if value, ok := vuo.mutation.AddedDelegators(); ok {
		_spec.AddField(validators.FieldDelegators, field.TypeInt64, value)
	}
	if vuo.mutation.DelegatorsCleared() {
		_spec.ClearField(validators.FieldDelegators, field.TypeInt64)
	}
	if value, ok := vuo.mutation.Active(); ok {
		_spec.SetField(validators.FieldActive, field.TypeBool, value)
	}
	if vuo.mutation.ActiveCleared() {
		_spec.ClearField(validators.FieldActive, field.TypeBool)
	}
	_node = &Validators{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{validators.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
