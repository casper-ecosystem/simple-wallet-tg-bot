// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Simplewallethq/tg-bot/ent/balances"
	"github.com/Simplewallethq/tg-bot/ent/privatekeys"
	"github.com/Simplewallethq/tg-bot/ent/user"
	"github.com/Simplewallethq/tg-bot/ent/userstate"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// PublicKey holds the value of the "public_key" field.
	PublicKey string `json:"public_key,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// LoggedIn holds the value of the "logged_in" field.
	LoggedIn bool `json:"logged_in,omitempty"`
	// LastAccess holds the value of the "last_access" field.
	LastAccess time.Time `json:"last_access,omitempty"`
	// LockTimeout holds the value of the "lock_timeout" field.
	LockTimeout int64 `json:"lock_timeout,omitempty"`
	// LockedManual holds the value of the "locked_manual" field.
	LockedManual bool `json:"locked_manual,omitempty"`
	// Notify holds the value of the "notify" field.
	Notify bool `json:"notify,omitempty"`
	// NotifyTime holds the value of the "notify_time" field.
	NotifyTime int8 `json:"notify_time,omitempty"`
	// NotifyLastTime holds the value of the "notify_last_time" field.
	NotifyLastTime time.Time `json:"notify_last_time,omitempty"`
	// StorePrivatKey holds the value of the "store_privat_key" field.
	StorePrivatKey bool `json:"store_privat_key,omitempty"`
	// EnableLogging holds the value of the "enable_logging" field.
	EnableLogging bool `json:"enable_logging,omitempty"`
	// Registered holds the value of the "registered" field.
	Registered bool `json:"registered,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Balance holds the value of the balance edge.
	Balance *Balances `json:"balance,omitempty"`
	// AddressBook holds the value of the address_book edge.
	AddressBook []*AdressBook `json:"address_book,omitempty"`
	// State holds the value of the state edge.
	State *UserState `json:"state,omitempty"`
	// RewardsData holds the value of the rewards_data edge.
	RewardsData []*RewardsData `json:"rewards_data,omitempty"`
	// PrivateKey holds the value of the PrivateKey edge.
	PrivateKey *PrivateKeys `json:"PrivateKey,omitempty"`
	// Transfers holds the value of the transfers edge.
	Transfers []*Transfers `json:"transfers,omitempty"`
	// Delegates holds the value of the delegates edge.
	Delegates []*Delegates `json:"delegates,omitempty"`
	// Undelegates holds the value of the undelegates edge.
	Undelegates []*Undelegates `json:"undelegates,omitempty"`
	// Swaps holds the value of the swaps edge.
	Swaps []*Swaps `json:"swaps,omitempty"`
	// Invoices holds the value of the invoices edge.
	Invoices []*Invoice `json:"invoices,omitempty"`
	// RecentInvoices holds the value of the recentInvoices edge.
	RecentInvoices []*RecentInvoices `json:"recentInvoices,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [11]bool
}

// BalanceOrErr returns the Balance value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) BalanceOrErr() (*Balances, error) {
	if e.loadedTypes[0] {
		if e.Balance == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: balances.Label}
		}
		return e.Balance, nil
	}
	return nil, &NotLoadedError{edge: "balance"}
}

// AddressBookOrErr returns the AddressBook value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AddressBookOrErr() ([]*AdressBook, error) {
	if e.loadedTypes[1] {
		return e.AddressBook, nil
	}
	return nil, &NotLoadedError{edge: "address_book"}
}

// StateOrErr returns the State value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) StateOrErr() (*UserState, error) {
	if e.loadedTypes[2] {
		if e.State == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: userstate.Label}
		}
		return e.State, nil
	}
	return nil, &NotLoadedError{edge: "state"}
}

// RewardsDataOrErr returns the RewardsData value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) RewardsDataOrErr() ([]*RewardsData, error) {
	if e.loadedTypes[3] {
		return e.RewardsData, nil
	}
	return nil, &NotLoadedError{edge: "rewards_data"}
}

// PrivateKeyOrErr returns the PrivateKey value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) PrivateKeyOrErr() (*PrivateKeys, error) {
	if e.loadedTypes[4] {
		if e.PrivateKey == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: privatekeys.Label}
		}
		return e.PrivateKey, nil
	}
	return nil, &NotLoadedError{edge: "PrivateKey"}
}

// TransfersOrErr returns the Transfers value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) TransfersOrErr() ([]*Transfers, error) {
	if e.loadedTypes[5] {
		return e.Transfers, nil
	}
	return nil, &NotLoadedError{edge: "transfers"}
}

// DelegatesOrErr returns the Delegates value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) DelegatesOrErr() ([]*Delegates, error) {
	if e.loadedTypes[6] {
		return e.Delegates, nil
	}
	return nil, &NotLoadedError{edge: "delegates"}
}

// UndelegatesOrErr returns the Undelegates value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UndelegatesOrErr() ([]*Undelegates, error) {
	if e.loadedTypes[7] {
		return e.Undelegates, nil
	}
	return nil, &NotLoadedError{edge: "undelegates"}
}

// SwapsOrErr returns the Swaps value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SwapsOrErr() ([]*Swaps, error) {
	if e.loadedTypes[8] {
		return e.Swaps, nil
	}
	return nil, &NotLoadedError{edge: "swaps"}
}

// InvoicesOrErr returns the Invoices value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) InvoicesOrErr() ([]*Invoice, error) {
	if e.loadedTypes[9] {
		return e.Invoices, nil
	}
	return nil, &NotLoadedError{edge: "invoices"}
}

// RecentInvoicesOrErr returns the RecentInvoices value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) RecentInvoicesOrErr() ([]*RecentInvoices, error) {
	if e.loadedTypes[10] {
		return e.RecentInvoices, nil
	}
	return nil, &NotLoadedError{edge: "recentInvoices"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldLoggedIn, user.FieldLockedManual, user.FieldNotify, user.FieldStorePrivatKey, user.FieldEnableLogging, user.FieldRegistered:
			values[i] = new(sql.NullBool)
		case user.FieldID, user.FieldLockTimeout, user.FieldNotifyTime:
			values[i] = new(sql.NullInt64)
		case user.FieldPublicKey, user.FieldPassword:
			values[i] = new(sql.NullString)
		case user.FieldLastAccess, user.FieldNotifyLastTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int64(value.Int64)
		case user.FieldPublicKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field public_key", values[i])
			} else if value.Valid {
				u.PublicKey = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		case user.FieldLoggedIn:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field logged_in", values[i])
			} else if value.Valid {
				u.LoggedIn = value.Bool
			}
		case user.FieldLastAccess:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_access", values[i])
			} else if value.Valid {
				u.LastAccess = value.Time
			}
		case user.FieldLockTimeout:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lock_timeout", values[i])
			} else if value.Valid {
				u.LockTimeout = value.Int64
			}
		case user.FieldLockedManual:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field locked_manual", values[i])
			} else if value.Valid {
				u.LockedManual = value.Bool
			}
		case user.FieldNotify:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field notify", values[i])
			} else if value.Valid {
				u.Notify = value.Bool
			}
		case user.FieldNotifyTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field notify_time", values[i])
			} else if value.Valid {
				u.NotifyTime = int8(value.Int64)
			}
		case user.FieldNotifyLastTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field notify_last_time", values[i])
			} else if value.Valid {
				u.NotifyLastTime = value.Time
			}
		case user.FieldStorePrivatKey:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field store_privat_key", values[i])
			} else if value.Valid {
				u.StorePrivatKey = value.Bool
			}
		case user.FieldEnableLogging:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enable_logging", values[i])
			} else if value.Valid {
				u.EnableLogging = value.Bool
			}
		case user.FieldRegistered:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field registered", values[i])
			} else if value.Valid {
				u.Registered = value.Bool
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryBalance queries the "balance" edge of the User entity.
func (u *User) QueryBalance() *BalancesQuery {
	return NewUserClient(u.config).QueryBalance(u)
}

// QueryAddressBook queries the "address_book" edge of the User entity.
func (u *User) QueryAddressBook() *AdressBookQuery {
	return NewUserClient(u.config).QueryAddressBook(u)
}

// QueryState queries the "state" edge of the User entity.
func (u *User) QueryState() *UserStateQuery {
	return NewUserClient(u.config).QueryState(u)
}

// QueryRewardsData queries the "rewards_data" edge of the User entity.
func (u *User) QueryRewardsData() *RewardsDataQuery {
	return NewUserClient(u.config).QueryRewardsData(u)
}

// QueryPrivateKey queries the "PrivateKey" edge of the User entity.
func (u *User) QueryPrivateKey() *PrivateKeysQuery {
	return NewUserClient(u.config).QueryPrivateKey(u)
}

// QueryTransfers queries the "transfers" edge of the User entity.
func (u *User) QueryTransfers() *TransfersQuery {
	return NewUserClient(u.config).QueryTransfers(u)
}

// QueryDelegates queries the "delegates" edge of the User entity.
func (u *User) QueryDelegates() *DelegatesQuery {
	return NewUserClient(u.config).QueryDelegates(u)
}

// QueryUndelegates queries the "undelegates" edge of the User entity.
func (u *User) QueryUndelegates() *UndelegatesQuery {
	return NewUserClient(u.config).QueryUndelegates(u)
}

// QuerySwaps queries the "swaps" edge of the User entity.
func (u *User) QuerySwaps() *SwapsQuery {
	return NewUserClient(u.config).QuerySwaps(u)
}

// QueryInvoices queries the "invoices" edge of the User entity.
func (u *User) QueryInvoices() *InvoiceQuery {
	return NewUserClient(u.config).QueryInvoices(u)
}

// QueryRecentInvoices queries the "recentInvoices" edge of the User entity.
func (u *User) QueryRecentInvoices() *RecentInvoicesQuery {
	return NewUserClient(u.config).QueryRecentInvoices(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("public_key=")
	builder.WriteString(u.PublicKey)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(u.Password)
	builder.WriteString(", ")
	builder.WriteString("logged_in=")
	builder.WriteString(fmt.Sprintf("%v", u.LoggedIn))
	builder.WriteString(", ")
	builder.WriteString("last_access=")
	builder.WriteString(u.LastAccess.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("lock_timeout=")
	builder.WriteString(fmt.Sprintf("%v", u.LockTimeout))
	builder.WriteString(", ")
	builder.WriteString("locked_manual=")
	builder.WriteString(fmt.Sprintf("%v", u.LockedManual))
	builder.WriteString(", ")
	builder.WriteString("notify=")
	builder.WriteString(fmt.Sprintf("%v", u.Notify))
	builder.WriteString(", ")
	builder.WriteString("notify_time=")
	builder.WriteString(fmt.Sprintf("%v", u.NotifyTime))
	builder.WriteString(", ")
	builder.WriteString("notify_last_time=")
	builder.WriteString(u.NotifyLastTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("store_privat_key=")
	builder.WriteString(fmt.Sprintf("%v", u.StorePrivatKey))
	builder.WriteString(", ")
	builder.WriteString("enable_logging=")
	builder.WriteString(fmt.Sprintf("%v", u.EnableLogging))
	builder.WriteString(", ")
	builder.WriteString("registered=")
	builder.WriteString(fmt.Sprintf("%v", u.Registered))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
