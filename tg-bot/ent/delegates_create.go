// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Simplewallethq/tg-bot/ent/delegates"
	"github.com/Simplewallethq/tg-bot/ent/user"
)

// DelegatesCreate is the builder for creating a Delegates entity.
type DelegatesCreate struct {
	config
	mutation *DelegatesMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDelegator sets the "delegator" field.
func (dc *DelegatesCreate) SetDelegator(s string) *DelegatesCreate {
	dc.mutation.SetDelegator(s)
	return dc
}

// SetValidator sets the "validator" field.
func (dc *DelegatesCreate) SetValidator(s string) *DelegatesCreate {
	dc.mutation.SetValidator(s)
	return dc
}

// SetNillableValidator sets the "validator" field if the given value is not nil.
func (dc *DelegatesCreate) SetNillableValidator(s *string) *DelegatesCreate {
	if s != nil {
		dc.SetValidator(*s)
	}
	return dc
}

// SetName sets the "name" field.
func (dc *DelegatesCreate) SetName(s string) *DelegatesCreate {
	dc.mutation.SetName(s)
	return dc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (dc *DelegatesCreate) SetNillableName(s *string) *DelegatesCreate {
	if s != nil {
		dc.SetName(*s)
	}
	return dc
}

// SetUserBalance sets the "user_balance" field.
func (dc *DelegatesCreate) SetUserBalance(s string) *DelegatesCreate {
	dc.mutation.SetUserBalance(s)
	return dc
}

// SetNillableUserBalance sets the "user_balance" field if the given value is not nil.
func (dc *DelegatesCreate) SetNillableUserBalance(s *string) *DelegatesCreate {
	if s != nil {
		dc.SetUserBalance(*s)
	}
	return dc
}

// SetAmount sets the "amount" field.
func (dc *DelegatesCreate) SetAmount(s string) *DelegatesCreate {
	dc.mutation.SetAmount(s)
	return dc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (dc *DelegatesCreate) SetNillableAmount(s *string) *DelegatesCreate {
	if s != nil {
		dc.SetAmount(*s)
	}
	return dc
}

// SetCreatedAt sets the "created_at" field.
func (dc *DelegatesCreate) SetCreatedAt(t time.Time) *DelegatesCreate {
	dc.mutation.SetCreatedAt(t)
	return dc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dc *DelegatesCreate) SetNillableCreatedAt(t *time.Time) *DelegatesCreate {
	if t != nil {
		dc.SetCreatedAt(*t)
	}
	return dc
}

// SetStatus sets the "status" field.
func (dc *DelegatesCreate) SetStatus(s string) *DelegatesCreate {
	dc.mutation.SetStatus(s)
	return dc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dc *DelegatesCreate) SetNillableStatus(s *string) *DelegatesCreate {
	if s != nil {
		dc.SetStatus(*s)
	}
	return dc
}

// SetDeploy sets the "Deploy" field.
func (dc *DelegatesCreate) SetDeploy(s string) *DelegatesCreate {
	dc.mutation.SetDeploy(s)
	return dc
}

// SetNillableDeploy sets the "Deploy" field if the given value is not nil.
func (dc *DelegatesCreate) SetNillableDeploy(s *string) *DelegatesCreate {
	if s != nil {
		dc.SetDeploy(*s)
	}
	return dc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (dc *DelegatesCreate) SetOwnerID(id int64) *DelegatesCreate {
	dc.mutation.SetOwnerID(id)
	return dc
}

// SetOwner sets the "owner" edge to the User entity.
func (dc *DelegatesCreate) SetOwner(u *User) *DelegatesCreate {
	return dc.SetOwnerID(u.ID)
}

// Mutation returns the DelegatesMutation object of the builder.
func (dc *DelegatesCreate) Mutation() *DelegatesMutation {
	return dc.mutation
}

// Save creates the Delegates in the database.
func (dc *DelegatesCreate) Save(ctx context.Context) (*Delegates, error) {
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DelegatesCreate) SaveX(ctx context.Context) *Delegates {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DelegatesCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DelegatesCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DelegatesCreate) check() error {
	if _, ok := dc.mutation.Delegator(); !ok {
		return &ValidationError{Name: "delegator", err: errors.New(`ent: missing required field "Delegates.delegator"`)}
	}
	if _, ok := dc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "Delegates.owner"`)}
	}
	return nil
}

func (dc *DelegatesCreate) sqlSave(ctx context.Context) (*Delegates, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DelegatesCreate) createSpec() (*Delegates, *sqlgraph.CreateSpec) {
	var (
		_node = &Delegates{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(delegates.Table, sqlgraph.NewFieldSpec(delegates.FieldID, field.TypeInt))
	)
	_spec.OnConflict = dc.conflict
	if value, ok := dc.mutation.Delegator(); ok {
		_spec.SetField(delegates.FieldDelegator, field.TypeString, value)
		_node.Delegator = value
	}
	if value, ok := dc.mutation.Validator(); ok {
		_spec.SetField(delegates.FieldValidator, field.TypeString, value)
		_node.Validator = value
	}
	if value, ok := dc.mutation.Name(); ok {
		_spec.SetField(delegates.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := dc.mutation.UserBalance(); ok {
		_spec.SetField(delegates.FieldUserBalance, field.TypeString, value)
		_node.UserBalance = value
	}
	if value, ok := dc.mutation.Amount(); ok {
		_spec.SetField(delegates.FieldAmount, field.TypeString, value)
		_node.Amount = value
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.SetField(delegates.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dc.mutation.Status(); ok {
		_spec.SetField(delegates.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := dc.mutation.Deploy(); ok {
		_spec.SetField(delegates.FieldDeploy, field.TypeString, value)
		_node.Deploy = value
	}
	if nodes := dc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   delegates.OwnerTable,
			Columns: []string{delegates.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_delegates = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Delegates.Create().
//		SetDelegator(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DelegatesUpsert) {
//			SetDelegator(v+v).
//		}).
//		Exec(ctx)
func (dc *DelegatesCreate) OnConflict(opts ...sql.ConflictOption) *DelegatesUpsertOne {
	dc.conflict = opts
	return &DelegatesUpsertOne{
		create: dc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Delegates.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dc *DelegatesCreate) OnConflictColumns(columns ...string) *DelegatesUpsertOne {
	dc.conflict = append(dc.conflict, sql.ConflictColumns(columns...))
	return &DelegatesUpsertOne{
		create: dc,
	}
}

type (
	// DelegatesUpsertOne is the builder for "upsert"-ing
	//  one Delegates node.
	DelegatesUpsertOne struct {
		create *DelegatesCreate
	}

	// DelegatesUpsert is the "OnConflict" setter.
	DelegatesUpsert struct {
		*sql.UpdateSet
	}
)

// SetDelegator sets the "delegator" field.
func (u *DelegatesUpsert) SetDelegator(v string) *DelegatesUpsert {
	u.Set(delegates.FieldDelegator, v)
	return u
}

// UpdateDelegator sets the "delegator" field to the value that was provided on create.
func (u *DelegatesUpsert) UpdateDelegator() *DelegatesUpsert {
	u.SetExcluded(delegates.FieldDelegator)
	return u
}

// SetValidator sets the "validator" field.
func (u *DelegatesUpsert) SetValidator(v string) *DelegatesUpsert {
	u.Set(delegates.FieldValidator, v)
	return u
}

// UpdateValidator sets the "validator" field to the value that was provided on create.
func (u *DelegatesUpsert) UpdateValidator() *DelegatesUpsert {
	u.SetExcluded(delegates.FieldValidator)
	return u
}

// ClearValidator clears the value of the "validator" field.
func (u *DelegatesUpsert) ClearValidator() *DelegatesUpsert {
	u.SetNull(delegates.FieldValidator)
	return u
}

// SetName sets the "name" field.
func (u *DelegatesUpsert) SetName(v string) *DelegatesUpsert {
	u.Set(delegates.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DelegatesUpsert) UpdateName() *DelegatesUpsert {
	u.SetExcluded(delegates.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *DelegatesUpsert) ClearName() *DelegatesUpsert {
	u.SetNull(delegates.FieldName)
	return u
}

// SetUserBalance sets the "user_balance" field.
func (u *DelegatesUpsert) SetUserBalance(v string) *DelegatesUpsert {
	u.Set(delegates.FieldUserBalance, v)
	return u
}

// UpdateUserBalance sets the "user_balance" field to the value that was provided on create.
func (u *DelegatesUpsert) UpdateUserBalance() *DelegatesUpsert {
	u.SetExcluded(delegates.FieldUserBalance)
	return u
}

// ClearUserBalance clears the value of the "user_balance" field.
func (u *DelegatesUpsert) ClearUserBalance() *DelegatesUpsert {
	u.SetNull(delegates.FieldUserBalance)
	return u
}

// SetAmount sets the "amount" field.
func (u *DelegatesUpsert) SetAmount(v string) *DelegatesUpsert {
	u.Set(delegates.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *DelegatesUpsert) UpdateAmount() *DelegatesUpsert {
	u.SetExcluded(delegates.FieldAmount)
	return u
}

// ClearAmount clears the value of the "amount" field.
func (u *DelegatesUpsert) ClearAmount() *DelegatesUpsert {
	u.SetNull(delegates.FieldAmount)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *DelegatesUpsert) SetCreatedAt(v time.Time) *DelegatesUpsert {
	u.Set(delegates.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DelegatesUpsert) UpdateCreatedAt() *DelegatesUpsert {
	u.SetExcluded(delegates.FieldCreatedAt)
	return u
}

// ClearCreatedAt clears the value of the "created_at" field.
func (u *DelegatesUpsert) ClearCreatedAt() *DelegatesUpsert {
	u.SetNull(delegates.FieldCreatedAt)
	return u
}

// SetStatus sets the "status" field.
func (u *DelegatesUpsert) SetStatus(v string) *DelegatesUpsert {
	u.Set(delegates.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *DelegatesUpsert) UpdateStatus() *DelegatesUpsert {
	u.SetExcluded(delegates.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *DelegatesUpsert) ClearStatus() *DelegatesUpsert {
	u.SetNull(delegates.FieldStatus)
	return u
}

// SetDeploy sets the "Deploy" field.
func (u *DelegatesUpsert) SetDeploy(v string) *DelegatesUpsert {
	u.Set(delegates.FieldDeploy, v)
	return u
}

// UpdateDeploy sets the "Deploy" field to the value that was provided on create.
func (u *DelegatesUpsert) UpdateDeploy() *DelegatesUpsert {
	u.SetExcluded(delegates.FieldDeploy)
	return u
}

// ClearDeploy clears the value of the "Deploy" field.
func (u *DelegatesUpsert) ClearDeploy() *DelegatesUpsert {
	u.SetNull(delegates.FieldDeploy)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Delegates.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *DelegatesUpsertOne) UpdateNewValues() *DelegatesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Delegates.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DelegatesUpsertOne) Ignore() *DelegatesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DelegatesUpsertOne) DoNothing() *DelegatesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DelegatesCreate.OnConflict
// documentation for more info.
func (u *DelegatesUpsertOne) Update(set func(*DelegatesUpsert)) *DelegatesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DelegatesUpsert{UpdateSet: update})
	}))
	return u
}

// SetDelegator sets the "delegator" field.
func (u *DelegatesUpsertOne) SetDelegator(v string) *DelegatesUpsertOne {
	return u.Update(func(s *DelegatesUpsert) {
		s.SetDelegator(v)
	})
}

// UpdateDelegator sets the "delegator" field to the value that was provided on create.
func (u *DelegatesUpsertOne) UpdateDelegator() *DelegatesUpsertOne {
	return u.Update(func(s *DelegatesUpsert) {
		s.UpdateDelegator()
	})
}

// SetValidator sets the "validator" field.
func (u *DelegatesUpsertOne) SetValidator(v string) *DelegatesUpsertOne {
	return u.Update(func(s *DelegatesUpsert) {
		s.SetValidator(v)
	})
}

// UpdateValidator sets the "validator" field to the value that was provided on create.
func (u *DelegatesUpsertOne) UpdateValidator() *DelegatesUpsertOne {
	return u.Update(func(s *DelegatesUpsert) {
		s.UpdateValidator()
	})
}

// ClearValidator clears the value of the "validator" field.
func (u *DelegatesUpsertOne) ClearValidator() *DelegatesUpsertOne {
	return u.Update(func(s *DelegatesUpsert) {
		s.ClearValidator()
	})
}

// SetName sets the "name" field.
func (u *DelegatesUpsertOne) SetName(v string) *DelegatesUpsertOne {
	return u.Update(func(s *DelegatesUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DelegatesUpsertOne) UpdateName() *DelegatesUpsertOne {
	return u.Update(func(s *DelegatesUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *DelegatesUpsertOne) ClearName() *DelegatesUpsertOne {
	return u.Update(func(s *DelegatesUpsert) {
		s.ClearName()
	})
}

// SetUserBalance sets the "user_balance" field.
func (u *DelegatesUpsertOne) SetUserBalance(v string) *DelegatesUpsertOne {
	return u.Update(func(s *DelegatesUpsert) {
		s.SetUserBalance(v)
	})
}

// UpdateUserBalance sets the "user_balance" field to the value that was provided on create.
func (u *DelegatesUpsertOne) UpdateUserBalance() *DelegatesUpsertOne {
	return u.Update(func(s *DelegatesUpsert) {
		s.UpdateUserBalance()
	})
}

// ClearUserBalance clears the value of the "user_balance" field.
func (u *DelegatesUpsertOne) ClearUserBalance() *DelegatesUpsertOne {
	return u.Update(func(s *DelegatesUpsert) {
		s.ClearUserBalance()
	})
}

// SetAmount sets the "amount" field.
func (u *DelegatesUpsertOne) SetAmount(v string) *DelegatesUpsertOne {
	return u.Update(func(s *DelegatesUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *DelegatesUpsertOne) UpdateAmount() *DelegatesUpsertOne {
	return u.Update(func(s *DelegatesUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *DelegatesUpsertOne) ClearAmount() *DelegatesUpsertOne {
	return u.Update(func(s *DelegatesUpsert) {
		s.ClearAmount()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *DelegatesUpsertOne) SetCreatedAt(v time.Time) *DelegatesUpsertOne {
	return u.Update(func(s *DelegatesUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DelegatesUpsertOne) UpdateCreatedAt() *DelegatesUpsertOne {
	return u.Update(func(s *DelegatesUpsert) {
		s.UpdateCreatedAt()
	})
}

// ClearCreatedAt clears the value of the "created_at" field.
func (u *DelegatesUpsertOne) ClearCreatedAt() *DelegatesUpsertOne {
	return u.Update(func(s *DelegatesUpsert) {
		s.ClearCreatedAt()
	})
}

// SetStatus sets the "status" field.
func (u *DelegatesUpsertOne) SetStatus(v string) *DelegatesUpsertOne {
	return u.Update(func(s *DelegatesUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *DelegatesUpsertOne) UpdateStatus() *DelegatesUpsertOne {
	return u.Update(func(s *DelegatesUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *DelegatesUpsertOne) ClearStatus() *DelegatesUpsertOne {
	return u.Update(func(s *DelegatesUpsert) {
		s.ClearStatus()
	})
}

// SetDeploy sets the "Deploy" field.
func (u *DelegatesUpsertOne) SetDeploy(v string) *DelegatesUpsertOne {
	return u.Update(func(s *DelegatesUpsert) {
		s.SetDeploy(v)
	})
}

// UpdateDeploy sets the "Deploy" field to the value that was provided on create.
func (u *DelegatesUpsertOne) UpdateDeploy() *DelegatesUpsertOne {
	return u.Update(func(s *DelegatesUpsert) {
		s.UpdateDeploy()
	})
}

// ClearDeploy clears the value of the "Deploy" field.
func (u *DelegatesUpsertOne) ClearDeploy() *DelegatesUpsertOne {
	return u.Update(func(s *DelegatesUpsert) {
		s.ClearDeploy()
	})
}

// Exec executes the query.
func (u *DelegatesUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DelegatesCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DelegatesUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DelegatesUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DelegatesUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DelegatesCreateBulk is the builder for creating many Delegates entities in bulk.
type DelegatesCreateBulk struct {
	config
	builders []*DelegatesCreate
	conflict []sql.ConflictOption
}

// Save creates the Delegates entities in the database.
func (dcb *DelegatesCreateBulk) Save(ctx context.Context) ([]*Delegates, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Delegates, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DelegatesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DelegatesCreateBulk) SaveX(ctx context.Context) []*Delegates {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DelegatesCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DelegatesCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Delegates.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DelegatesUpsert) {
//			SetDelegator(v+v).
//		}).
//		Exec(ctx)
func (dcb *DelegatesCreateBulk) OnConflict(opts ...sql.ConflictOption) *DelegatesUpsertBulk {
	dcb.conflict = opts
	return &DelegatesUpsertBulk{
		create: dcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Delegates.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dcb *DelegatesCreateBulk) OnConflictColumns(columns ...string) *DelegatesUpsertBulk {
	dcb.conflict = append(dcb.conflict, sql.ConflictColumns(columns...))
	return &DelegatesUpsertBulk{
		create: dcb,
	}
}

// DelegatesUpsertBulk is the builder for "upsert"-ing
// a bulk of Delegates nodes.
type DelegatesUpsertBulk struct {
	create *DelegatesCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Delegates.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *DelegatesUpsertBulk) UpdateNewValues() *DelegatesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Delegates.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DelegatesUpsertBulk) Ignore() *DelegatesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DelegatesUpsertBulk) DoNothing() *DelegatesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DelegatesCreateBulk.OnConflict
// documentation for more info.
func (u *DelegatesUpsertBulk) Update(set func(*DelegatesUpsert)) *DelegatesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DelegatesUpsert{UpdateSet: update})
	}))
	return u
}

// SetDelegator sets the "delegator" field.
func (u *DelegatesUpsertBulk) SetDelegator(v string) *DelegatesUpsertBulk {
	return u.Update(func(s *DelegatesUpsert) {
		s.SetDelegator(v)
	})
}

// UpdateDelegator sets the "delegator" field to the value that was provided on create.
func (u *DelegatesUpsertBulk) UpdateDelegator() *DelegatesUpsertBulk {
	return u.Update(func(s *DelegatesUpsert) {
		s.UpdateDelegator()
	})
}

// SetValidator sets the "validator" field.
func (u *DelegatesUpsertBulk) SetValidator(v string) *DelegatesUpsertBulk {
	return u.Update(func(s *DelegatesUpsert) {
		s.SetValidator(v)
	})
}

// UpdateValidator sets the "validator" field to the value that was provided on create.
func (u *DelegatesUpsertBulk) UpdateValidator() *DelegatesUpsertBulk {
	return u.Update(func(s *DelegatesUpsert) {
		s.UpdateValidator()
	})
}

// ClearValidator clears the value of the "validator" field.
func (u *DelegatesUpsertBulk) ClearValidator() *DelegatesUpsertBulk {
	return u.Update(func(s *DelegatesUpsert) {
		s.ClearValidator()
	})
}

// SetName sets the "name" field.
func (u *DelegatesUpsertBulk) SetName(v string) *DelegatesUpsertBulk {
	return u.Update(func(s *DelegatesUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DelegatesUpsertBulk) UpdateName() *DelegatesUpsertBulk {
	return u.Update(func(s *DelegatesUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *DelegatesUpsertBulk) ClearName() *DelegatesUpsertBulk {
	return u.Update(func(s *DelegatesUpsert) {
		s.ClearName()
	})
}

// SetUserBalance sets the "user_balance" field.
func (u *DelegatesUpsertBulk) SetUserBalance(v string) *DelegatesUpsertBulk {
	return u.Update(func(s *DelegatesUpsert) {
		s.SetUserBalance(v)
	})
}

// UpdateUserBalance sets the "user_balance" field to the value that was provided on create.
func (u *DelegatesUpsertBulk) UpdateUserBalance() *DelegatesUpsertBulk {
	return u.Update(func(s *DelegatesUpsert) {
		s.UpdateUserBalance()
	})
}

// ClearUserBalance clears the value of the "user_balance" field.
func (u *DelegatesUpsertBulk) ClearUserBalance() *DelegatesUpsertBulk {
	return u.Update(func(s *DelegatesUpsert) {
		s.ClearUserBalance()
	})
}

// SetAmount sets the "amount" field.
func (u *DelegatesUpsertBulk) SetAmount(v string) *DelegatesUpsertBulk {
	return u.Update(func(s *DelegatesUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *DelegatesUpsertBulk) UpdateAmount() *DelegatesUpsertBulk {
	return u.Update(func(s *DelegatesUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *DelegatesUpsertBulk) ClearAmount() *DelegatesUpsertBulk {
	return u.Update(func(s *DelegatesUpsert) {
		s.ClearAmount()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *DelegatesUpsertBulk) SetCreatedAt(v time.Time) *DelegatesUpsertBulk {
	return u.Update(func(s *DelegatesUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DelegatesUpsertBulk) UpdateCreatedAt() *DelegatesUpsertBulk {
	return u.Update(func(s *DelegatesUpsert) {
		s.UpdateCreatedAt()
	})
}

// ClearCreatedAt clears the value of the "created_at" field.
func (u *DelegatesUpsertBulk) ClearCreatedAt() *DelegatesUpsertBulk {
	return u.Update(func(s *DelegatesUpsert) {
		s.ClearCreatedAt()
	})
}

// SetStatus sets the "status" field.
func (u *DelegatesUpsertBulk) SetStatus(v string) *DelegatesUpsertBulk {
	return u.Update(func(s *DelegatesUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *DelegatesUpsertBulk) UpdateStatus() *DelegatesUpsertBulk {
	return u.Update(func(s *DelegatesUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *DelegatesUpsertBulk) ClearStatus() *DelegatesUpsertBulk {
	return u.Update(func(s *DelegatesUpsert) {
		s.ClearStatus()
	})
}

// SetDeploy sets the "Deploy" field.
func (u *DelegatesUpsertBulk) SetDeploy(v string) *DelegatesUpsertBulk {
	return u.Update(func(s *DelegatesUpsert) {
		s.SetDeploy(v)
	})
}

// UpdateDeploy sets the "Deploy" field to the value that was provided on create.
func (u *DelegatesUpsertBulk) UpdateDeploy() *DelegatesUpsertBulk {
	return u.Update(func(s *DelegatesUpsert) {
		s.UpdateDeploy()
	})
}

// ClearDeploy clears the value of the "Deploy" field.
func (u *DelegatesUpsertBulk) ClearDeploy() *DelegatesUpsertBulk {
	return u.Update(func(s *DelegatesUpsert) {
		s.ClearDeploy()
	})
}

// Exec executes the query.
func (u *DelegatesUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DelegatesCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DelegatesCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DelegatesUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
