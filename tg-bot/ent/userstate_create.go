// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/user"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/userstate"
)

// UserStateCreate is the builder for creating a UserState entity.
type UserStateCreate struct {
	config
	mutation *UserStateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetState sets the "state" field.
func (usc *UserStateCreate) SetState(s string) *UserStateCreate {
	usc.mutation.SetState(s)
	return usc
}

// SetData sets the "data" field.
func (usc *UserStateCreate) SetData(b []byte) *UserStateCreate {
	usc.mutation.SetData(b)
	return usc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (usc *UserStateCreate) SetOwnerID(id int64) *UserStateCreate {
	usc.mutation.SetOwnerID(id)
	return usc
}

// SetOwner sets the "owner" edge to the User entity.
func (usc *UserStateCreate) SetOwner(u *User) *UserStateCreate {
	return usc.SetOwnerID(u.ID)
}

// Mutation returns the UserStateMutation object of the builder.
func (usc *UserStateCreate) Mutation() *UserStateMutation {
	return usc.mutation
}

// Save creates the UserState in the database.
func (usc *UserStateCreate) Save(ctx context.Context) (*UserState, error) {
	return withHooks(ctx, usc.sqlSave, usc.mutation, usc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (usc *UserStateCreate) SaveX(ctx context.Context) *UserState {
	v, err := usc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (usc *UserStateCreate) Exec(ctx context.Context) error {
	_, err := usc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usc *UserStateCreate) ExecX(ctx context.Context) {
	if err := usc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (usc *UserStateCreate) check() error {
	if _, ok := usc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "UserState.state"`)}
	}
	if _, ok := usc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "UserState.owner"`)}
	}
	return nil
}

func (usc *UserStateCreate) sqlSave(ctx context.Context) (*UserState, error) {
	if err := usc.check(); err != nil {
		return nil, err
	}
	_node, _spec := usc.createSpec()
	if err := sqlgraph.CreateNode(ctx, usc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	usc.mutation.id = &_node.ID
	usc.mutation.done = true
	return _node, nil
}

func (usc *UserStateCreate) createSpec() (*UserState, *sqlgraph.CreateSpec) {
	var (
		_node = &UserState{config: usc.config}
		_spec = sqlgraph.NewCreateSpec(userstate.Table, sqlgraph.NewFieldSpec(userstate.FieldID, field.TypeInt))
	)
	_spec.OnConflict = usc.conflict
	if value, ok := usc.mutation.State(); ok {
		_spec.SetField(userstate.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := usc.mutation.Data(); ok {
		_spec.SetField(userstate.FieldData, field.TypeBytes, value)
		_node.Data = value
	}
	if nodes := usc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userstate.OwnerTable,
			Columns: []string{userstate.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_state = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserState.Create().
//		SetState(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserStateUpsert) {
//			SetState(v+v).
//		}).
//		Exec(ctx)
func (usc *UserStateCreate) OnConflict(opts ...sql.ConflictOption) *UserStateUpsertOne {
	usc.conflict = opts
	return &UserStateUpsertOne{
		create: usc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserState.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (usc *UserStateCreate) OnConflictColumns(columns ...string) *UserStateUpsertOne {
	usc.conflict = append(usc.conflict, sql.ConflictColumns(columns...))
	return &UserStateUpsertOne{
		create: usc,
	}
}

type (
	// UserStateUpsertOne is the builder for "upsert"-ing
	//  one UserState node.
	UserStateUpsertOne struct {
		create *UserStateCreate
	}

	// UserStateUpsert is the "OnConflict" setter.
	UserStateUpsert struct {
		*sql.UpdateSet
	}
)

// SetState sets the "state" field.
func (u *UserStateUpsert) SetState(v string) *UserStateUpsert {
	u.Set(userstate.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *UserStateUpsert) UpdateState() *UserStateUpsert {
	u.SetExcluded(userstate.FieldState)
	return u
}

// SetData sets the "data" field.
func (u *UserStateUpsert) SetData(v []byte) *UserStateUpsert {
	u.Set(userstate.FieldData, v)
	return u
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *UserStateUpsert) UpdateData() *UserStateUpsert {
	u.SetExcluded(userstate.FieldData)
	return u
}

// ClearData clears the value of the "data" field.
func (u *UserStateUpsert) ClearData() *UserStateUpsert {
	u.SetNull(userstate.FieldData)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.UserState.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserStateUpsertOne) UpdateNewValues() *UserStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserState.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserStateUpsertOne) Ignore() *UserStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserStateUpsertOne) DoNothing() *UserStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserStateCreate.OnConflict
// documentation for more info.
func (u *UserStateUpsertOne) Update(set func(*UserStateUpsert)) *UserStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserStateUpsert{UpdateSet: update})
	}))
	return u
}

// SetState sets the "state" field.
func (u *UserStateUpsertOne) SetState(v string) *UserStateUpsertOne {
	return u.Update(func(s *UserStateUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *UserStateUpsertOne) UpdateState() *UserStateUpsertOne {
	return u.Update(func(s *UserStateUpsert) {
		s.UpdateState()
	})
}

// SetData sets the "data" field.
func (u *UserStateUpsertOne) SetData(v []byte) *UserStateUpsertOne {
	return u.Update(func(s *UserStateUpsert) {
		s.SetData(v)
	})
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *UserStateUpsertOne) UpdateData() *UserStateUpsertOne {
	return u.Update(func(s *UserStateUpsert) {
		s.UpdateData()
	})
}

// ClearData clears the value of the "data" field.
func (u *UserStateUpsertOne) ClearData() *UserStateUpsertOne {
	return u.Update(func(s *UserStateUpsert) {
		s.ClearData()
	})
}

// Exec executes the query.
func (u *UserStateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserStateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserStateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserStateUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserStateUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserStateCreateBulk is the builder for creating many UserState entities in bulk.
type UserStateCreateBulk struct {
	config
	builders []*UserStateCreate
	conflict []sql.ConflictOption
}

// Save creates the UserState entities in the database.
func (uscb *UserStateCreateBulk) Save(ctx context.Context) ([]*UserState, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uscb.builders))
	nodes := make([]*UserState, len(uscb.builders))
	mutators := make([]Mutator, len(uscb.builders))
	for i := range uscb.builders {
		func(i int, root context.Context) {
			builder := uscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserStateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = uscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uscb *UserStateCreateBulk) SaveX(ctx context.Context) []*UserState {
	v, err := uscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uscb *UserStateCreateBulk) Exec(ctx context.Context) error {
	_, err := uscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uscb *UserStateCreateBulk) ExecX(ctx context.Context) {
	if err := uscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserState.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserStateUpsert) {
//			SetState(v+v).
//		}).
//		Exec(ctx)
func (uscb *UserStateCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserStateUpsertBulk {
	uscb.conflict = opts
	return &UserStateUpsertBulk{
		create: uscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserState.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uscb *UserStateCreateBulk) OnConflictColumns(columns ...string) *UserStateUpsertBulk {
	uscb.conflict = append(uscb.conflict, sql.ConflictColumns(columns...))
	return &UserStateUpsertBulk{
		create: uscb,
	}
}

// UserStateUpsertBulk is the builder for "upsert"-ing
// a bulk of UserState nodes.
type UserStateUpsertBulk struct {
	create *UserStateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserState.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserStateUpsertBulk) UpdateNewValues() *UserStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserState.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserStateUpsertBulk) Ignore() *UserStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserStateUpsertBulk) DoNothing() *UserStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserStateCreateBulk.OnConflict
// documentation for more info.
func (u *UserStateUpsertBulk) Update(set func(*UserStateUpsert)) *UserStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserStateUpsert{UpdateSet: update})
	}))
	return u
}

// SetState sets the "state" field.
func (u *UserStateUpsertBulk) SetState(v string) *UserStateUpsertBulk {
	return u.Update(func(s *UserStateUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *UserStateUpsertBulk) UpdateState() *UserStateUpsertBulk {
	return u.Update(func(s *UserStateUpsert) {
		s.UpdateState()
	})
}

// SetData sets the "data" field.
func (u *UserStateUpsertBulk) SetData(v []byte) *UserStateUpsertBulk {
	return u.Update(func(s *UserStateUpsert) {
		s.SetData(v)
	})
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *UserStateUpsertBulk) UpdateData() *UserStateUpsertBulk {
	return u.Update(func(s *UserStateUpsert) {
		s.UpdateData()
	})
}

// ClearData clears the value of the "data" field.
func (u *UserStateUpsertBulk) ClearData() *UserStateUpsertBulk {
	return u.Update(func(s *UserStateUpsert) {
		s.ClearData()
	})
}

// Exec executes the query.
func (u *UserStateUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserStateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserStateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserStateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
