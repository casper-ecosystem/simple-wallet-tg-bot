// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Simplewallethq/tg-bot/ent/undelegates"
	"github.com/Simplewallethq/tg-bot/ent/user"
)

// UndelegatesCreate is the builder for creating a Undelegates entity.
type UndelegatesCreate struct {
	config
	mutation *UndelegatesMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDelegator sets the "delegator" field.
func (uc *UndelegatesCreate) SetDelegator(s string) *UndelegatesCreate {
	uc.mutation.SetDelegator(s)
	return uc
}

// SetValidator sets the "validator" field.
func (uc *UndelegatesCreate) SetValidator(s string) *UndelegatesCreate {
	uc.mutation.SetValidator(s)
	return uc
}

// SetNillableValidator sets the "validator" field if the given value is not nil.
func (uc *UndelegatesCreate) SetNillableValidator(s *string) *UndelegatesCreate {
	if s != nil {
		uc.SetValidator(*s)
	}
	return uc
}

// SetName sets the "name" field.
func (uc *UndelegatesCreate) SetName(s string) *UndelegatesCreate {
	uc.mutation.SetName(s)
	return uc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uc *UndelegatesCreate) SetNillableName(s *string) *UndelegatesCreate {
	if s != nil {
		uc.SetName(*s)
	}
	return uc
}

// SetStakedBalance sets the "staked_balance" field.
func (uc *UndelegatesCreate) SetStakedBalance(s string) *UndelegatesCreate {
	uc.mutation.SetStakedBalance(s)
	return uc
}

// SetNillableStakedBalance sets the "staked_balance" field if the given value is not nil.
func (uc *UndelegatesCreate) SetNillableStakedBalance(s *string) *UndelegatesCreate {
	if s != nil {
		uc.SetStakedBalance(*s)
	}
	return uc
}

// SetAmount sets the "amount" field.
func (uc *UndelegatesCreate) SetAmount(s string) *UndelegatesCreate {
	uc.mutation.SetAmount(s)
	return uc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (uc *UndelegatesCreate) SetNillableAmount(s *string) *UndelegatesCreate {
	if s != nil {
		uc.SetAmount(*s)
	}
	return uc
}

// SetCreatedAt sets the "created_at" field.
func (uc *UndelegatesCreate) SetCreatedAt(t time.Time) *UndelegatesCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uc *UndelegatesCreate) SetNillableCreatedAt(t *time.Time) *UndelegatesCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetStatus sets the "status" field.
func (uc *UndelegatesCreate) SetStatus(s string) *UndelegatesCreate {
	uc.mutation.SetStatus(s)
	return uc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uc *UndelegatesCreate) SetNillableStatus(s *string) *UndelegatesCreate {
	if s != nil {
		uc.SetStatus(*s)
	}
	return uc
}

// SetDeploy sets the "Deploy" field.
func (uc *UndelegatesCreate) SetDeploy(s string) *UndelegatesCreate {
	uc.mutation.SetDeploy(s)
	return uc
}

// SetNillableDeploy sets the "Deploy" field if the given value is not nil.
func (uc *UndelegatesCreate) SetNillableDeploy(s *string) *UndelegatesCreate {
	if s != nil {
		uc.SetDeploy(*s)
	}
	return uc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (uc *UndelegatesCreate) SetOwnerID(id int64) *UndelegatesCreate {
	uc.mutation.SetOwnerID(id)
	return uc
}

// SetOwner sets the "owner" edge to the User entity.
func (uc *UndelegatesCreate) SetOwner(u *User) *UndelegatesCreate {
	return uc.SetOwnerID(u.ID)
}

// Mutation returns the UndelegatesMutation object of the builder.
func (uc *UndelegatesCreate) Mutation() *UndelegatesMutation {
	return uc.mutation
}

// Save creates the Undelegates in the database.
func (uc *UndelegatesCreate) Save(ctx context.Context) (*Undelegates, error) {
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UndelegatesCreate) SaveX(ctx context.Context) *Undelegates {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UndelegatesCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UndelegatesCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UndelegatesCreate) check() error {
	if _, ok := uc.mutation.Delegator(); !ok {
		return &ValidationError{Name: "delegator", err: errors.New(`ent: missing required field "Undelegates.delegator"`)}
	}
	if _, ok := uc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "Undelegates.owner"`)}
	}
	return nil
}

func (uc *UndelegatesCreate) sqlSave(ctx context.Context) (*Undelegates, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UndelegatesCreate) createSpec() (*Undelegates, *sqlgraph.CreateSpec) {
	var (
		_node = &Undelegates{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(undelegates.Table, sqlgraph.NewFieldSpec(undelegates.FieldID, field.TypeInt))
	)
	_spec.OnConflict = uc.conflict
	if value, ok := uc.mutation.Delegator(); ok {
		_spec.SetField(undelegates.FieldDelegator, field.TypeString, value)
		_node.Delegator = value
	}
	if value, ok := uc.mutation.Validator(); ok {
		_spec.SetField(undelegates.FieldValidator, field.TypeString, value)
		_node.Validator = value
	}
	if value, ok := uc.mutation.Name(); ok {
		_spec.SetField(undelegates.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := uc.mutation.StakedBalance(); ok {
		_spec.SetField(undelegates.FieldStakedBalance, field.TypeString, value)
		_node.StakedBalance = value
	}
	if value, ok := uc.mutation.Amount(); ok {
		_spec.SetField(undelegates.FieldAmount, field.TypeString, value)
		_node.Amount = value
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.SetField(undelegates.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.Status(); ok {
		_spec.SetField(undelegates.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := uc.mutation.Deploy(); ok {
		_spec.SetField(undelegates.FieldDeploy, field.TypeString, value)
		_node.Deploy = value
	}
	if nodes := uc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   undelegates.OwnerTable,
			Columns: []string{undelegates.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_undelegates = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Undelegates.Create().
//		SetDelegator(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UndelegatesUpsert) {
//			SetDelegator(v+v).
//		}).
//		Exec(ctx)
func (uc *UndelegatesCreate) OnConflict(opts ...sql.ConflictOption) *UndelegatesUpsertOne {
	uc.conflict = opts
	return &UndelegatesUpsertOne{
		create: uc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Undelegates.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uc *UndelegatesCreate) OnConflictColumns(columns ...string) *UndelegatesUpsertOne {
	uc.conflict = append(uc.conflict, sql.ConflictColumns(columns...))
	return &UndelegatesUpsertOne{
		create: uc,
	}
}

type (
	// UndelegatesUpsertOne is the builder for "upsert"-ing
	//  one Undelegates node.
	UndelegatesUpsertOne struct {
		create *UndelegatesCreate
	}

	// UndelegatesUpsert is the "OnConflict" setter.
	UndelegatesUpsert struct {
		*sql.UpdateSet
	}
)

// SetDelegator sets the "delegator" field.
func (u *UndelegatesUpsert) SetDelegator(v string) *UndelegatesUpsert {
	u.Set(undelegates.FieldDelegator, v)
	return u
}

// UpdateDelegator sets the "delegator" field to the value that was provided on create.
func (u *UndelegatesUpsert) UpdateDelegator() *UndelegatesUpsert {
	u.SetExcluded(undelegates.FieldDelegator)
	return u
}

// SetValidator sets the "validator" field.
func (u *UndelegatesUpsert) SetValidator(v string) *UndelegatesUpsert {
	u.Set(undelegates.FieldValidator, v)
	return u
}

// UpdateValidator sets the "validator" field to the value that was provided on create.
func (u *UndelegatesUpsert) UpdateValidator() *UndelegatesUpsert {
	u.SetExcluded(undelegates.FieldValidator)
	return u
}

// ClearValidator clears the value of the "validator" field.
func (u *UndelegatesUpsert) ClearValidator() *UndelegatesUpsert {
	u.SetNull(undelegates.FieldValidator)
	return u
}

// SetName sets the "name" field.
func (u *UndelegatesUpsert) SetName(v string) *UndelegatesUpsert {
	u.Set(undelegates.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UndelegatesUpsert) UpdateName() *UndelegatesUpsert {
	u.SetExcluded(undelegates.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *UndelegatesUpsert) ClearName() *UndelegatesUpsert {
	u.SetNull(undelegates.FieldName)
	return u
}

// SetStakedBalance sets the "staked_balance" field.
func (u *UndelegatesUpsert) SetStakedBalance(v string) *UndelegatesUpsert {
	u.Set(undelegates.FieldStakedBalance, v)
	return u
}

// UpdateStakedBalance sets the "staked_balance" field to the value that was provided on create.
func (u *UndelegatesUpsert) UpdateStakedBalance() *UndelegatesUpsert {
	u.SetExcluded(undelegates.FieldStakedBalance)
	return u
}

// ClearStakedBalance clears the value of the "staked_balance" field.
func (u *UndelegatesUpsert) ClearStakedBalance() *UndelegatesUpsert {
	u.SetNull(undelegates.FieldStakedBalance)
	return u
}

// SetAmount sets the "amount" field.
func (u *UndelegatesUpsert) SetAmount(v string) *UndelegatesUpsert {
	u.Set(undelegates.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *UndelegatesUpsert) UpdateAmount() *UndelegatesUpsert {
	u.SetExcluded(undelegates.FieldAmount)
	return u
}

// ClearAmount clears the value of the "amount" field.
func (u *UndelegatesUpsert) ClearAmount() *UndelegatesUpsert {
	u.SetNull(undelegates.FieldAmount)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *UndelegatesUpsert) SetCreatedAt(v time.Time) *UndelegatesUpsert {
	u.Set(undelegates.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UndelegatesUpsert) UpdateCreatedAt() *UndelegatesUpsert {
	u.SetExcluded(undelegates.FieldCreatedAt)
	return u
}

// ClearCreatedAt clears the value of the "created_at" field.
func (u *UndelegatesUpsert) ClearCreatedAt() *UndelegatesUpsert {
	u.SetNull(undelegates.FieldCreatedAt)
	return u
}

// SetStatus sets the "status" field.
func (u *UndelegatesUpsert) SetStatus(v string) *UndelegatesUpsert {
	u.Set(undelegates.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UndelegatesUpsert) UpdateStatus() *UndelegatesUpsert {
	u.SetExcluded(undelegates.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *UndelegatesUpsert) ClearStatus() *UndelegatesUpsert {
	u.SetNull(undelegates.FieldStatus)
	return u
}

// SetDeploy sets the "Deploy" field.
func (u *UndelegatesUpsert) SetDeploy(v string) *UndelegatesUpsert {
	u.Set(undelegates.FieldDeploy, v)
	return u
}

// UpdateDeploy sets the "Deploy" field to the value that was provided on create.
func (u *UndelegatesUpsert) UpdateDeploy() *UndelegatesUpsert {
	u.SetExcluded(undelegates.FieldDeploy)
	return u
}

// ClearDeploy clears the value of the "Deploy" field.
func (u *UndelegatesUpsert) ClearDeploy() *UndelegatesUpsert {
	u.SetNull(undelegates.FieldDeploy)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Undelegates.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UndelegatesUpsertOne) UpdateNewValues() *UndelegatesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Undelegates.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UndelegatesUpsertOne) Ignore() *UndelegatesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UndelegatesUpsertOne) DoNothing() *UndelegatesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UndelegatesCreate.OnConflict
// documentation for more info.
func (u *UndelegatesUpsertOne) Update(set func(*UndelegatesUpsert)) *UndelegatesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UndelegatesUpsert{UpdateSet: update})
	}))
	return u
}

// SetDelegator sets the "delegator" field.
func (u *UndelegatesUpsertOne) SetDelegator(v string) *UndelegatesUpsertOne {
	return u.Update(func(s *UndelegatesUpsert) {
		s.SetDelegator(v)
	})
}

// UpdateDelegator sets the "delegator" field to the value that was provided on create.
func (u *UndelegatesUpsertOne) UpdateDelegator() *UndelegatesUpsertOne {
	return u.Update(func(s *UndelegatesUpsert) {
		s.UpdateDelegator()
	})
}

// SetValidator sets the "validator" field.
func (u *UndelegatesUpsertOne) SetValidator(v string) *UndelegatesUpsertOne {
	return u.Update(func(s *UndelegatesUpsert) {
		s.SetValidator(v)
	})
}

// UpdateValidator sets the "validator" field to the value that was provided on create.
func (u *UndelegatesUpsertOne) UpdateValidator() *UndelegatesUpsertOne {
	return u.Update(func(s *UndelegatesUpsert) {
		s.UpdateValidator()
	})
}

// ClearValidator clears the value of the "validator" field.
func (u *UndelegatesUpsertOne) ClearValidator() *UndelegatesUpsertOne {
	return u.Update(func(s *UndelegatesUpsert) {
		s.ClearValidator()
	})
}

// SetName sets the "name" field.
func (u *UndelegatesUpsertOne) SetName(v string) *UndelegatesUpsertOne {
	return u.Update(func(s *UndelegatesUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UndelegatesUpsertOne) UpdateName() *UndelegatesUpsertOne {
	return u.Update(func(s *UndelegatesUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *UndelegatesUpsertOne) ClearName() *UndelegatesUpsertOne {
	return u.Update(func(s *UndelegatesUpsert) {
		s.ClearName()
	})
}

// SetStakedBalance sets the "staked_balance" field.
func (u *UndelegatesUpsertOne) SetStakedBalance(v string) *UndelegatesUpsertOne {
	return u.Update(func(s *UndelegatesUpsert) {
		s.SetStakedBalance(v)
	})
}

// UpdateStakedBalance sets the "staked_balance" field to the value that was provided on create.
func (u *UndelegatesUpsertOne) UpdateStakedBalance() *UndelegatesUpsertOne {
	return u.Update(func(s *UndelegatesUpsert) {
		s.UpdateStakedBalance()
	})
}

// ClearStakedBalance clears the value of the "staked_balance" field.
func (u *UndelegatesUpsertOne) ClearStakedBalance() *UndelegatesUpsertOne {
	return u.Update(func(s *UndelegatesUpsert) {
		s.ClearStakedBalance()
	})
}

// SetAmount sets the "amount" field.
func (u *UndelegatesUpsertOne) SetAmount(v string) *UndelegatesUpsertOne {
	return u.Update(func(s *UndelegatesUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *UndelegatesUpsertOne) UpdateAmount() *UndelegatesUpsertOne {
	return u.Update(func(s *UndelegatesUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *UndelegatesUpsertOne) ClearAmount() *UndelegatesUpsertOne {
	return u.Update(func(s *UndelegatesUpsert) {
		s.ClearAmount()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *UndelegatesUpsertOne) SetCreatedAt(v time.Time) *UndelegatesUpsertOne {
	return u.Update(func(s *UndelegatesUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UndelegatesUpsertOne) UpdateCreatedAt() *UndelegatesUpsertOne {
	return u.Update(func(s *UndelegatesUpsert) {
		s.UpdateCreatedAt()
	})
}

// ClearCreatedAt clears the value of the "created_at" field.
func (u *UndelegatesUpsertOne) ClearCreatedAt() *UndelegatesUpsertOne {
	return u.Update(func(s *UndelegatesUpsert) {
		s.ClearCreatedAt()
	})
}

// SetStatus sets the "status" field.
func (u *UndelegatesUpsertOne) SetStatus(v string) *UndelegatesUpsertOne {
	return u.Update(func(s *UndelegatesUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UndelegatesUpsertOne) UpdateStatus() *UndelegatesUpsertOne {
	return u.Update(func(s *UndelegatesUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *UndelegatesUpsertOne) ClearStatus() *UndelegatesUpsertOne {
	return u.Update(func(s *UndelegatesUpsert) {
		s.ClearStatus()
	})
}

// SetDeploy sets the "Deploy" field.
func (u *UndelegatesUpsertOne) SetDeploy(v string) *UndelegatesUpsertOne {
	return u.Update(func(s *UndelegatesUpsert) {
		s.SetDeploy(v)
	})
}

// UpdateDeploy sets the "Deploy" field to the value that was provided on create.
func (u *UndelegatesUpsertOne) UpdateDeploy() *UndelegatesUpsertOne {
	return u.Update(func(s *UndelegatesUpsert) {
		s.UpdateDeploy()
	})
}

// ClearDeploy clears the value of the "Deploy" field.
func (u *UndelegatesUpsertOne) ClearDeploy() *UndelegatesUpsertOne {
	return u.Update(func(s *UndelegatesUpsert) {
		s.ClearDeploy()
	})
}

// Exec executes the query.
func (u *UndelegatesUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UndelegatesCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UndelegatesUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UndelegatesUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UndelegatesUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UndelegatesCreateBulk is the builder for creating many Undelegates entities in bulk.
type UndelegatesCreateBulk struct {
	config
	builders []*UndelegatesCreate
	conflict []sql.ConflictOption
}

// Save creates the Undelegates entities in the database.
func (ucb *UndelegatesCreateBulk) Save(ctx context.Context) ([]*Undelegates, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*Undelegates, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UndelegatesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UndelegatesCreateBulk) SaveX(ctx context.Context) []*Undelegates {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UndelegatesCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UndelegatesCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Undelegates.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UndelegatesUpsert) {
//			SetDelegator(v+v).
//		}).
//		Exec(ctx)
func (ucb *UndelegatesCreateBulk) OnConflict(opts ...sql.ConflictOption) *UndelegatesUpsertBulk {
	ucb.conflict = opts
	return &UndelegatesUpsertBulk{
		create: ucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Undelegates.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ucb *UndelegatesCreateBulk) OnConflictColumns(columns ...string) *UndelegatesUpsertBulk {
	ucb.conflict = append(ucb.conflict, sql.ConflictColumns(columns...))
	return &UndelegatesUpsertBulk{
		create: ucb,
	}
}

// UndelegatesUpsertBulk is the builder for "upsert"-ing
// a bulk of Undelegates nodes.
type UndelegatesUpsertBulk struct {
	create *UndelegatesCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Undelegates.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UndelegatesUpsertBulk) UpdateNewValues() *UndelegatesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Undelegates.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UndelegatesUpsertBulk) Ignore() *UndelegatesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UndelegatesUpsertBulk) DoNothing() *UndelegatesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UndelegatesCreateBulk.OnConflict
// documentation for more info.
func (u *UndelegatesUpsertBulk) Update(set func(*UndelegatesUpsert)) *UndelegatesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UndelegatesUpsert{UpdateSet: update})
	}))
	return u
}

// SetDelegator sets the "delegator" field.
func (u *UndelegatesUpsertBulk) SetDelegator(v string) *UndelegatesUpsertBulk {
	return u.Update(func(s *UndelegatesUpsert) {
		s.SetDelegator(v)
	})
}

// UpdateDelegator sets the "delegator" field to the value that was provided on create.
func (u *UndelegatesUpsertBulk) UpdateDelegator() *UndelegatesUpsertBulk {
	return u.Update(func(s *UndelegatesUpsert) {
		s.UpdateDelegator()
	})
}

// SetValidator sets the "validator" field.
func (u *UndelegatesUpsertBulk) SetValidator(v string) *UndelegatesUpsertBulk {
	return u.Update(func(s *UndelegatesUpsert) {
		s.SetValidator(v)
	})
}

// UpdateValidator sets the "validator" field to the value that was provided on create.
func (u *UndelegatesUpsertBulk) UpdateValidator() *UndelegatesUpsertBulk {
	return u.Update(func(s *UndelegatesUpsert) {
		s.UpdateValidator()
	})
}

// ClearValidator clears the value of the "validator" field.
func (u *UndelegatesUpsertBulk) ClearValidator() *UndelegatesUpsertBulk {
	return u.Update(func(s *UndelegatesUpsert) {
		s.ClearValidator()
	})
}

// SetName sets the "name" field.
func (u *UndelegatesUpsertBulk) SetName(v string) *UndelegatesUpsertBulk {
	return u.Update(func(s *UndelegatesUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UndelegatesUpsertBulk) UpdateName() *UndelegatesUpsertBulk {
	return u.Update(func(s *UndelegatesUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *UndelegatesUpsertBulk) ClearName() *UndelegatesUpsertBulk {
	return u.Update(func(s *UndelegatesUpsert) {
		s.ClearName()
	})
}

// SetStakedBalance sets the "staked_balance" field.
func (u *UndelegatesUpsertBulk) SetStakedBalance(v string) *UndelegatesUpsertBulk {
	return u.Update(func(s *UndelegatesUpsert) {
		s.SetStakedBalance(v)
	})
}

// UpdateStakedBalance sets the "staked_balance" field to the value that was provided on create.
func (u *UndelegatesUpsertBulk) UpdateStakedBalance() *UndelegatesUpsertBulk {
	return u.Update(func(s *UndelegatesUpsert) {
		s.UpdateStakedBalance()
	})
}

// ClearStakedBalance clears the value of the "staked_balance" field.
func (u *UndelegatesUpsertBulk) ClearStakedBalance() *UndelegatesUpsertBulk {
	return u.Update(func(s *UndelegatesUpsert) {
		s.ClearStakedBalance()
	})
}

// SetAmount sets the "amount" field.
func (u *UndelegatesUpsertBulk) SetAmount(v string) *UndelegatesUpsertBulk {
	return u.Update(func(s *UndelegatesUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *UndelegatesUpsertBulk) UpdateAmount() *UndelegatesUpsertBulk {
	return u.Update(func(s *UndelegatesUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *UndelegatesUpsertBulk) ClearAmount() *UndelegatesUpsertBulk {
	return u.Update(func(s *UndelegatesUpsert) {
		s.ClearAmount()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *UndelegatesUpsertBulk) SetCreatedAt(v time.Time) *UndelegatesUpsertBulk {
	return u.Update(func(s *UndelegatesUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UndelegatesUpsertBulk) UpdateCreatedAt() *UndelegatesUpsertBulk {
	return u.Update(func(s *UndelegatesUpsert) {
		s.UpdateCreatedAt()
	})
}

// ClearCreatedAt clears the value of the "created_at" field.
func (u *UndelegatesUpsertBulk) ClearCreatedAt() *UndelegatesUpsertBulk {
	return u.Update(func(s *UndelegatesUpsert) {
		s.ClearCreatedAt()
	})
}

// SetStatus sets the "status" field.
func (u *UndelegatesUpsertBulk) SetStatus(v string) *UndelegatesUpsertBulk {
	return u.Update(func(s *UndelegatesUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UndelegatesUpsertBulk) UpdateStatus() *UndelegatesUpsertBulk {
	return u.Update(func(s *UndelegatesUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *UndelegatesUpsertBulk) ClearStatus() *UndelegatesUpsertBulk {
	return u.Update(func(s *UndelegatesUpsert) {
		s.ClearStatus()
	})
}

// SetDeploy sets the "Deploy" field.
func (u *UndelegatesUpsertBulk) SetDeploy(v string) *UndelegatesUpsertBulk {
	return u.Update(func(s *UndelegatesUpsert) {
		s.SetDeploy(v)
	})
}

// UpdateDeploy sets the "Deploy" field to the value that was provided on create.
func (u *UndelegatesUpsertBulk) UpdateDeploy() *UndelegatesUpsertBulk {
	return u.Update(func(s *UndelegatesUpsert) {
		s.UpdateDeploy()
	})
}

// ClearDeploy clears the value of the "Deploy" field.
func (u *UndelegatesUpsertBulk) ClearDeploy() *UndelegatesUpsertBulk {
	return u.Update(func(s *UndelegatesUpsert) {
		s.ClearDeploy()
	})
}

// Exec executes the query.
func (u *UndelegatesUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UndelegatesCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UndelegatesCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UndelegatesUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
