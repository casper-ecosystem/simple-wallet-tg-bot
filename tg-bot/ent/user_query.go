// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Simplewallethq/tg-bot/ent/adressbook"
	"github.com/Simplewallethq/tg-bot/ent/balances"
	"github.com/Simplewallethq/tg-bot/ent/delegates"
	"github.com/Simplewallethq/tg-bot/ent/invoice"
	"github.com/Simplewallethq/tg-bot/ent/predicate"
	"github.com/Simplewallethq/tg-bot/ent/privatekeys"
	"github.com/Simplewallethq/tg-bot/ent/recentinvoices"
	"github.com/Simplewallethq/tg-bot/ent/rewardsdata"
	"github.com/Simplewallethq/tg-bot/ent/swaps"
	"github.com/Simplewallethq/tg-bot/ent/transfers"
	"github.com/Simplewallethq/tg-bot/ent/undelegates"
	"github.com/Simplewallethq/tg-bot/ent/user"
	"github.com/Simplewallethq/tg-bot/ent/userstate"
)

// UserQuery is the builder for querying User entities.
type UserQuery struct {
	config
	ctx                *QueryContext
	order              []user.OrderOption
	inters             []Interceptor
	predicates         []predicate.User
	withBalance        *BalancesQuery
	withAddressBook    *AdressBookQuery
	withState          *UserStateQuery
	withRewardsData    *RewardsDataQuery
	withPrivateKey     *PrivateKeysQuery
	withTransfers      *TransfersQuery
	withDelegates      *DelegatesQuery
	withUndelegates    *UndelegatesQuery
	withSwaps          *SwapsQuery
	withInvoices       *InvoiceQuery
	withRecentInvoices *RecentInvoicesQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserQuery builder.
func (uq *UserQuery) Where(ps ...predicate.User) *UserQuery {
	uq.predicates = append(uq.predicates, ps...)
	return uq
}

// Limit the number of records to be returned by this query.
func (uq *UserQuery) Limit(limit int) *UserQuery {
	uq.ctx.Limit = &limit
	return uq
}

// Offset to start from.
func (uq *UserQuery) Offset(offset int) *UserQuery {
	uq.ctx.Offset = &offset
	return uq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (uq *UserQuery) Unique(unique bool) *UserQuery {
	uq.ctx.Unique = &unique
	return uq
}

// Order specifies how the records should be ordered.
func (uq *UserQuery) Order(o ...user.OrderOption) *UserQuery {
	uq.order = append(uq.order, o...)
	return uq
}

// QueryBalance chains the current query on the "balance" edge.
func (uq *UserQuery) QueryBalance() *BalancesQuery {
	query := (&BalancesClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(balances.Table, balances.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.BalanceTable, user.BalanceColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAddressBook chains the current query on the "address_book" edge.
func (uq *UserQuery) QueryAddressBook() *AdressBookQuery {
	query := (&AdressBookClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(adressbook.Table, adressbook.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AddressBookTable, user.AddressBookColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryState chains the current query on the "state" edge.
func (uq *UserQuery) QueryState() *UserStateQuery {
	query := (&UserStateClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(userstate.Table, userstate.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.StateTable, user.StateColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRewardsData chains the current query on the "rewards_data" edge.
func (uq *UserQuery) QueryRewardsData() *RewardsDataQuery {
	query := (&RewardsDataClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(rewardsdata.Table, rewardsdata.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.RewardsDataTable, user.RewardsDataColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPrivateKey chains the current query on the "PrivateKey" edge.
func (uq *UserQuery) QueryPrivateKey() *PrivateKeysQuery {
	query := (&PrivateKeysClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(privatekeys.Table, privatekeys.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.PrivateKeyTable, user.PrivateKeyColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTransfers chains the current query on the "transfers" edge.
func (uq *UserQuery) QueryTransfers() *TransfersQuery {
	query := (&TransfersClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(transfers.Table, transfers.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.TransfersTable, user.TransfersColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDelegates chains the current query on the "delegates" edge.
func (uq *UserQuery) QueryDelegates() *DelegatesQuery {
	query := (&DelegatesClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(delegates.Table, delegates.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.DelegatesTable, user.DelegatesColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUndelegates chains the current query on the "undelegates" edge.
func (uq *UserQuery) QueryUndelegates() *UndelegatesQuery {
	query := (&UndelegatesClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(undelegates.Table, undelegates.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UndelegatesTable, user.UndelegatesColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySwaps chains the current query on the "swaps" edge.
func (uq *UserQuery) QuerySwaps() *SwapsQuery {
	query := (&SwapsClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(swaps.Table, swaps.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SwapsTable, user.SwapsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInvoices chains the current query on the "invoices" edge.
func (uq *UserQuery) QueryInvoices() *InvoiceQuery {
	query := (&InvoiceClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(invoice.Table, invoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.InvoicesTable, user.InvoicesColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRecentInvoices chains the current query on the "recentInvoices" edge.
func (uq *UserQuery) QueryRecentInvoices() *RecentInvoicesQuery {
	query := (&RecentInvoicesClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(recentinvoices.Table, recentinvoices.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.RecentInvoicesTable, user.RecentInvoicesColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first User entity from the query.
// Returns a *NotFoundError when no User was found.
func (uq *UserQuery) First(ctx context.Context) (*User, error) {
	nodes, err := uq.Limit(1).All(setContextOp(ctx, uq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{user.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (uq *UserQuery) FirstX(ctx context.Context) *User {
	node, err := uq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first User ID from the query.
// Returns a *NotFoundError when no User ID was found.
func (uq *UserQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = uq.Limit(1).IDs(setContextOp(ctx, uq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{user.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (uq *UserQuery) FirstIDX(ctx context.Context) int64 {
	id, err := uq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single User entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one User entity is found.
// Returns a *NotFoundError when no User entities are found.
func (uq *UserQuery) Only(ctx context.Context) (*User, error) {
	nodes, err := uq.Limit(2).All(setContextOp(ctx, uq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{user.Label}
	default:
		return nil, &NotSingularError{user.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (uq *UserQuery) OnlyX(ctx context.Context) *User {
	node, err := uq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only User ID in the query.
// Returns a *NotSingularError when more than one User ID is found.
// Returns a *NotFoundError when no entities are found.
func (uq *UserQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = uq.Limit(2).IDs(setContextOp(ctx, uq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{user.Label}
	default:
		err = &NotSingularError{user.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (uq *UserQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := uq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Users.
func (uq *UserQuery) All(ctx context.Context) ([]*User, error) {
	ctx = setContextOp(ctx, uq.ctx, "All")
	if err := uq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*User, *UserQuery]()
	return withInterceptors[[]*User](ctx, uq, qr, uq.inters)
}

// AllX is like All, but panics if an error occurs.
func (uq *UserQuery) AllX(ctx context.Context) []*User {
	nodes, err := uq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of User IDs.
func (uq *UserQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if uq.ctx.Unique == nil && uq.path != nil {
		uq.Unique(true)
	}
	ctx = setContextOp(ctx, uq.ctx, "IDs")
	if err = uq.Select(user.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (uq *UserQuery) IDsX(ctx context.Context) []int64 {
	ids, err := uq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (uq *UserQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, uq.ctx, "Count")
	if err := uq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, uq, querierCount[*UserQuery](), uq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (uq *UserQuery) CountX(ctx context.Context) int {
	count, err := uq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (uq *UserQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, uq.ctx, "Exist")
	switch _, err := uq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (uq *UserQuery) ExistX(ctx context.Context) bool {
	exist, err := uq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (uq *UserQuery) Clone() *UserQuery {
	if uq == nil {
		return nil
	}
	return &UserQuery{
		config:             uq.config,
		ctx:                uq.ctx.Clone(),
		order:              append([]user.OrderOption{}, uq.order...),
		inters:             append([]Interceptor{}, uq.inters...),
		predicates:         append([]predicate.User{}, uq.predicates...),
		withBalance:        uq.withBalance.Clone(),
		withAddressBook:    uq.withAddressBook.Clone(),
		withState:          uq.withState.Clone(),
		withRewardsData:    uq.withRewardsData.Clone(),
		withPrivateKey:     uq.withPrivateKey.Clone(),
		withTransfers:      uq.withTransfers.Clone(),
		withDelegates:      uq.withDelegates.Clone(),
		withUndelegates:    uq.withUndelegates.Clone(),
		withSwaps:          uq.withSwaps.Clone(),
		withInvoices:       uq.withInvoices.Clone(),
		withRecentInvoices: uq.withRecentInvoices.Clone(),
		// clone intermediate query.
		sql:  uq.sql.Clone(),
		path: uq.path,
	}
}

// WithBalance tells the query-builder to eager-load the nodes that are connected to
// the "balance" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithBalance(opts ...func(*BalancesQuery)) *UserQuery {
	query := (&BalancesClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withBalance = query
	return uq
}

// WithAddressBook tells the query-builder to eager-load the nodes that are connected to
// the "address_book" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithAddressBook(opts ...func(*AdressBookQuery)) *UserQuery {
	query := (&AdressBookClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withAddressBook = query
	return uq
}

// WithState tells the query-builder to eager-load the nodes that are connected to
// the "state" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithState(opts ...func(*UserStateQuery)) *UserQuery {
	query := (&UserStateClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withState = query
	return uq
}

// WithRewardsData tells the query-builder to eager-load the nodes that are connected to
// the "rewards_data" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithRewardsData(opts ...func(*RewardsDataQuery)) *UserQuery {
	query := (&RewardsDataClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withRewardsData = query
	return uq
}

// WithPrivateKey tells the query-builder to eager-load the nodes that are connected to
// the "PrivateKey" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithPrivateKey(opts ...func(*PrivateKeysQuery)) *UserQuery {
	query := (&PrivateKeysClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withPrivateKey = query
	return uq
}

// WithTransfers tells the query-builder to eager-load the nodes that are connected to
// the "transfers" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithTransfers(opts ...func(*TransfersQuery)) *UserQuery {
	query := (&TransfersClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withTransfers = query
	return uq
}

// WithDelegates tells the query-builder to eager-load the nodes that are connected to
// the "delegates" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithDelegates(opts ...func(*DelegatesQuery)) *UserQuery {
	query := (&DelegatesClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withDelegates = query
	return uq
}

// WithUndelegates tells the query-builder to eager-load the nodes that are connected to
// the "undelegates" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithUndelegates(opts ...func(*UndelegatesQuery)) *UserQuery {
	query := (&UndelegatesClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withUndelegates = query
	return uq
}

// WithSwaps tells the query-builder to eager-load the nodes that are connected to
// the "swaps" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithSwaps(opts ...func(*SwapsQuery)) *UserQuery {
	query := (&SwapsClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withSwaps = query
	return uq
}

// WithInvoices tells the query-builder to eager-load the nodes that are connected to
// the "invoices" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithInvoices(opts ...func(*InvoiceQuery)) *UserQuery {
	query := (&InvoiceClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withInvoices = query
	return uq
}

// WithRecentInvoices tells the query-builder to eager-load the nodes that are connected to
// the "recentInvoices" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithRecentInvoices(opts ...func(*RecentInvoicesQuery)) *UserQuery {
	query := (&RecentInvoicesClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withRecentInvoices = query
	return uq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		PublicKey string `json:"public_key,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.User.Query().
//		GroupBy(user.FieldPublicKey).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (uq *UserQuery) GroupBy(field string, fields ...string) *UserGroupBy {
	uq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserGroupBy{build: uq}
	grbuild.flds = &uq.ctx.Fields
	grbuild.label = user.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		PublicKey string `json:"public_key,omitempty"`
//	}
//
//	client.User.Query().
//		Select(user.FieldPublicKey).
//		Scan(ctx, &v)
func (uq *UserQuery) Select(fields ...string) *UserSelect {
	uq.ctx.Fields = append(uq.ctx.Fields, fields...)
	sbuild := &UserSelect{UserQuery: uq}
	sbuild.label = user.Label
	sbuild.flds, sbuild.scan = &uq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserSelect configured with the given aggregations.
func (uq *UserQuery) Aggregate(fns ...AggregateFunc) *UserSelect {
	return uq.Select().Aggregate(fns...)
}

func (uq *UserQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range uq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, uq); err != nil {
				return err
			}
		}
	}
	for _, f := range uq.ctx.Fields {
		if !user.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if uq.path != nil {
		prev, err := uq.path(ctx)
		if err != nil {
			return err
		}
		uq.sql = prev
	}
	return nil
}

func (uq *UserQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*User, error) {
	var (
		nodes       = []*User{}
		_spec       = uq.querySpec()
		loadedTypes = [11]bool{
			uq.withBalance != nil,
			uq.withAddressBook != nil,
			uq.withState != nil,
			uq.withRewardsData != nil,
			uq.withPrivateKey != nil,
			uq.withTransfers != nil,
			uq.withDelegates != nil,
			uq.withUndelegates != nil,
			uq.withSwaps != nil,
			uq.withInvoices != nil,
			uq.withRecentInvoices != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*User).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &User{config: uq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, uq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := uq.withBalance; query != nil {
		if err := uq.loadBalance(ctx, query, nodes, nil,
			func(n *User, e *Balances) { n.Edges.Balance = e }); err != nil {
			return nil, err
		}
	}
	if query := uq.withAddressBook; query != nil {
		if err := uq.loadAddressBook(ctx, query, nodes,
			func(n *User) { n.Edges.AddressBook = []*AdressBook{} },
			func(n *User, e *AdressBook) { n.Edges.AddressBook = append(n.Edges.AddressBook, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withState; query != nil {
		if err := uq.loadState(ctx, query, nodes, nil,
			func(n *User, e *UserState) { n.Edges.State = e }); err != nil {
			return nil, err
		}
	}
	if query := uq.withRewardsData; query != nil {
		if err := uq.loadRewardsData(ctx, query, nodes,
			func(n *User) { n.Edges.RewardsData = []*RewardsData{} },
			func(n *User, e *RewardsData) { n.Edges.RewardsData = append(n.Edges.RewardsData, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withPrivateKey; query != nil {
		if err := uq.loadPrivateKey(ctx, query, nodes, nil,
			func(n *User, e *PrivateKeys) { n.Edges.PrivateKey = e }); err != nil {
			return nil, err
		}
	}
	if query := uq.withTransfers; query != nil {
		if err := uq.loadTransfers(ctx, query, nodes,
			func(n *User) { n.Edges.Transfers = []*Transfers{} },
			func(n *User, e *Transfers) { n.Edges.Transfers = append(n.Edges.Transfers, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withDelegates; query != nil {
		if err := uq.loadDelegates(ctx, query, nodes,
			func(n *User) { n.Edges.Delegates = []*Delegates{} },
			func(n *User, e *Delegates) { n.Edges.Delegates = append(n.Edges.Delegates, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withUndelegates; query != nil {
		if err := uq.loadUndelegates(ctx, query, nodes,
			func(n *User) { n.Edges.Undelegates = []*Undelegates{} },
			func(n *User, e *Undelegates) { n.Edges.Undelegates = append(n.Edges.Undelegates, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withSwaps; query != nil {
		if err := uq.loadSwaps(ctx, query, nodes,
			func(n *User) { n.Edges.Swaps = []*Swaps{} },
			func(n *User, e *Swaps) { n.Edges.Swaps = append(n.Edges.Swaps, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withInvoices; query != nil {
		if err := uq.loadInvoices(ctx, query, nodes,
			func(n *User) { n.Edges.Invoices = []*Invoice{} },
			func(n *User, e *Invoice) { n.Edges.Invoices = append(n.Edges.Invoices, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withRecentInvoices; query != nil {
		if err := uq.loadRecentInvoices(ctx, query, nodes,
			func(n *User) { n.Edges.RecentInvoices = []*RecentInvoices{} },
			func(n *User, e *RecentInvoices) { n.Edges.RecentInvoices = append(n.Edges.RecentInvoices, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (uq *UserQuery) loadBalance(ctx context.Context, query *BalancesQuery, nodes []*User, init func(*User), assign func(*User, *Balances)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Balances(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.BalanceColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_balance
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_balance" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_balance" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadAddressBook(ctx context.Context, query *AdressBookQuery, nodes []*User, init func(*User), assign func(*User, *AdressBook)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.AdressBook(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.AddressBookColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_address_book
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_address_book" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_address_book" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadState(ctx context.Context, query *UserStateQuery, nodes []*User, init func(*User), assign func(*User, *UserState)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.UserState(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.StateColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_state
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_state" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_state" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadRewardsData(ctx context.Context, query *RewardsDataQuery, nodes []*User, init func(*User), assign func(*User, *RewardsData)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.RewardsData(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.RewardsDataColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_rewards_data
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_rewards_data" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_rewards_data" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadPrivateKey(ctx context.Context, query *PrivateKeysQuery, nodes []*User, init func(*User), assign func(*User, *PrivateKeys)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.PrivateKeys(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.PrivateKeyColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_private_key
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_private_key" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_private_key" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadTransfers(ctx context.Context, query *TransfersQuery, nodes []*User, init func(*User), assign func(*User, *Transfers)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Transfers(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.TransfersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_transfers
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_transfers" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_transfers" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadDelegates(ctx context.Context, query *DelegatesQuery, nodes []*User, init func(*User), assign func(*User, *Delegates)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Delegates(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.DelegatesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_delegates
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_delegates" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_delegates" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadUndelegates(ctx context.Context, query *UndelegatesQuery, nodes []*User, init func(*User), assign func(*User, *Undelegates)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Undelegates(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.UndelegatesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_undelegates
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_undelegates" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_undelegates" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadSwaps(ctx context.Context, query *SwapsQuery, nodes []*User, init func(*User), assign func(*User, *Swaps)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Swaps(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.SwapsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_swaps
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_swaps" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_swaps" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadInvoices(ctx context.Context, query *InvoiceQuery, nodes []*User, init func(*User), assign func(*User, *Invoice)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Invoice(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.InvoicesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_invoices
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_invoices" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_invoices" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadRecentInvoices(ctx context.Context, query *RecentInvoicesQuery, nodes []*User, init func(*User), assign func(*User, *RecentInvoices)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.RecentInvoices(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.RecentInvoicesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_recent_invoices
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_recent_invoices" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_recent_invoices" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (uq *UserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := uq.querySpec()
	_spec.Node.Columns = uq.ctx.Fields
	if len(uq.ctx.Fields) > 0 {
		_spec.Unique = uq.ctx.Unique != nil && *uq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, uq.driver, _spec)
}

func (uq *UserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64))
	_spec.From = uq.sql
	if unique := uq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if uq.path != nil {
		_spec.Unique = true
	}
	if fields := uq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for i := range fields {
			if fields[i] != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := uq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := uq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := uq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := uq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (uq *UserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(uq.driver.Dialect())
	t1 := builder.Table(user.Table)
	columns := uq.ctx.Fields
	if len(columns) == 0 {
		columns = user.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if uq.sql != nil {
		selector = uq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if uq.ctx.Unique != nil && *uq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range uq.predicates {
		p(selector)
	}
	for _, p := range uq.order {
		p(selector)
	}
	if offset := uq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := uq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserGroupBy is the group-by builder for User entities.
type UserGroupBy struct {
	selector
	build *UserQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ugb *UserGroupBy) Aggregate(fns ...AggregateFunc) *UserGroupBy {
	ugb.fns = append(ugb.fns, fns...)
	return ugb
}

// Scan applies the selector query and scans the result into the given value.
func (ugb *UserGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ugb.build.ctx, "GroupBy")
	if err := ugb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserQuery, *UserGroupBy](ctx, ugb.build, ugb, ugb.build.inters, v)
}

func (ugb *UserGroupBy) sqlScan(ctx context.Context, root *UserQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ugb.fns))
	for _, fn := range ugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ugb.flds)+len(ugb.fns))
		for _, f := range *ugb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ugb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ugb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserSelect is the builder for selecting fields of User entities.
type UserSelect struct {
	*UserQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (us *UserSelect) Aggregate(fns ...AggregateFunc) *UserSelect {
	us.fns = append(us.fns, fns...)
	return us
}

// Scan applies the selector query and scans the result into the given value.
func (us *UserSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, us.ctx, "Select")
	if err := us.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserQuery, *UserSelect](ctx, us.UserQuery, us, us.inters, v)
}

func (us *UserSelect) sqlScan(ctx context.Context, root *UserQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(us.fns))
	for _, fn := range us.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*us.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := us.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
