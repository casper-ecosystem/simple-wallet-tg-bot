// Code generated by ent, DO NOT EDIT.

package swaps

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the swaps type in the database.
	Label = "swaps"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldToAddress holds the string denoting the to_address field in the database.
	FieldToAddress = "to_address"
	// FieldFromCurrency holds the string denoting the from_currency field in the database.
	FieldFromCurrency = "from_currency"
	// FieldToCurrency holds the string denoting the to_currency field in the database.
	FieldToCurrency = "to_currency"
	// FieldToNetwork holds the string denoting the to_network field in the database.
	FieldToNetwork = "to_network"
	// FieldFromNetwork holds the string denoting the from_network field in the database.
	FieldFromNetwork = "from_network"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldAmountRecive holds the string denoting the amountrecive field in the database.
	FieldAmountRecive = "amount_recive"
	// FieldRefundAddress holds the string denoting the refund_address field in the database.
	FieldRefundAddress = "refund_address"
	// FieldSwapID holds the string denoting the swap_id field in the database.
	FieldSwapID = "swap_id"
	// FieldExtraID holds the string denoting the extra_id field in the database.
	FieldExtraID = "extra_id"
	// FieldInvoiceID holds the string denoting the invoiceid field in the database.
	FieldInvoiceID = "invoice_id"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// Table holds the table name of the swaps in the database.
	Table = "swaps"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "swaps"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_swaps"
)

// Columns holds all SQL columns for swaps fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldToAddress,
	FieldFromCurrency,
	FieldToCurrency,
	FieldToNetwork,
	FieldFromNetwork,
	FieldAmount,
	FieldAmountRecive,
	FieldRefundAddress,
	FieldSwapID,
	FieldExtraID,
	FieldInvoiceID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "swaps"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_swaps",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Swaps queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByToAddress orders the results by the to_address field.
func ByToAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToAddress, opts...).ToFunc()
}

// ByFromCurrency orders the results by the from_currency field.
func ByFromCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFromCurrency, opts...).ToFunc()
}

// ByToCurrency orders the results by the to_currency field.
func ByToCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToCurrency, opts...).ToFunc()
}

// ByToNetwork orders the results by the to_network field.
func ByToNetwork(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToNetwork, opts...).ToFunc()
}

// ByFromNetwork orders the results by the from_network field.
func ByFromNetwork(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFromNetwork, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByAmountRecive orders the results by the amountRecive field.
func ByAmountRecive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmountRecive, opts...).ToFunc()
}

// ByRefundAddress orders the results by the refund_address field.
func ByRefundAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefundAddress, opts...).ToFunc()
}

// BySwapID orders the results by the swap_id field.
func BySwapID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSwapID, opts...).ToFunc()
}

// ByExtraID orders the results by the extra_id field.
func ByExtraID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExtraID, opts...).ToFunc()
}

// ByInvoiceID orders the results by the invoiceID field.
func ByInvoiceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInvoiceID, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
