// Code generated by ent, DO NOT EDIT.

package swaps

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Swaps {
	return predicate.Swaps(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Swaps {
	return predicate.Swaps(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Swaps {
	return predicate.Swaps(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Swaps {
	return predicate.Swaps(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Swaps {
	return predicate.Swaps(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Swaps {
	return predicate.Swaps(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Swaps {
	return predicate.Swaps(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Swaps {
	return predicate.Swaps(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Swaps {
	return predicate.Swaps(sql.FieldLTE(FieldID, id))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldEQ(FieldType, v))
}

// ToAddress applies equality check predicate on the "to_address" field. It's identical to ToAddressEQ.
func ToAddress(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldEQ(FieldToAddress, v))
}

// FromCurrency applies equality check predicate on the "from_currency" field. It's identical to FromCurrencyEQ.
func FromCurrency(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldEQ(FieldFromCurrency, v))
}

// ToCurrency applies equality check predicate on the "to_currency" field. It's identical to ToCurrencyEQ.
func ToCurrency(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldEQ(FieldToCurrency, v))
}

// ToNetwork applies equality check predicate on the "to_network" field. It's identical to ToNetworkEQ.
func ToNetwork(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldEQ(FieldToNetwork, v))
}

// FromNetwork applies equality check predicate on the "from_network" field. It's identical to FromNetworkEQ.
func FromNetwork(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldEQ(FieldFromNetwork, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldEQ(FieldAmount, v))
}

// AmountRecive applies equality check predicate on the "amountRecive" field. It's identical to AmountReciveEQ.
func AmountRecive(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldEQ(FieldAmountRecive, v))
}

// RefundAddress applies equality check predicate on the "refund_address" field. It's identical to RefundAddressEQ.
func RefundAddress(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldEQ(FieldRefundAddress, v))
}

// SwapID applies equality check predicate on the "swap_id" field. It's identical to SwapIDEQ.
func SwapID(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldEQ(FieldSwapID, v))
}

// ExtraID applies equality check predicate on the "extra_id" field. It's identical to ExtraIDEQ.
func ExtraID(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldEQ(FieldExtraID, v))
}

// InvoiceID applies equality check predicate on the "invoiceID" field. It's identical to InvoiceIDEQ.
func InvoiceID(v int64) predicate.Swaps {
	return predicate.Swaps(sql.FieldEQ(FieldInvoiceID, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Swaps {
	return predicate.Swaps(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Swaps {
	return predicate.Swaps(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldHasSuffix(FieldType, v))
}

// TypeIsNil applies the IsNil predicate on the "type" field.
func TypeIsNil() predicate.Swaps {
	return predicate.Swaps(sql.FieldIsNull(FieldType))
}

// TypeNotNil applies the NotNil predicate on the "type" field.
func TypeNotNil() predicate.Swaps {
	return predicate.Swaps(sql.FieldNotNull(FieldType))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldContainsFold(FieldType, v))
}

// ToAddressEQ applies the EQ predicate on the "to_address" field.
func ToAddressEQ(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldEQ(FieldToAddress, v))
}

// ToAddressNEQ applies the NEQ predicate on the "to_address" field.
func ToAddressNEQ(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldNEQ(FieldToAddress, v))
}

// ToAddressIn applies the In predicate on the "to_address" field.
func ToAddressIn(vs ...string) predicate.Swaps {
	return predicate.Swaps(sql.FieldIn(FieldToAddress, vs...))
}

// ToAddressNotIn applies the NotIn predicate on the "to_address" field.
func ToAddressNotIn(vs ...string) predicate.Swaps {
	return predicate.Swaps(sql.FieldNotIn(FieldToAddress, vs...))
}

// ToAddressGT applies the GT predicate on the "to_address" field.
func ToAddressGT(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldGT(FieldToAddress, v))
}

// ToAddressGTE applies the GTE predicate on the "to_address" field.
func ToAddressGTE(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldGTE(FieldToAddress, v))
}

// ToAddressLT applies the LT predicate on the "to_address" field.
func ToAddressLT(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldLT(FieldToAddress, v))
}

// ToAddressLTE applies the LTE predicate on the "to_address" field.
func ToAddressLTE(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldLTE(FieldToAddress, v))
}

// ToAddressContains applies the Contains predicate on the "to_address" field.
func ToAddressContains(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldContains(FieldToAddress, v))
}

// ToAddressHasPrefix applies the HasPrefix predicate on the "to_address" field.
func ToAddressHasPrefix(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldHasPrefix(FieldToAddress, v))
}

// ToAddressHasSuffix applies the HasSuffix predicate on the "to_address" field.
func ToAddressHasSuffix(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldHasSuffix(FieldToAddress, v))
}

// ToAddressIsNil applies the IsNil predicate on the "to_address" field.
func ToAddressIsNil() predicate.Swaps {
	return predicate.Swaps(sql.FieldIsNull(FieldToAddress))
}

// ToAddressNotNil applies the NotNil predicate on the "to_address" field.
func ToAddressNotNil() predicate.Swaps {
	return predicate.Swaps(sql.FieldNotNull(FieldToAddress))
}

// ToAddressEqualFold applies the EqualFold predicate on the "to_address" field.
func ToAddressEqualFold(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldEqualFold(FieldToAddress, v))
}

// ToAddressContainsFold applies the ContainsFold predicate on the "to_address" field.
func ToAddressContainsFold(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldContainsFold(FieldToAddress, v))
}

// FromCurrencyEQ applies the EQ predicate on the "from_currency" field.
func FromCurrencyEQ(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldEQ(FieldFromCurrency, v))
}

// FromCurrencyNEQ applies the NEQ predicate on the "from_currency" field.
func FromCurrencyNEQ(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldNEQ(FieldFromCurrency, v))
}

// FromCurrencyIn applies the In predicate on the "from_currency" field.
func FromCurrencyIn(vs ...string) predicate.Swaps {
	return predicate.Swaps(sql.FieldIn(FieldFromCurrency, vs...))
}

// FromCurrencyNotIn applies the NotIn predicate on the "from_currency" field.
func FromCurrencyNotIn(vs ...string) predicate.Swaps {
	return predicate.Swaps(sql.FieldNotIn(FieldFromCurrency, vs...))
}

// FromCurrencyGT applies the GT predicate on the "from_currency" field.
func FromCurrencyGT(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldGT(FieldFromCurrency, v))
}

// FromCurrencyGTE applies the GTE predicate on the "from_currency" field.
func FromCurrencyGTE(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldGTE(FieldFromCurrency, v))
}

// FromCurrencyLT applies the LT predicate on the "from_currency" field.
func FromCurrencyLT(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldLT(FieldFromCurrency, v))
}

// FromCurrencyLTE applies the LTE predicate on the "from_currency" field.
func FromCurrencyLTE(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldLTE(FieldFromCurrency, v))
}

// FromCurrencyContains applies the Contains predicate on the "from_currency" field.
func FromCurrencyContains(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldContains(FieldFromCurrency, v))
}

// FromCurrencyHasPrefix applies the HasPrefix predicate on the "from_currency" field.
func FromCurrencyHasPrefix(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldHasPrefix(FieldFromCurrency, v))
}

// FromCurrencyHasSuffix applies the HasSuffix predicate on the "from_currency" field.
func FromCurrencyHasSuffix(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldHasSuffix(FieldFromCurrency, v))
}

// FromCurrencyIsNil applies the IsNil predicate on the "from_currency" field.
func FromCurrencyIsNil() predicate.Swaps {
	return predicate.Swaps(sql.FieldIsNull(FieldFromCurrency))
}

// FromCurrencyNotNil applies the NotNil predicate on the "from_currency" field.
func FromCurrencyNotNil() predicate.Swaps {
	return predicate.Swaps(sql.FieldNotNull(FieldFromCurrency))
}

// FromCurrencyEqualFold applies the EqualFold predicate on the "from_currency" field.
func FromCurrencyEqualFold(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldEqualFold(FieldFromCurrency, v))
}

// FromCurrencyContainsFold applies the ContainsFold predicate on the "from_currency" field.
func FromCurrencyContainsFold(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldContainsFold(FieldFromCurrency, v))
}

// ToCurrencyEQ applies the EQ predicate on the "to_currency" field.
func ToCurrencyEQ(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldEQ(FieldToCurrency, v))
}

// ToCurrencyNEQ applies the NEQ predicate on the "to_currency" field.
func ToCurrencyNEQ(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldNEQ(FieldToCurrency, v))
}

// ToCurrencyIn applies the In predicate on the "to_currency" field.
func ToCurrencyIn(vs ...string) predicate.Swaps {
	return predicate.Swaps(sql.FieldIn(FieldToCurrency, vs...))
}

// ToCurrencyNotIn applies the NotIn predicate on the "to_currency" field.
func ToCurrencyNotIn(vs ...string) predicate.Swaps {
	return predicate.Swaps(sql.FieldNotIn(FieldToCurrency, vs...))
}

// ToCurrencyGT applies the GT predicate on the "to_currency" field.
func ToCurrencyGT(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldGT(FieldToCurrency, v))
}

// ToCurrencyGTE applies the GTE predicate on the "to_currency" field.
func ToCurrencyGTE(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldGTE(FieldToCurrency, v))
}

// ToCurrencyLT applies the LT predicate on the "to_currency" field.
func ToCurrencyLT(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldLT(FieldToCurrency, v))
}

// ToCurrencyLTE applies the LTE predicate on the "to_currency" field.
func ToCurrencyLTE(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldLTE(FieldToCurrency, v))
}

// ToCurrencyContains applies the Contains predicate on the "to_currency" field.
func ToCurrencyContains(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldContains(FieldToCurrency, v))
}

// ToCurrencyHasPrefix applies the HasPrefix predicate on the "to_currency" field.
func ToCurrencyHasPrefix(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldHasPrefix(FieldToCurrency, v))
}

// ToCurrencyHasSuffix applies the HasSuffix predicate on the "to_currency" field.
func ToCurrencyHasSuffix(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldHasSuffix(FieldToCurrency, v))
}

// ToCurrencyIsNil applies the IsNil predicate on the "to_currency" field.
func ToCurrencyIsNil() predicate.Swaps {
	return predicate.Swaps(sql.FieldIsNull(FieldToCurrency))
}

// ToCurrencyNotNil applies the NotNil predicate on the "to_currency" field.
func ToCurrencyNotNil() predicate.Swaps {
	return predicate.Swaps(sql.FieldNotNull(FieldToCurrency))
}

// ToCurrencyEqualFold applies the EqualFold predicate on the "to_currency" field.
func ToCurrencyEqualFold(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldEqualFold(FieldToCurrency, v))
}

// ToCurrencyContainsFold applies the ContainsFold predicate on the "to_currency" field.
func ToCurrencyContainsFold(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldContainsFold(FieldToCurrency, v))
}

// ToNetworkEQ applies the EQ predicate on the "to_network" field.
func ToNetworkEQ(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldEQ(FieldToNetwork, v))
}

// ToNetworkNEQ applies the NEQ predicate on the "to_network" field.
func ToNetworkNEQ(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldNEQ(FieldToNetwork, v))
}

// ToNetworkIn applies the In predicate on the "to_network" field.
func ToNetworkIn(vs ...string) predicate.Swaps {
	return predicate.Swaps(sql.FieldIn(FieldToNetwork, vs...))
}

// ToNetworkNotIn applies the NotIn predicate on the "to_network" field.
func ToNetworkNotIn(vs ...string) predicate.Swaps {
	return predicate.Swaps(sql.FieldNotIn(FieldToNetwork, vs...))
}

// ToNetworkGT applies the GT predicate on the "to_network" field.
func ToNetworkGT(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldGT(FieldToNetwork, v))
}

// ToNetworkGTE applies the GTE predicate on the "to_network" field.
func ToNetworkGTE(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldGTE(FieldToNetwork, v))
}

// ToNetworkLT applies the LT predicate on the "to_network" field.
func ToNetworkLT(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldLT(FieldToNetwork, v))
}

// ToNetworkLTE applies the LTE predicate on the "to_network" field.
func ToNetworkLTE(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldLTE(FieldToNetwork, v))
}

// ToNetworkContains applies the Contains predicate on the "to_network" field.
func ToNetworkContains(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldContains(FieldToNetwork, v))
}

// ToNetworkHasPrefix applies the HasPrefix predicate on the "to_network" field.
func ToNetworkHasPrefix(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldHasPrefix(FieldToNetwork, v))
}

// ToNetworkHasSuffix applies the HasSuffix predicate on the "to_network" field.
func ToNetworkHasSuffix(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldHasSuffix(FieldToNetwork, v))
}

// ToNetworkIsNil applies the IsNil predicate on the "to_network" field.
func ToNetworkIsNil() predicate.Swaps {
	return predicate.Swaps(sql.FieldIsNull(FieldToNetwork))
}

// ToNetworkNotNil applies the NotNil predicate on the "to_network" field.
func ToNetworkNotNil() predicate.Swaps {
	return predicate.Swaps(sql.FieldNotNull(FieldToNetwork))
}

// ToNetworkEqualFold applies the EqualFold predicate on the "to_network" field.
func ToNetworkEqualFold(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldEqualFold(FieldToNetwork, v))
}

// ToNetworkContainsFold applies the ContainsFold predicate on the "to_network" field.
func ToNetworkContainsFold(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldContainsFold(FieldToNetwork, v))
}

// FromNetworkEQ applies the EQ predicate on the "from_network" field.
func FromNetworkEQ(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldEQ(FieldFromNetwork, v))
}

// FromNetworkNEQ applies the NEQ predicate on the "from_network" field.
func FromNetworkNEQ(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldNEQ(FieldFromNetwork, v))
}

// FromNetworkIn applies the In predicate on the "from_network" field.
func FromNetworkIn(vs ...string) predicate.Swaps {
	return predicate.Swaps(sql.FieldIn(FieldFromNetwork, vs...))
}

// FromNetworkNotIn applies the NotIn predicate on the "from_network" field.
func FromNetworkNotIn(vs ...string) predicate.Swaps {
	return predicate.Swaps(sql.FieldNotIn(FieldFromNetwork, vs...))
}

// FromNetworkGT applies the GT predicate on the "from_network" field.
func FromNetworkGT(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldGT(FieldFromNetwork, v))
}

// FromNetworkGTE applies the GTE predicate on the "from_network" field.
func FromNetworkGTE(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldGTE(FieldFromNetwork, v))
}

// FromNetworkLT applies the LT predicate on the "from_network" field.
func FromNetworkLT(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldLT(FieldFromNetwork, v))
}

// FromNetworkLTE applies the LTE predicate on the "from_network" field.
func FromNetworkLTE(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldLTE(FieldFromNetwork, v))
}

// FromNetworkContains applies the Contains predicate on the "from_network" field.
func FromNetworkContains(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldContains(FieldFromNetwork, v))
}

// FromNetworkHasPrefix applies the HasPrefix predicate on the "from_network" field.
func FromNetworkHasPrefix(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldHasPrefix(FieldFromNetwork, v))
}

// FromNetworkHasSuffix applies the HasSuffix predicate on the "from_network" field.
func FromNetworkHasSuffix(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldHasSuffix(FieldFromNetwork, v))
}

// FromNetworkIsNil applies the IsNil predicate on the "from_network" field.
func FromNetworkIsNil() predicate.Swaps {
	return predicate.Swaps(sql.FieldIsNull(FieldFromNetwork))
}

// FromNetworkNotNil applies the NotNil predicate on the "from_network" field.
func FromNetworkNotNil() predicate.Swaps {
	return predicate.Swaps(sql.FieldNotNull(FieldFromNetwork))
}

// FromNetworkEqualFold applies the EqualFold predicate on the "from_network" field.
func FromNetworkEqualFold(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldEqualFold(FieldFromNetwork, v))
}

// FromNetworkContainsFold applies the ContainsFold predicate on the "from_network" field.
func FromNetworkContainsFold(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldContainsFold(FieldFromNetwork, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...string) predicate.Swaps {
	return predicate.Swaps(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...string) predicate.Swaps {
	return predicate.Swaps(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldLTE(FieldAmount, v))
}

// AmountContains applies the Contains predicate on the "amount" field.
func AmountContains(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldContains(FieldAmount, v))
}

// AmountHasPrefix applies the HasPrefix predicate on the "amount" field.
func AmountHasPrefix(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldHasPrefix(FieldAmount, v))
}

// AmountHasSuffix applies the HasSuffix predicate on the "amount" field.
func AmountHasSuffix(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldHasSuffix(FieldAmount, v))
}

// AmountIsNil applies the IsNil predicate on the "amount" field.
func AmountIsNil() predicate.Swaps {
	return predicate.Swaps(sql.FieldIsNull(FieldAmount))
}

// AmountNotNil applies the NotNil predicate on the "amount" field.
func AmountNotNil() predicate.Swaps {
	return predicate.Swaps(sql.FieldNotNull(FieldAmount))
}

// AmountEqualFold applies the EqualFold predicate on the "amount" field.
func AmountEqualFold(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldEqualFold(FieldAmount, v))
}

// AmountContainsFold applies the ContainsFold predicate on the "amount" field.
func AmountContainsFold(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldContainsFold(FieldAmount, v))
}

// AmountReciveEQ applies the EQ predicate on the "amountRecive" field.
func AmountReciveEQ(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldEQ(FieldAmountRecive, v))
}

// AmountReciveNEQ applies the NEQ predicate on the "amountRecive" field.
func AmountReciveNEQ(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldNEQ(FieldAmountRecive, v))
}

// AmountReciveIn applies the In predicate on the "amountRecive" field.
func AmountReciveIn(vs ...string) predicate.Swaps {
	return predicate.Swaps(sql.FieldIn(FieldAmountRecive, vs...))
}

// AmountReciveNotIn applies the NotIn predicate on the "amountRecive" field.
func AmountReciveNotIn(vs ...string) predicate.Swaps {
	return predicate.Swaps(sql.FieldNotIn(FieldAmountRecive, vs...))
}

// AmountReciveGT applies the GT predicate on the "amountRecive" field.
func AmountReciveGT(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldGT(FieldAmountRecive, v))
}

// AmountReciveGTE applies the GTE predicate on the "amountRecive" field.
func AmountReciveGTE(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldGTE(FieldAmountRecive, v))
}

// AmountReciveLT applies the LT predicate on the "amountRecive" field.
func AmountReciveLT(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldLT(FieldAmountRecive, v))
}

// AmountReciveLTE applies the LTE predicate on the "amountRecive" field.
func AmountReciveLTE(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldLTE(FieldAmountRecive, v))
}

// AmountReciveContains applies the Contains predicate on the "amountRecive" field.
func AmountReciveContains(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldContains(FieldAmountRecive, v))
}

// AmountReciveHasPrefix applies the HasPrefix predicate on the "amountRecive" field.
func AmountReciveHasPrefix(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldHasPrefix(FieldAmountRecive, v))
}

// AmountReciveHasSuffix applies the HasSuffix predicate on the "amountRecive" field.
func AmountReciveHasSuffix(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldHasSuffix(FieldAmountRecive, v))
}

// AmountReciveIsNil applies the IsNil predicate on the "amountRecive" field.
func AmountReciveIsNil() predicate.Swaps {
	return predicate.Swaps(sql.FieldIsNull(FieldAmountRecive))
}

// AmountReciveNotNil applies the NotNil predicate on the "amountRecive" field.
func AmountReciveNotNil() predicate.Swaps {
	return predicate.Swaps(sql.FieldNotNull(FieldAmountRecive))
}

// AmountReciveEqualFold applies the EqualFold predicate on the "amountRecive" field.
func AmountReciveEqualFold(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldEqualFold(FieldAmountRecive, v))
}

// AmountReciveContainsFold applies the ContainsFold predicate on the "amountRecive" field.
func AmountReciveContainsFold(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldContainsFold(FieldAmountRecive, v))
}

// RefundAddressEQ applies the EQ predicate on the "refund_address" field.
func RefundAddressEQ(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldEQ(FieldRefundAddress, v))
}

// RefundAddressNEQ applies the NEQ predicate on the "refund_address" field.
func RefundAddressNEQ(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldNEQ(FieldRefundAddress, v))
}

// RefundAddressIn applies the In predicate on the "refund_address" field.
func RefundAddressIn(vs ...string) predicate.Swaps {
	return predicate.Swaps(sql.FieldIn(FieldRefundAddress, vs...))
}

// RefundAddressNotIn applies the NotIn predicate on the "refund_address" field.
func RefundAddressNotIn(vs ...string) predicate.Swaps {
	return predicate.Swaps(sql.FieldNotIn(FieldRefundAddress, vs...))
}

// RefundAddressGT applies the GT predicate on the "refund_address" field.
func RefundAddressGT(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldGT(FieldRefundAddress, v))
}

// RefundAddressGTE applies the GTE predicate on the "refund_address" field.
func RefundAddressGTE(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldGTE(FieldRefundAddress, v))
}

// RefundAddressLT applies the LT predicate on the "refund_address" field.
func RefundAddressLT(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldLT(FieldRefundAddress, v))
}

// RefundAddressLTE applies the LTE predicate on the "refund_address" field.
func RefundAddressLTE(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldLTE(FieldRefundAddress, v))
}

// RefundAddressContains applies the Contains predicate on the "refund_address" field.
func RefundAddressContains(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldContains(FieldRefundAddress, v))
}

// RefundAddressHasPrefix applies the HasPrefix predicate on the "refund_address" field.
func RefundAddressHasPrefix(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldHasPrefix(FieldRefundAddress, v))
}

// RefundAddressHasSuffix applies the HasSuffix predicate on the "refund_address" field.
func RefundAddressHasSuffix(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldHasSuffix(FieldRefundAddress, v))
}

// RefundAddressIsNil applies the IsNil predicate on the "refund_address" field.
func RefundAddressIsNil() predicate.Swaps {
	return predicate.Swaps(sql.FieldIsNull(FieldRefundAddress))
}

// RefundAddressNotNil applies the NotNil predicate on the "refund_address" field.
func RefundAddressNotNil() predicate.Swaps {
	return predicate.Swaps(sql.FieldNotNull(FieldRefundAddress))
}

// RefundAddressEqualFold applies the EqualFold predicate on the "refund_address" field.
func RefundAddressEqualFold(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldEqualFold(FieldRefundAddress, v))
}

// RefundAddressContainsFold applies the ContainsFold predicate on the "refund_address" field.
func RefundAddressContainsFold(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldContainsFold(FieldRefundAddress, v))
}

// SwapIDEQ applies the EQ predicate on the "swap_id" field.
func SwapIDEQ(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldEQ(FieldSwapID, v))
}

// SwapIDNEQ applies the NEQ predicate on the "swap_id" field.
func SwapIDNEQ(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldNEQ(FieldSwapID, v))
}

// SwapIDIn applies the In predicate on the "swap_id" field.
func SwapIDIn(vs ...string) predicate.Swaps {
	return predicate.Swaps(sql.FieldIn(FieldSwapID, vs...))
}

// SwapIDNotIn applies the NotIn predicate on the "swap_id" field.
func SwapIDNotIn(vs ...string) predicate.Swaps {
	return predicate.Swaps(sql.FieldNotIn(FieldSwapID, vs...))
}

// SwapIDGT applies the GT predicate on the "swap_id" field.
func SwapIDGT(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldGT(FieldSwapID, v))
}

// SwapIDGTE applies the GTE predicate on the "swap_id" field.
func SwapIDGTE(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldGTE(FieldSwapID, v))
}

// SwapIDLT applies the LT predicate on the "swap_id" field.
func SwapIDLT(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldLT(FieldSwapID, v))
}

// SwapIDLTE applies the LTE predicate on the "swap_id" field.
func SwapIDLTE(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldLTE(FieldSwapID, v))
}

// SwapIDContains applies the Contains predicate on the "swap_id" field.
func SwapIDContains(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldContains(FieldSwapID, v))
}

// SwapIDHasPrefix applies the HasPrefix predicate on the "swap_id" field.
func SwapIDHasPrefix(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldHasPrefix(FieldSwapID, v))
}

// SwapIDHasSuffix applies the HasSuffix predicate on the "swap_id" field.
func SwapIDHasSuffix(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldHasSuffix(FieldSwapID, v))
}

// SwapIDIsNil applies the IsNil predicate on the "swap_id" field.
func SwapIDIsNil() predicate.Swaps {
	return predicate.Swaps(sql.FieldIsNull(FieldSwapID))
}

// SwapIDNotNil applies the NotNil predicate on the "swap_id" field.
func SwapIDNotNil() predicate.Swaps {
	return predicate.Swaps(sql.FieldNotNull(FieldSwapID))
}

// SwapIDEqualFold applies the EqualFold predicate on the "swap_id" field.
func SwapIDEqualFold(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldEqualFold(FieldSwapID, v))
}

// SwapIDContainsFold applies the ContainsFold predicate on the "swap_id" field.
func SwapIDContainsFold(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldContainsFold(FieldSwapID, v))
}

// ExtraIDEQ applies the EQ predicate on the "extra_id" field.
func ExtraIDEQ(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldEQ(FieldExtraID, v))
}

// ExtraIDNEQ applies the NEQ predicate on the "extra_id" field.
func ExtraIDNEQ(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldNEQ(FieldExtraID, v))
}

// ExtraIDIn applies the In predicate on the "extra_id" field.
func ExtraIDIn(vs ...string) predicate.Swaps {
	return predicate.Swaps(sql.FieldIn(FieldExtraID, vs...))
}

// ExtraIDNotIn applies the NotIn predicate on the "extra_id" field.
func ExtraIDNotIn(vs ...string) predicate.Swaps {
	return predicate.Swaps(sql.FieldNotIn(FieldExtraID, vs...))
}

// ExtraIDGT applies the GT predicate on the "extra_id" field.
func ExtraIDGT(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldGT(FieldExtraID, v))
}

// ExtraIDGTE applies the GTE predicate on the "extra_id" field.
func ExtraIDGTE(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldGTE(FieldExtraID, v))
}

// ExtraIDLT applies the LT predicate on the "extra_id" field.
func ExtraIDLT(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldLT(FieldExtraID, v))
}

// ExtraIDLTE applies the LTE predicate on the "extra_id" field.
func ExtraIDLTE(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldLTE(FieldExtraID, v))
}

// ExtraIDContains applies the Contains predicate on the "extra_id" field.
func ExtraIDContains(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldContains(FieldExtraID, v))
}

// ExtraIDHasPrefix applies the HasPrefix predicate on the "extra_id" field.
func ExtraIDHasPrefix(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldHasPrefix(FieldExtraID, v))
}

// ExtraIDHasSuffix applies the HasSuffix predicate on the "extra_id" field.
func ExtraIDHasSuffix(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldHasSuffix(FieldExtraID, v))
}

// ExtraIDIsNil applies the IsNil predicate on the "extra_id" field.
func ExtraIDIsNil() predicate.Swaps {
	return predicate.Swaps(sql.FieldIsNull(FieldExtraID))
}

// ExtraIDNotNil applies the NotNil predicate on the "extra_id" field.
func ExtraIDNotNil() predicate.Swaps {
	return predicate.Swaps(sql.FieldNotNull(FieldExtraID))
}

// ExtraIDEqualFold applies the EqualFold predicate on the "extra_id" field.
func ExtraIDEqualFold(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldEqualFold(FieldExtraID, v))
}

// ExtraIDContainsFold applies the ContainsFold predicate on the "extra_id" field.
func ExtraIDContainsFold(v string) predicate.Swaps {
	return predicate.Swaps(sql.FieldContainsFold(FieldExtraID, v))
}

// InvoiceIDEQ applies the EQ predicate on the "invoiceID" field.
func InvoiceIDEQ(v int64) predicate.Swaps {
	return predicate.Swaps(sql.FieldEQ(FieldInvoiceID, v))
}

// InvoiceIDNEQ applies the NEQ predicate on the "invoiceID" field.
func InvoiceIDNEQ(v int64) predicate.Swaps {
	return predicate.Swaps(sql.FieldNEQ(FieldInvoiceID, v))
}

// InvoiceIDIn applies the In predicate on the "invoiceID" field.
func InvoiceIDIn(vs ...int64) predicate.Swaps {
	return predicate.Swaps(sql.FieldIn(FieldInvoiceID, vs...))
}

// InvoiceIDNotIn applies the NotIn predicate on the "invoiceID" field.
func InvoiceIDNotIn(vs ...int64) predicate.Swaps {
	return predicate.Swaps(sql.FieldNotIn(FieldInvoiceID, vs...))
}

// InvoiceIDGT applies the GT predicate on the "invoiceID" field.
func InvoiceIDGT(v int64) predicate.Swaps {
	return predicate.Swaps(sql.FieldGT(FieldInvoiceID, v))
}

// InvoiceIDGTE applies the GTE predicate on the "invoiceID" field.
func InvoiceIDGTE(v int64) predicate.Swaps {
	return predicate.Swaps(sql.FieldGTE(FieldInvoiceID, v))
}

// InvoiceIDLT applies the LT predicate on the "invoiceID" field.
func InvoiceIDLT(v int64) predicate.Swaps {
	return predicate.Swaps(sql.FieldLT(FieldInvoiceID, v))
}

// InvoiceIDLTE applies the LTE predicate on the "invoiceID" field.
func InvoiceIDLTE(v int64) predicate.Swaps {
	return predicate.Swaps(sql.FieldLTE(FieldInvoiceID, v))
}

// InvoiceIDIsNil applies the IsNil predicate on the "invoiceID" field.
func InvoiceIDIsNil() predicate.Swaps {
	return predicate.Swaps(sql.FieldIsNull(FieldInvoiceID))
}

// InvoiceIDNotNil applies the NotNil predicate on the "invoiceID" field.
func InvoiceIDNotNil() predicate.Swaps {
	return predicate.Swaps(sql.FieldNotNull(FieldInvoiceID))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Swaps {
	return predicate.Swaps(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Swaps {
	return predicate.Swaps(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Swaps) predicate.Swaps {
	return predicate.Swaps(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Swaps) predicate.Swaps {
	return predicate.Swaps(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Swaps) predicate.Swaps {
	return predicate.Swaps(func(s *sql.Selector) {
		p(s.Not())
	})
}
