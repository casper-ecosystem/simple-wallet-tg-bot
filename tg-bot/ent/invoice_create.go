// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/invoice"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/invoices_payments"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/user"
)

// InvoiceCreate is the builder for creating a Invoice entity.
type InvoiceCreate struct {
	config
	mutation *InvoiceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (ic *InvoiceCreate) SetName(s string) *InvoiceCreate {
	ic.mutation.SetName(s)
	return ic
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ic *InvoiceCreate) SetNillableName(s *string) *InvoiceCreate {
	if s != nil {
		ic.SetName(*s)
	}
	return ic
}

// SetAddress sets the "address" field.
func (ic *InvoiceCreate) SetAddress(s string) *InvoiceCreate {
	ic.mutation.SetAddress(s)
	return ic
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (ic *InvoiceCreate) SetNillableAddress(s *string) *InvoiceCreate {
	if s != nil {
		ic.SetAddress(*s)
	}
	return ic
}

// SetAmount sets the "amount" field.
func (ic *InvoiceCreate) SetAmount(s string) *InvoiceCreate {
	ic.mutation.SetAmount(s)
	return ic
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (ic *InvoiceCreate) SetNillableAmount(s *string) *InvoiceCreate {
	if s != nil {
		ic.SetAmount(*s)
	}
	return ic
}

// SetCurrency sets the "currency" field.
func (ic *InvoiceCreate) SetCurrency(s string) *InvoiceCreate {
	ic.mutation.SetCurrency(s)
	return ic
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (ic *InvoiceCreate) SetNillableCurrency(s *string) *InvoiceCreate {
	if s != nil {
		ic.SetCurrency(*s)
	}
	return ic
}

// SetComment sets the "comment" field.
func (ic *InvoiceCreate) SetComment(s string) *InvoiceCreate {
	ic.mutation.SetComment(s)
	return ic
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (ic *InvoiceCreate) SetNillableComment(s *string) *InvoiceCreate {
	if s != nil {
		ic.SetComment(*s)
	}
	return ic
}

// SetActive sets the "active" field.
func (ic *InvoiceCreate) SetActive(b bool) *InvoiceCreate {
	ic.mutation.SetActive(b)
	return ic
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (ic *InvoiceCreate) SetNillableActive(b *bool) *InvoiceCreate {
	if b != nil {
		ic.SetActive(*b)
	}
	return ic
}

// SetRepeatability sets the "repeatability" field.
func (ic *InvoiceCreate) SetRepeatability(i int) *InvoiceCreate {
	ic.mutation.SetRepeatability(i)
	return ic
}

// SetNillableRepeatability sets the "repeatability" field if the given value is not nil.
func (ic *InvoiceCreate) SetNillableRepeatability(i *int) *InvoiceCreate {
	if i != nil {
		ic.SetRepeatability(*i)
	}
	return ic
}

// SetPaid sets the "paid" field.
func (ic *InvoiceCreate) SetPaid(i int) *InvoiceCreate {
	ic.mutation.SetPaid(i)
	return ic
}

// SetNillablePaid sets the "paid" field if the given value is not nil.
func (ic *InvoiceCreate) SetNillablePaid(i *int) *InvoiceCreate {
	if i != nil {
		ic.SetPaid(*i)
	}
	return ic
}

// SetShort sets the "short" field.
func (ic *InvoiceCreate) SetShort(s string) *InvoiceCreate {
	ic.mutation.SetShort(s)
	return ic
}

// SetNillableShort sets the "short" field if the given value is not nil.
func (ic *InvoiceCreate) SetNillableShort(s *string) *InvoiceCreate {
	if s != nil {
		ic.SetShort(*s)
	}
	return ic
}

// SetMemo sets the "memo" field.
func (ic *InvoiceCreate) SetMemo(u uint64) *InvoiceCreate {
	ic.mutation.SetMemo(u)
	return ic
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (ic *InvoiceCreate) SetNillableMemo(u *uint64) *InvoiceCreate {
	if u != nil {
		ic.SetMemo(*u)
	}
	return ic
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (ic *InvoiceCreate) SetOwnerID(id int64) *InvoiceCreate {
	ic.mutation.SetOwnerID(id)
	return ic
}

// SetOwner sets the "owner" edge to the User entity.
func (ic *InvoiceCreate) SetOwner(u *User) *InvoiceCreate {
	return ic.SetOwnerID(u.ID)
}

// AddPaymentIDs adds the "payments" edge to the Invoices_payments entity by IDs.
func (ic *InvoiceCreate) AddPaymentIDs(ids ...int) *InvoiceCreate {
	ic.mutation.AddPaymentIDs(ids...)
	return ic
}

// AddPayments adds the "payments" edges to the Invoices_payments entity.
func (ic *InvoiceCreate) AddPayments(i ...*Invoices_payments) *InvoiceCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ic.AddPaymentIDs(ids...)
}

// Mutation returns the InvoiceMutation object of the builder.
func (ic *InvoiceCreate) Mutation() *InvoiceMutation {
	return ic.mutation
}

// Save creates the Invoice in the database.
func (ic *InvoiceCreate) Save(ctx context.Context) (*Invoice, error) {
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InvoiceCreate) SaveX(ctx context.Context) *Invoice {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *InvoiceCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *InvoiceCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *InvoiceCreate) check() error {
	if _, ok := ic.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "Invoice.owner"`)}
	}
	return nil
}

func (ic *InvoiceCreate) sqlSave(ctx context.Context) (*Invoice, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *InvoiceCreate) createSpec() (*Invoice, *sqlgraph.CreateSpec) {
	var (
		_node = &Invoice{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(invoice.Table, sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ic.conflict
	if value, ok := ic.mutation.Name(); ok {
		_spec.SetField(invoice.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ic.mutation.Address(); ok {
		_spec.SetField(invoice.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := ic.mutation.Amount(); ok {
		_spec.SetField(invoice.FieldAmount, field.TypeString, value)
		_node.Amount = value
	}
	if value, ok := ic.mutation.Currency(); ok {
		_spec.SetField(invoice.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := ic.mutation.Comment(); ok {
		_spec.SetField(invoice.FieldComment, field.TypeString, value)
		_node.Comment = value
	}
	if value, ok := ic.mutation.Active(); ok {
		_spec.SetField(invoice.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := ic.mutation.Repeatability(); ok {
		_spec.SetField(invoice.FieldRepeatability, field.TypeInt, value)
		_node.Repeatability = value
	}
	if value, ok := ic.mutation.Paid(); ok {
		_spec.SetField(invoice.FieldPaid, field.TypeInt, value)
		_node.Paid = value
	}
	if value, ok := ic.mutation.Short(); ok {
		_spec.SetField(invoice.FieldShort, field.TypeString, value)
		_node.Short = value
	}
	if value, ok := ic.mutation.Memo(); ok {
		_spec.SetField(invoice.FieldMemo, field.TypeUint64, value)
		_node.Memo = value
	}
	if nodes := ic.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.OwnerTable,
			Columns: []string{invoice.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_invoices = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.PaymentsTable,
			Columns: []string{invoice.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoices_payments.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Invoice.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InvoiceUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (ic *InvoiceCreate) OnConflict(opts ...sql.ConflictOption) *InvoiceUpsertOne {
	ic.conflict = opts
	return &InvoiceUpsertOne{
		create: ic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Invoice.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ic *InvoiceCreate) OnConflictColumns(columns ...string) *InvoiceUpsertOne {
	ic.conflict = append(ic.conflict, sql.ConflictColumns(columns...))
	return &InvoiceUpsertOne{
		create: ic,
	}
}

type (
	// InvoiceUpsertOne is the builder for "upsert"-ing
	//  one Invoice node.
	InvoiceUpsertOne struct {
		create *InvoiceCreate
	}

	// InvoiceUpsert is the "OnConflict" setter.
	InvoiceUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *InvoiceUpsert) SetName(v string) *InvoiceUpsert {
	u.Set(invoice.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *InvoiceUpsert) UpdateName() *InvoiceUpsert {
	u.SetExcluded(invoice.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *InvoiceUpsert) ClearName() *InvoiceUpsert {
	u.SetNull(invoice.FieldName)
	return u
}

// SetAddress sets the "address" field.
func (u *InvoiceUpsert) SetAddress(v string) *InvoiceUpsert {
	u.Set(invoice.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *InvoiceUpsert) UpdateAddress() *InvoiceUpsert {
	u.SetExcluded(invoice.FieldAddress)
	return u
}

// ClearAddress clears the value of the "address" field.
func (u *InvoiceUpsert) ClearAddress() *InvoiceUpsert {
	u.SetNull(invoice.FieldAddress)
	return u
}

// SetAmount sets the "amount" field.
func (u *InvoiceUpsert) SetAmount(v string) *InvoiceUpsert {
	u.Set(invoice.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *InvoiceUpsert) UpdateAmount() *InvoiceUpsert {
	u.SetExcluded(invoice.FieldAmount)
	return u
}

// ClearAmount clears the value of the "amount" field.
func (u *InvoiceUpsert) ClearAmount() *InvoiceUpsert {
	u.SetNull(invoice.FieldAmount)
	return u
}

// SetCurrency sets the "currency" field.
func (u *InvoiceUpsert) SetCurrency(v string) *InvoiceUpsert {
	u.Set(invoice.FieldCurrency, v)
	return u
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *InvoiceUpsert) UpdateCurrency() *InvoiceUpsert {
	u.SetExcluded(invoice.FieldCurrency)
	return u
}

// ClearCurrency clears the value of the "currency" field.
func (u *InvoiceUpsert) ClearCurrency() *InvoiceUpsert {
	u.SetNull(invoice.FieldCurrency)
	return u
}

// SetComment sets the "comment" field.
func (u *InvoiceUpsert) SetComment(v string) *InvoiceUpsert {
	u.Set(invoice.FieldComment, v)
	return u
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *InvoiceUpsert) UpdateComment() *InvoiceUpsert {
	u.SetExcluded(invoice.FieldComment)
	return u
}

// ClearComment clears the value of the "comment" field.
func (u *InvoiceUpsert) ClearComment() *InvoiceUpsert {
	u.SetNull(invoice.FieldComment)
	return u
}

// SetActive sets the "active" field.
func (u *InvoiceUpsert) SetActive(v bool) *InvoiceUpsert {
	u.Set(invoice.FieldActive, v)
	return u
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *InvoiceUpsert) UpdateActive() *InvoiceUpsert {
	u.SetExcluded(invoice.FieldActive)
	return u
}

// ClearActive clears the value of the "active" field.
func (u *InvoiceUpsert) ClearActive() *InvoiceUpsert {
	u.SetNull(invoice.FieldActive)
	return u
}

// SetRepeatability sets the "repeatability" field.
func (u *InvoiceUpsert) SetRepeatability(v int) *InvoiceUpsert {
	u.Set(invoice.FieldRepeatability, v)
	return u
}

// UpdateRepeatability sets the "repeatability" field to the value that was provided on create.
func (u *InvoiceUpsert) UpdateRepeatability() *InvoiceUpsert {
	u.SetExcluded(invoice.FieldRepeatability)
	return u
}

// AddRepeatability adds v to the "repeatability" field.
func (u *InvoiceUpsert) AddRepeatability(v int) *InvoiceUpsert {
	u.Add(invoice.FieldRepeatability, v)
	return u
}

// ClearRepeatability clears the value of the "repeatability" field.
func (u *InvoiceUpsert) ClearRepeatability() *InvoiceUpsert {
	u.SetNull(invoice.FieldRepeatability)
	return u
}

// SetPaid sets the "paid" field.
func (u *InvoiceUpsert) SetPaid(v int) *InvoiceUpsert {
	u.Set(invoice.FieldPaid, v)
	return u
}

// UpdatePaid sets the "paid" field to the value that was provided on create.
func (u *InvoiceUpsert) UpdatePaid() *InvoiceUpsert {
	u.SetExcluded(invoice.FieldPaid)
	return u
}

// AddPaid adds v to the "paid" field.
func (u *InvoiceUpsert) AddPaid(v int) *InvoiceUpsert {
	u.Add(invoice.FieldPaid, v)
	return u
}

// ClearPaid clears the value of the "paid" field.
func (u *InvoiceUpsert) ClearPaid() *InvoiceUpsert {
	u.SetNull(invoice.FieldPaid)
	return u
}

// SetShort sets the "short" field.
func (u *InvoiceUpsert) SetShort(v string) *InvoiceUpsert {
	u.Set(invoice.FieldShort, v)
	return u
}

// UpdateShort sets the "short" field to the value that was provided on create.
func (u *InvoiceUpsert) UpdateShort() *InvoiceUpsert {
	u.SetExcluded(invoice.FieldShort)
	return u
}

// ClearShort clears the value of the "short" field.
func (u *InvoiceUpsert) ClearShort() *InvoiceUpsert {
	u.SetNull(invoice.FieldShort)
	return u
}

// SetMemo sets the "memo" field.
func (u *InvoiceUpsert) SetMemo(v uint64) *InvoiceUpsert {
	u.Set(invoice.FieldMemo, v)
	return u
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *InvoiceUpsert) UpdateMemo() *InvoiceUpsert {
	u.SetExcluded(invoice.FieldMemo)
	return u
}

// AddMemo adds v to the "memo" field.
func (u *InvoiceUpsert) AddMemo(v uint64) *InvoiceUpsert {
	u.Add(invoice.FieldMemo, v)
	return u
}

// ClearMemo clears the value of the "memo" field.
func (u *InvoiceUpsert) ClearMemo() *InvoiceUpsert {
	u.SetNull(invoice.FieldMemo)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Invoice.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *InvoiceUpsertOne) UpdateNewValues() *InvoiceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Invoice.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *InvoiceUpsertOne) Ignore() *InvoiceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InvoiceUpsertOne) DoNothing() *InvoiceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InvoiceCreate.OnConflict
// documentation for more info.
func (u *InvoiceUpsertOne) Update(set func(*InvoiceUpsert)) *InvoiceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InvoiceUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *InvoiceUpsertOne) SetName(v string) *InvoiceUpsertOne {
	return u.Update(func(s *InvoiceUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *InvoiceUpsertOne) UpdateName() *InvoiceUpsertOne {
	return u.Update(func(s *InvoiceUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *InvoiceUpsertOne) ClearName() *InvoiceUpsertOne {
	return u.Update(func(s *InvoiceUpsert) {
		s.ClearName()
	})
}

// SetAddress sets the "address" field.
func (u *InvoiceUpsertOne) SetAddress(v string) *InvoiceUpsertOne {
	return u.Update(func(s *InvoiceUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *InvoiceUpsertOne) UpdateAddress() *InvoiceUpsertOne {
	return u.Update(func(s *InvoiceUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *InvoiceUpsertOne) ClearAddress() *InvoiceUpsertOne {
	return u.Update(func(s *InvoiceUpsert) {
		s.ClearAddress()
	})
}

// SetAmount sets the "amount" field.
func (u *InvoiceUpsertOne) SetAmount(v string) *InvoiceUpsertOne {
	return u.Update(func(s *InvoiceUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *InvoiceUpsertOne) UpdateAmount() *InvoiceUpsertOne {
	return u.Update(func(s *InvoiceUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *InvoiceUpsertOne) ClearAmount() *InvoiceUpsertOne {
	return u.Update(func(s *InvoiceUpsert) {
		s.ClearAmount()
	})
}

// SetCurrency sets the "currency" field.
func (u *InvoiceUpsertOne) SetCurrency(v string) *InvoiceUpsertOne {
	return u.Update(func(s *InvoiceUpsert) {
		s.SetCurrency(v)
	})
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *InvoiceUpsertOne) UpdateCurrency() *InvoiceUpsertOne {
	return u.Update(func(s *InvoiceUpsert) {
		s.UpdateCurrency()
	})
}

// ClearCurrency clears the value of the "currency" field.
func (u *InvoiceUpsertOne) ClearCurrency() *InvoiceUpsertOne {
	return u.Update(func(s *InvoiceUpsert) {
		s.ClearCurrency()
	})
}

// SetComment sets the "comment" field.
func (u *InvoiceUpsertOne) SetComment(v string) *InvoiceUpsertOne {
	return u.Update(func(s *InvoiceUpsert) {
		s.SetComment(v)
	})
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *InvoiceUpsertOne) UpdateComment() *InvoiceUpsertOne {
	return u.Update(func(s *InvoiceUpsert) {
		s.UpdateComment()
	})
}

// ClearComment clears the value of the "comment" field.
func (u *InvoiceUpsertOne) ClearComment() *InvoiceUpsertOne {
	return u.Update(func(s *InvoiceUpsert) {
		s.ClearComment()
	})
}

// SetActive sets the "active" field.
func (u *InvoiceUpsertOne) SetActive(v bool) *InvoiceUpsertOne {
	return u.Update(func(s *InvoiceUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *InvoiceUpsertOne) UpdateActive() *InvoiceUpsertOne {
	return u.Update(func(s *InvoiceUpsert) {
		s.UpdateActive()
	})
}

// ClearActive clears the value of the "active" field.
func (u *InvoiceUpsertOne) ClearActive() *InvoiceUpsertOne {
	return u.Update(func(s *InvoiceUpsert) {
		s.ClearActive()
	})
}

// SetRepeatability sets the "repeatability" field.
func (u *InvoiceUpsertOne) SetRepeatability(v int) *InvoiceUpsertOne {
	return u.Update(func(s *InvoiceUpsert) {
		s.SetRepeatability(v)
	})
}

// AddRepeatability adds v to the "repeatability" field.
func (u *InvoiceUpsertOne) AddRepeatability(v int) *InvoiceUpsertOne {
	return u.Update(func(s *InvoiceUpsert) {
		s.AddRepeatability(v)
	})
}

// UpdateRepeatability sets the "repeatability" field to the value that was provided on create.
func (u *InvoiceUpsertOne) UpdateRepeatability() *InvoiceUpsertOne {
	return u.Update(func(s *InvoiceUpsert) {
		s.UpdateRepeatability()
	})
}

// ClearRepeatability clears the value of the "repeatability" field.
func (u *InvoiceUpsertOne) ClearRepeatability() *InvoiceUpsertOne {
	return u.Update(func(s *InvoiceUpsert) {
		s.ClearRepeatability()
	})
}

// SetPaid sets the "paid" field.
func (u *InvoiceUpsertOne) SetPaid(v int) *InvoiceUpsertOne {
	return u.Update(func(s *InvoiceUpsert) {
		s.SetPaid(v)
	})
}

// AddPaid adds v to the "paid" field.
func (u *InvoiceUpsertOne) AddPaid(v int) *InvoiceUpsertOne {
	return u.Update(func(s *InvoiceUpsert) {
		s.AddPaid(v)
	})
}

// UpdatePaid sets the "paid" field to the value that was provided on create.
func (u *InvoiceUpsertOne) UpdatePaid() *InvoiceUpsertOne {
	return u.Update(func(s *InvoiceUpsert) {
		s.UpdatePaid()
	})
}

// ClearPaid clears the value of the "paid" field.
func (u *InvoiceUpsertOne) ClearPaid() *InvoiceUpsertOne {
	return u.Update(func(s *InvoiceUpsert) {
		s.ClearPaid()
	})
}

// SetShort sets the "short" field.
func (u *InvoiceUpsertOne) SetShort(v string) *InvoiceUpsertOne {
	return u.Update(func(s *InvoiceUpsert) {
		s.SetShort(v)
	})
}

// UpdateShort sets the "short" field to the value that was provided on create.
func (u *InvoiceUpsertOne) UpdateShort() *InvoiceUpsertOne {
	return u.Update(func(s *InvoiceUpsert) {
		s.UpdateShort()
	})
}

// ClearShort clears the value of the "short" field.
func (u *InvoiceUpsertOne) ClearShort() *InvoiceUpsertOne {
	return u.Update(func(s *InvoiceUpsert) {
		s.ClearShort()
	})
}

// SetMemo sets the "memo" field.
func (u *InvoiceUpsertOne) SetMemo(v uint64) *InvoiceUpsertOne {
	return u.Update(func(s *InvoiceUpsert) {
		s.SetMemo(v)
	})
}

// AddMemo adds v to the "memo" field.
func (u *InvoiceUpsertOne) AddMemo(v uint64) *InvoiceUpsertOne {
	return u.Update(func(s *InvoiceUpsert) {
		s.AddMemo(v)
	})
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *InvoiceUpsertOne) UpdateMemo() *InvoiceUpsertOne {
	return u.Update(func(s *InvoiceUpsert) {
		s.UpdateMemo()
	})
}

// ClearMemo clears the value of the "memo" field.
func (u *InvoiceUpsertOne) ClearMemo() *InvoiceUpsertOne {
	return u.Update(func(s *InvoiceUpsert) {
		s.ClearMemo()
	})
}

// Exec executes the query.
func (u *InvoiceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InvoiceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InvoiceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *InvoiceUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *InvoiceUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// InvoiceCreateBulk is the builder for creating many Invoice entities in bulk.
type InvoiceCreateBulk struct {
	config
	builders []*InvoiceCreate
	conflict []sql.ConflictOption
}

// Save creates the Invoice entities in the database.
func (icb *InvoiceCreateBulk) Save(ctx context.Context) ([]*Invoice, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Invoice, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InvoiceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = icb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *InvoiceCreateBulk) SaveX(ctx context.Context) []*Invoice {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *InvoiceCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *InvoiceCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Invoice.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InvoiceUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (icb *InvoiceCreateBulk) OnConflict(opts ...sql.ConflictOption) *InvoiceUpsertBulk {
	icb.conflict = opts
	return &InvoiceUpsertBulk{
		create: icb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Invoice.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (icb *InvoiceCreateBulk) OnConflictColumns(columns ...string) *InvoiceUpsertBulk {
	icb.conflict = append(icb.conflict, sql.ConflictColumns(columns...))
	return &InvoiceUpsertBulk{
		create: icb,
	}
}

// InvoiceUpsertBulk is the builder for "upsert"-ing
// a bulk of Invoice nodes.
type InvoiceUpsertBulk struct {
	create *InvoiceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Invoice.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *InvoiceUpsertBulk) UpdateNewValues() *InvoiceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Invoice.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *InvoiceUpsertBulk) Ignore() *InvoiceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InvoiceUpsertBulk) DoNothing() *InvoiceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InvoiceCreateBulk.OnConflict
// documentation for more info.
func (u *InvoiceUpsertBulk) Update(set func(*InvoiceUpsert)) *InvoiceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InvoiceUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *InvoiceUpsertBulk) SetName(v string) *InvoiceUpsertBulk {
	return u.Update(func(s *InvoiceUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *InvoiceUpsertBulk) UpdateName() *InvoiceUpsertBulk {
	return u.Update(func(s *InvoiceUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *InvoiceUpsertBulk) ClearName() *InvoiceUpsertBulk {
	return u.Update(func(s *InvoiceUpsert) {
		s.ClearName()
	})
}

// SetAddress sets the "address" field.
func (u *InvoiceUpsertBulk) SetAddress(v string) *InvoiceUpsertBulk {
	return u.Update(func(s *InvoiceUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *InvoiceUpsertBulk) UpdateAddress() *InvoiceUpsertBulk {
	return u.Update(func(s *InvoiceUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *InvoiceUpsertBulk) ClearAddress() *InvoiceUpsertBulk {
	return u.Update(func(s *InvoiceUpsert) {
		s.ClearAddress()
	})
}

// SetAmount sets the "amount" field.
func (u *InvoiceUpsertBulk) SetAmount(v string) *InvoiceUpsertBulk {
	return u.Update(func(s *InvoiceUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *InvoiceUpsertBulk) UpdateAmount() *InvoiceUpsertBulk {
	return u.Update(func(s *InvoiceUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *InvoiceUpsertBulk) ClearAmount() *InvoiceUpsertBulk {
	return u.Update(func(s *InvoiceUpsert) {
		s.ClearAmount()
	})
}

// SetCurrency sets the "currency" field.
func (u *InvoiceUpsertBulk) SetCurrency(v string) *InvoiceUpsertBulk {
	return u.Update(func(s *InvoiceUpsert) {
		s.SetCurrency(v)
	})
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *InvoiceUpsertBulk) UpdateCurrency() *InvoiceUpsertBulk {
	return u.Update(func(s *InvoiceUpsert) {
		s.UpdateCurrency()
	})
}

// ClearCurrency clears the value of the "currency" field.
func (u *InvoiceUpsertBulk) ClearCurrency() *InvoiceUpsertBulk {
	return u.Update(func(s *InvoiceUpsert) {
		s.ClearCurrency()
	})
}

// SetComment sets the "comment" field.
func (u *InvoiceUpsertBulk) SetComment(v string) *InvoiceUpsertBulk {
	return u.Update(func(s *InvoiceUpsert) {
		s.SetComment(v)
	})
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *InvoiceUpsertBulk) UpdateComment() *InvoiceUpsertBulk {
	return u.Update(func(s *InvoiceUpsert) {
		s.UpdateComment()
	})
}

// ClearComment clears the value of the "comment" field.
func (u *InvoiceUpsertBulk) ClearComment() *InvoiceUpsertBulk {
	return u.Update(func(s *InvoiceUpsert) {
		s.ClearComment()
	})
}

// SetActive sets the "active" field.
func (u *InvoiceUpsertBulk) SetActive(v bool) *InvoiceUpsertBulk {
	return u.Update(func(s *InvoiceUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *InvoiceUpsertBulk) UpdateActive() *InvoiceUpsertBulk {
	return u.Update(func(s *InvoiceUpsert) {
		s.UpdateActive()
	})
}

// ClearActive clears the value of the "active" field.
func (u *InvoiceUpsertBulk) ClearActive() *InvoiceUpsertBulk {
	return u.Update(func(s *InvoiceUpsert) {
		s.ClearActive()
	})
}

// SetRepeatability sets the "repeatability" field.
func (u *InvoiceUpsertBulk) SetRepeatability(v int) *InvoiceUpsertBulk {
	return u.Update(func(s *InvoiceUpsert) {
		s.SetRepeatability(v)
	})
}

// AddRepeatability adds v to the "repeatability" field.
func (u *InvoiceUpsertBulk) AddRepeatability(v int) *InvoiceUpsertBulk {
	return u.Update(func(s *InvoiceUpsert) {
		s.AddRepeatability(v)
	})
}

// UpdateRepeatability sets the "repeatability" field to the value that was provided on create.
func (u *InvoiceUpsertBulk) UpdateRepeatability() *InvoiceUpsertBulk {
	return u.Update(func(s *InvoiceUpsert) {
		s.UpdateRepeatability()
	})
}

// ClearRepeatability clears the value of the "repeatability" field.
func (u *InvoiceUpsertBulk) ClearRepeatability() *InvoiceUpsertBulk {
	return u.Update(func(s *InvoiceUpsert) {
		s.ClearRepeatability()
	})
}

// SetPaid sets the "paid" field.
func (u *InvoiceUpsertBulk) SetPaid(v int) *InvoiceUpsertBulk {
	return u.Update(func(s *InvoiceUpsert) {
		s.SetPaid(v)
	})
}

// AddPaid adds v to the "paid" field.
func (u *InvoiceUpsertBulk) AddPaid(v int) *InvoiceUpsertBulk {
	return u.Update(func(s *InvoiceUpsert) {
		s.AddPaid(v)
	})
}

// UpdatePaid sets the "paid" field to the value that was provided on create.
func (u *InvoiceUpsertBulk) UpdatePaid() *InvoiceUpsertBulk {
	return u.Update(func(s *InvoiceUpsert) {
		s.UpdatePaid()
	})
}

// ClearPaid clears the value of the "paid" field.
func (u *InvoiceUpsertBulk) ClearPaid() *InvoiceUpsertBulk {
	return u.Update(func(s *InvoiceUpsert) {
		s.ClearPaid()
	})
}

// SetShort sets the "short" field.
func (u *InvoiceUpsertBulk) SetShort(v string) *InvoiceUpsertBulk {
	return u.Update(func(s *InvoiceUpsert) {
		s.SetShort(v)
	})
}

// UpdateShort sets the "short" field to the value that was provided on create.
func (u *InvoiceUpsertBulk) UpdateShort() *InvoiceUpsertBulk {
	return u.Update(func(s *InvoiceUpsert) {
		s.UpdateShort()
	})
}

// ClearShort clears the value of the "short" field.
func (u *InvoiceUpsertBulk) ClearShort() *InvoiceUpsertBulk {
	return u.Update(func(s *InvoiceUpsert) {
		s.ClearShort()
	})
}

// SetMemo sets the "memo" field.
func (u *InvoiceUpsertBulk) SetMemo(v uint64) *InvoiceUpsertBulk {
	return u.Update(func(s *InvoiceUpsert) {
		s.SetMemo(v)
	})
}

// AddMemo adds v to the "memo" field.
func (u *InvoiceUpsertBulk) AddMemo(v uint64) *InvoiceUpsertBulk {
	return u.Update(func(s *InvoiceUpsert) {
		s.AddMemo(v)
	})
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *InvoiceUpsertBulk) UpdateMemo() *InvoiceUpsertBulk {
	return u.Update(func(s *InvoiceUpsert) {
		s.UpdateMemo()
	})
}

// ClearMemo clears the value of the "memo" field.
func (u *InvoiceUpsertBulk) ClearMemo() *InvoiceUpsertBulk {
	return u.Update(func(s *InvoiceUpsert) {
		s.ClearMemo()
	})
}

// Exec executes the query.
func (u *InvoiceUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the InvoiceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InvoiceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InvoiceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
