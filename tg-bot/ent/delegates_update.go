// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Simplewallethq/tg-bot/ent/delegates"
	"github.com/Simplewallethq/tg-bot/ent/predicate"
	"github.com/Simplewallethq/tg-bot/ent/user"
)

// DelegatesUpdate is the builder for updating Delegates entities.
type DelegatesUpdate struct {
	config
	hooks    []Hook
	mutation *DelegatesMutation
}

// Where appends a list predicates to the DelegatesUpdate builder.
func (du *DelegatesUpdate) Where(ps ...predicate.Delegates) *DelegatesUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetDelegator sets the "delegator" field.
func (du *DelegatesUpdate) SetDelegator(s string) *DelegatesUpdate {
	du.mutation.SetDelegator(s)
	return du
}

// SetValidator sets the "validator" field.
func (du *DelegatesUpdate) SetValidator(s string) *DelegatesUpdate {
	du.mutation.SetValidator(s)
	return du
}

// SetNillableValidator sets the "validator" field if the given value is not nil.
func (du *DelegatesUpdate) SetNillableValidator(s *string) *DelegatesUpdate {
	if s != nil {
		du.SetValidator(*s)
	}
	return du
}

// ClearValidator clears the value of the "validator" field.
func (du *DelegatesUpdate) ClearValidator() *DelegatesUpdate {
	du.mutation.ClearValidator()
	return du
}

// SetName sets the "name" field.
func (du *DelegatesUpdate) SetName(s string) *DelegatesUpdate {
	du.mutation.SetName(s)
	return du
}

// SetNillableName sets the "name" field if the given value is not nil.
func (du *DelegatesUpdate) SetNillableName(s *string) *DelegatesUpdate {
	if s != nil {
		du.SetName(*s)
	}
	return du
}

// ClearName clears the value of the "name" field.
func (du *DelegatesUpdate) ClearName() *DelegatesUpdate {
	du.mutation.ClearName()
	return du
}

// SetUserBalance sets the "user_balance" field.
func (du *DelegatesUpdate) SetUserBalance(s string) *DelegatesUpdate {
	du.mutation.SetUserBalance(s)
	return du
}

// SetNillableUserBalance sets the "user_balance" field if the given value is not nil.
func (du *DelegatesUpdate) SetNillableUserBalance(s *string) *DelegatesUpdate {
	if s != nil {
		du.SetUserBalance(*s)
	}
	return du
}

// ClearUserBalance clears the value of the "user_balance" field.
func (du *DelegatesUpdate) ClearUserBalance() *DelegatesUpdate {
	du.mutation.ClearUserBalance()
	return du
}

// SetAmount sets the "amount" field.
func (du *DelegatesUpdate) SetAmount(s string) *DelegatesUpdate {
	du.mutation.SetAmount(s)
	return du
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (du *DelegatesUpdate) SetNillableAmount(s *string) *DelegatesUpdate {
	if s != nil {
		du.SetAmount(*s)
	}
	return du
}

// ClearAmount clears the value of the "amount" field.
func (du *DelegatesUpdate) ClearAmount() *DelegatesUpdate {
	du.mutation.ClearAmount()
	return du
}

// SetCreatedAt sets the "created_at" field.
func (du *DelegatesUpdate) SetCreatedAt(t time.Time) *DelegatesUpdate {
	du.mutation.SetCreatedAt(t)
	return du
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (du *DelegatesUpdate) SetNillableCreatedAt(t *time.Time) *DelegatesUpdate {
	if t != nil {
		du.SetCreatedAt(*t)
	}
	return du
}

// ClearCreatedAt clears the value of the "created_at" field.
func (du *DelegatesUpdate) ClearCreatedAt() *DelegatesUpdate {
	du.mutation.ClearCreatedAt()
	return du
}

// SetStatus sets the "status" field.
func (du *DelegatesUpdate) SetStatus(s string) *DelegatesUpdate {
	du.mutation.SetStatus(s)
	return du
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (du *DelegatesUpdate) SetNillableStatus(s *string) *DelegatesUpdate {
	if s != nil {
		du.SetStatus(*s)
	}
	return du
}

// ClearStatus clears the value of the "status" field.
func (du *DelegatesUpdate) ClearStatus() *DelegatesUpdate {
	du.mutation.ClearStatus()
	return du
}

// SetDeploy sets the "Deploy" field.
func (du *DelegatesUpdate) SetDeploy(s string) *DelegatesUpdate {
	du.mutation.SetDeploy(s)
	return du
}

// SetNillableDeploy sets the "Deploy" field if the given value is not nil.
func (du *DelegatesUpdate) SetNillableDeploy(s *string) *DelegatesUpdate {
	if s != nil {
		du.SetDeploy(*s)
	}
	return du
}

// ClearDeploy clears the value of the "Deploy" field.
func (du *DelegatesUpdate) ClearDeploy() *DelegatesUpdate {
	du.mutation.ClearDeploy()
	return du
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (du *DelegatesUpdate) SetOwnerID(id int64) *DelegatesUpdate {
	du.mutation.SetOwnerID(id)
	return du
}

// SetOwner sets the "owner" edge to the User entity.
func (du *DelegatesUpdate) SetOwner(u *User) *DelegatesUpdate {
	return du.SetOwnerID(u.ID)
}

// Mutation returns the DelegatesMutation object of the builder.
func (du *DelegatesUpdate) Mutation() *DelegatesMutation {
	return du.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (du *DelegatesUpdate) ClearOwner() *DelegatesUpdate {
	du.mutation.ClearOwner()
	return du
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DelegatesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DelegatesUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DelegatesUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DelegatesUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DelegatesUpdate) check() error {
	if _, ok := du.mutation.OwnerID(); du.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Delegates.owner"`)
	}
	return nil
}

func (du *DelegatesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(delegates.Table, delegates.Columns, sqlgraph.NewFieldSpec(delegates.FieldID, field.TypeInt))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Delegator(); ok {
		_spec.SetField(delegates.FieldDelegator, field.TypeString, value)
	}
	if value, ok := du.mutation.Validator(); ok {
		_spec.SetField(delegates.FieldValidator, field.TypeString, value)
	}
	if du.mutation.ValidatorCleared() {
		_spec.ClearField(delegates.FieldValidator, field.TypeString)
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.SetField(delegates.FieldName, field.TypeString, value)
	}
	if du.mutation.NameCleared() {
		_spec.ClearField(delegates.FieldName, field.TypeString)
	}
	if value, ok := du.mutation.UserBalance(); ok {
		_spec.SetField(delegates.FieldUserBalance, field.TypeString, value)
	}
	if du.mutation.UserBalanceCleared() {
		_spec.ClearField(delegates.FieldUserBalance, field.TypeString)
	}
	if value, ok := du.mutation.Amount(); ok {
		_spec.SetField(delegates.FieldAmount, field.TypeString, value)
	}
	if du.mutation.AmountCleared() {
		_spec.ClearField(delegates.FieldAmount, field.TypeString)
	}
	if value, ok := du.mutation.CreatedAt(); ok {
		_spec.SetField(delegates.FieldCreatedAt, field.TypeTime, value)
	}
	if du.mutation.CreatedAtCleared() {
		_spec.ClearField(delegates.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := du.mutation.Status(); ok {
		_spec.SetField(delegates.FieldStatus, field.TypeString, value)
	}
	if du.mutation.StatusCleared() {
		_spec.ClearField(delegates.FieldStatus, field.TypeString)
	}
	if value, ok := du.mutation.Deploy(); ok {
		_spec.SetField(delegates.FieldDeploy, field.TypeString, value)
	}
	if du.mutation.DeployCleared() {
		_spec.ClearField(delegates.FieldDeploy, field.TypeString)
	}
	if du.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   delegates.OwnerTable,
			Columns: []string{delegates.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   delegates.OwnerTable,
			Columns: []string{delegates.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{delegates.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DelegatesUpdateOne is the builder for updating a single Delegates entity.
type DelegatesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DelegatesMutation
}

// SetDelegator sets the "delegator" field.
func (duo *DelegatesUpdateOne) SetDelegator(s string) *DelegatesUpdateOne {
	duo.mutation.SetDelegator(s)
	return duo
}

// SetValidator sets the "validator" field.
func (duo *DelegatesUpdateOne) SetValidator(s string) *DelegatesUpdateOne {
	duo.mutation.SetValidator(s)
	return duo
}

// SetNillableValidator sets the "validator" field if the given value is not nil.
func (duo *DelegatesUpdateOne) SetNillableValidator(s *string) *DelegatesUpdateOne {
	if s != nil {
		duo.SetValidator(*s)
	}
	return duo
}

// ClearValidator clears the value of the "validator" field.
func (duo *DelegatesUpdateOne) ClearValidator() *DelegatesUpdateOne {
	duo.mutation.ClearValidator()
	return duo
}

// SetName sets the "name" field.
func (duo *DelegatesUpdateOne) SetName(s string) *DelegatesUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (duo *DelegatesUpdateOne) SetNillableName(s *string) *DelegatesUpdateOne {
	if s != nil {
		duo.SetName(*s)
	}
	return duo
}

// ClearName clears the value of the "name" field.
func (duo *DelegatesUpdateOne) ClearName() *DelegatesUpdateOne {
	duo.mutation.ClearName()
	return duo
}

// SetUserBalance sets the "user_balance" field.
func (duo *DelegatesUpdateOne) SetUserBalance(s string) *DelegatesUpdateOne {
	duo.mutation.SetUserBalance(s)
	return duo
}

// SetNillableUserBalance sets the "user_balance" field if the given value is not nil.
func (duo *DelegatesUpdateOne) SetNillableUserBalance(s *string) *DelegatesUpdateOne {
	if s != nil {
		duo.SetUserBalance(*s)
	}
	return duo
}

// ClearUserBalance clears the value of the "user_balance" field.
func (duo *DelegatesUpdateOne) ClearUserBalance() *DelegatesUpdateOne {
	duo.mutation.ClearUserBalance()
	return duo
}

// SetAmount sets the "amount" field.
func (duo *DelegatesUpdateOne) SetAmount(s string) *DelegatesUpdateOne {
	duo.mutation.SetAmount(s)
	return duo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (duo *DelegatesUpdateOne) SetNillableAmount(s *string) *DelegatesUpdateOne {
	if s != nil {
		duo.SetAmount(*s)
	}
	return duo
}

// ClearAmount clears the value of the "amount" field.
func (duo *DelegatesUpdateOne) ClearAmount() *DelegatesUpdateOne {
	duo.mutation.ClearAmount()
	return duo
}

// SetCreatedAt sets the "created_at" field.
func (duo *DelegatesUpdateOne) SetCreatedAt(t time.Time) *DelegatesUpdateOne {
	duo.mutation.SetCreatedAt(t)
	return duo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (duo *DelegatesUpdateOne) SetNillableCreatedAt(t *time.Time) *DelegatesUpdateOne {
	if t != nil {
		duo.SetCreatedAt(*t)
	}
	return duo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (duo *DelegatesUpdateOne) ClearCreatedAt() *DelegatesUpdateOne {
	duo.mutation.ClearCreatedAt()
	return duo
}

// SetStatus sets the "status" field.
func (duo *DelegatesUpdateOne) SetStatus(s string) *DelegatesUpdateOne {
	duo.mutation.SetStatus(s)
	return duo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (duo *DelegatesUpdateOne) SetNillableStatus(s *string) *DelegatesUpdateOne {
	if s != nil {
		duo.SetStatus(*s)
	}
	return duo
}

// ClearStatus clears the value of the "status" field.
func (duo *DelegatesUpdateOne) ClearStatus() *DelegatesUpdateOne {
	duo.mutation.ClearStatus()
	return duo
}

// SetDeploy sets the "Deploy" field.
func (duo *DelegatesUpdateOne) SetDeploy(s string) *DelegatesUpdateOne {
	duo.mutation.SetDeploy(s)
	return duo
}

// SetNillableDeploy sets the "Deploy" field if the given value is not nil.
func (duo *DelegatesUpdateOne) SetNillableDeploy(s *string) *DelegatesUpdateOne {
	if s != nil {
		duo.SetDeploy(*s)
	}
	return duo
}

// ClearDeploy clears the value of the "Deploy" field.
func (duo *DelegatesUpdateOne) ClearDeploy() *DelegatesUpdateOne {
	duo.mutation.ClearDeploy()
	return duo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (duo *DelegatesUpdateOne) SetOwnerID(id int64) *DelegatesUpdateOne {
	duo.mutation.SetOwnerID(id)
	return duo
}

// SetOwner sets the "owner" edge to the User entity.
func (duo *DelegatesUpdateOne) SetOwner(u *User) *DelegatesUpdateOne {
	return duo.SetOwnerID(u.ID)
}

// Mutation returns the DelegatesMutation object of the builder.
func (duo *DelegatesUpdateOne) Mutation() *DelegatesMutation {
	return duo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (duo *DelegatesUpdateOne) ClearOwner() *DelegatesUpdateOne {
	duo.mutation.ClearOwner()
	return duo
}

// Where appends a list predicates to the DelegatesUpdate builder.
func (duo *DelegatesUpdateOne) Where(ps ...predicate.Delegates) *DelegatesUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DelegatesUpdateOne) Select(field string, fields ...string) *DelegatesUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Delegates entity.
func (duo *DelegatesUpdateOne) Save(ctx context.Context) (*Delegates, error) {
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DelegatesUpdateOne) SaveX(ctx context.Context) *Delegates {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DelegatesUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DelegatesUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DelegatesUpdateOne) check() error {
	if _, ok := duo.mutation.OwnerID(); duo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Delegates.owner"`)
	}
	return nil
}

func (duo *DelegatesUpdateOne) sqlSave(ctx context.Context) (_node *Delegates, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(delegates.Table, delegates.Columns, sqlgraph.NewFieldSpec(delegates.FieldID, field.TypeInt))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Delegates.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, delegates.FieldID)
		for _, f := range fields {
			if !delegates.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != delegates.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Delegator(); ok {
		_spec.SetField(delegates.FieldDelegator, field.TypeString, value)
	}
	if value, ok := duo.mutation.Validator(); ok {
		_spec.SetField(delegates.FieldValidator, field.TypeString, value)
	}
	if duo.mutation.ValidatorCleared() {
		_spec.ClearField(delegates.FieldValidator, field.TypeString)
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.SetField(delegates.FieldName, field.TypeString, value)
	}
	if duo.mutation.NameCleared() {
		_spec.ClearField(delegates.FieldName, field.TypeString)
	}
	if value, ok := duo.mutation.UserBalance(); ok {
		_spec.SetField(delegates.FieldUserBalance, field.TypeString, value)
	}
	if duo.mutation.UserBalanceCleared() {
		_spec.ClearField(delegates.FieldUserBalance, field.TypeString)
	}
	if value, ok := duo.mutation.Amount(); ok {
		_spec.SetField(delegates.FieldAmount, field.TypeString, value)
	}
	if duo.mutation.AmountCleared() {
		_spec.ClearField(delegates.FieldAmount, field.TypeString)
	}
	if value, ok := duo.mutation.CreatedAt(); ok {
		_spec.SetField(delegates.FieldCreatedAt, field.TypeTime, value)
	}
	if duo.mutation.CreatedAtCleared() {
		_spec.ClearField(delegates.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := duo.mutation.Status(); ok {
		_spec.SetField(delegates.FieldStatus, field.TypeString, value)
	}
	if duo.mutation.StatusCleared() {
		_spec.ClearField(delegates.FieldStatus, field.TypeString)
	}
	if value, ok := duo.mutation.Deploy(); ok {
		_spec.SetField(delegates.FieldDeploy, field.TypeString, value)
	}
	if duo.mutation.DeployCleared() {
		_spec.ClearField(delegates.FieldDeploy, field.TypeString)
	}
	if duo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   delegates.OwnerTable,
			Columns: []string{delegates.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   delegates.OwnerTable,
			Columns: []string{delegates.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Delegates{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{delegates.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
