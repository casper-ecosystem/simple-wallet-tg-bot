// Code generated by ent, DO NOT EDIT.

package invoices_payments

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the invoices_payments type in the database.
	Label = "invoices_payments"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFrom holds the string denoting the from field in the database.
	FieldFrom = "from"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldCorrect holds the string denoting the correct field in the database.
	FieldCorrect = "correct"
	// EdgeInvoice holds the string denoting the invoice edge name in mutations.
	EdgeInvoice = "invoice"
	// Table holds the table name of the invoices_payments in the database.
	Table = "invoices_payments"
	// InvoiceTable is the table that holds the invoice relation/edge.
	InvoiceTable = "invoices_payments"
	// InvoiceInverseTable is the table name for the Invoice entity.
	// It exists in this package in order to avoid circular dependency with the "invoice" package.
	InvoiceInverseTable = "invoices"
	// InvoiceColumn is the table column denoting the invoice relation/edge.
	InvoiceColumn = "invoice_payments"
)

// Columns holds all SQL columns for invoices_payments fields.
var Columns = []string{
	FieldID,
	FieldFrom,
	FieldAmount,
	FieldCorrect,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "invoices_payments"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"invoice_payments",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Invoices_payments queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFrom orders the results by the from field.
func ByFrom(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFrom, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByCorrect orders the results by the correct field.
func ByCorrect(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCorrect, opts...).ToFunc()
}

// ByInvoiceField orders the results by invoice field.
func ByInvoiceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInvoiceStep(), sql.OrderByField(field, opts...))
	}
}
func newInvoiceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InvoiceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, InvoiceTable, InvoiceColumn),
	)
}
