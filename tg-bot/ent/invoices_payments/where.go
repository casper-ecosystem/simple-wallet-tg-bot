// Code generated by ent, DO NOT EDIT.

package invoices_payments

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Simplewallethq/tg-bot/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldLTE(FieldID, id))
}

// From applies equality check predicate on the "from" field. It's identical to FromEQ.
func From(v string) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldEQ(FieldFrom, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v string) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldEQ(FieldAmount, v))
}

// Correct applies equality check predicate on the "correct" field. It's identical to CorrectEQ.
func Correct(v bool) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldEQ(FieldCorrect, v))
}

// FromEQ applies the EQ predicate on the "from" field.
func FromEQ(v string) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldEQ(FieldFrom, v))
}

// FromNEQ applies the NEQ predicate on the "from" field.
func FromNEQ(v string) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldNEQ(FieldFrom, v))
}

// FromIn applies the In predicate on the "from" field.
func FromIn(vs ...string) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldIn(FieldFrom, vs...))
}

// FromNotIn applies the NotIn predicate on the "from" field.
func FromNotIn(vs ...string) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldNotIn(FieldFrom, vs...))
}

// FromGT applies the GT predicate on the "from" field.
func FromGT(v string) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldGT(FieldFrom, v))
}

// FromGTE applies the GTE predicate on the "from" field.
func FromGTE(v string) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldGTE(FieldFrom, v))
}

// FromLT applies the LT predicate on the "from" field.
func FromLT(v string) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldLT(FieldFrom, v))
}

// FromLTE applies the LTE predicate on the "from" field.
func FromLTE(v string) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldLTE(FieldFrom, v))
}

// FromContains applies the Contains predicate on the "from" field.
func FromContains(v string) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldContains(FieldFrom, v))
}

// FromHasPrefix applies the HasPrefix predicate on the "from" field.
func FromHasPrefix(v string) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldHasPrefix(FieldFrom, v))
}

// FromHasSuffix applies the HasSuffix predicate on the "from" field.
func FromHasSuffix(v string) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldHasSuffix(FieldFrom, v))
}

// FromIsNil applies the IsNil predicate on the "from" field.
func FromIsNil() predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldIsNull(FieldFrom))
}

// FromNotNil applies the NotNil predicate on the "from" field.
func FromNotNil() predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldNotNull(FieldFrom))
}

// FromEqualFold applies the EqualFold predicate on the "from" field.
func FromEqualFold(v string) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldEqualFold(FieldFrom, v))
}

// FromContainsFold applies the ContainsFold predicate on the "from" field.
func FromContainsFold(v string) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldContainsFold(FieldFrom, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v string) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v string) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...string) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...string) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v string) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v string) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v string) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v string) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldLTE(FieldAmount, v))
}

// AmountContains applies the Contains predicate on the "amount" field.
func AmountContains(v string) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldContains(FieldAmount, v))
}

// AmountHasPrefix applies the HasPrefix predicate on the "amount" field.
func AmountHasPrefix(v string) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldHasPrefix(FieldAmount, v))
}

// AmountHasSuffix applies the HasSuffix predicate on the "amount" field.
func AmountHasSuffix(v string) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldHasSuffix(FieldAmount, v))
}

// AmountIsNil applies the IsNil predicate on the "amount" field.
func AmountIsNil() predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldIsNull(FieldAmount))
}

// AmountNotNil applies the NotNil predicate on the "amount" field.
func AmountNotNil() predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldNotNull(FieldAmount))
}

// AmountEqualFold applies the EqualFold predicate on the "amount" field.
func AmountEqualFold(v string) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldEqualFold(FieldAmount, v))
}

// AmountContainsFold applies the ContainsFold predicate on the "amount" field.
func AmountContainsFold(v string) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldContainsFold(FieldAmount, v))
}

// CorrectEQ applies the EQ predicate on the "correct" field.
func CorrectEQ(v bool) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldEQ(FieldCorrect, v))
}

// CorrectNEQ applies the NEQ predicate on the "correct" field.
func CorrectNEQ(v bool) predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldNEQ(FieldCorrect, v))
}

// CorrectIsNil applies the IsNil predicate on the "correct" field.
func CorrectIsNil() predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldIsNull(FieldCorrect))
}

// CorrectNotNil applies the NotNil predicate on the "correct" field.
func CorrectNotNil() predicate.Invoices_payments {
	return predicate.Invoices_payments(sql.FieldNotNull(FieldCorrect))
}

// HasInvoice applies the HasEdge predicate on the "invoice" edge.
func HasInvoice() predicate.Invoices_payments {
	return predicate.Invoices_payments(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InvoiceTable, InvoiceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInvoiceWith applies the HasEdge predicate on the "invoice" edge with a given conditions (other predicates).
func HasInvoiceWith(preds ...predicate.Invoice) predicate.Invoices_payments {
	return predicate.Invoices_payments(func(s *sql.Selector) {
		step := newInvoiceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Invoices_payments) predicate.Invoices_payments {
	return predicate.Invoices_payments(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Invoices_payments) predicate.Invoices_payments {
	return predicate.Invoices_payments(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Invoices_payments) predicate.Invoices_payments {
	return predicate.Invoices_payments(func(s *sql.Selector) {
		p(s.Not())
	})
}
