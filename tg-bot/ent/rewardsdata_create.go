// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/rewardsdata"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/user"
)

// RewardsDataCreate is the builder for creating a RewardsData entity.
type RewardsDataCreate struct {
	config
	mutation *RewardsDataMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetValidator sets the "validator" field.
func (rdc *RewardsDataCreate) SetValidator(s string) *RewardsDataCreate {
	rdc.mutation.SetValidator(s)
	return rdc
}

// SetAmount sets the "amount" field.
func (rdc *RewardsDataCreate) SetAmount(s string) *RewardsDataCreate {
	rdc.mutation.SetAmount(s)
	return rdc
}

// SetLastReward sets the "last_reward" field.
func (rdc *RewardsDataCreate) SetLastReward(t time.Time) *RewardsDataCreate {
	rdc.mutation.SetLastReward(t)
	return rdc
}

// SetFirstEra sets the "first_era" field.
func (rdc *RewardsDataCreate) SetFirstEra(i int64) *RewardsDataCreate {
	rdc.mutation.SetFirstEra(i)
	return rdc
}

// SetNillableFirstEra sets the "first_era" field if the given value is not nil.
func (rdc *RewardsDataCreate) SetNillableFirstEra(i *int64) *RewardsDataCreate {
	if i != nil {
		rdc.SetFirstEra(*i)
	}
	return rdc
}

// SetLastEra sets the "last_era" field.
func (rdc *RewardsDataCreate) SetLastEra(i int64) *RewardsDataCreate {
	rdc.mutation.SetLastEra(i)
	return rdc
}

// SetNillableLastEra sets the "last_era" field if the given value is not nil.
func (rdc *RewardsDataCreate) SetNillableLastEra(i *int64) *RewardsDataCreate {
	if i != nil {
		rdc.SetLastEra(*i)
	}
	return rdc
}

// SetFirstEraTimestamp sets the "first_era_timestamp" field.
func (rdc *RewardsDataCreate) SetFirstEraTimestamp(s string) *RewardsDataCreate {
	rdc.mutation.SetFirstEraTimestamp(s)
	return rdc
}

// SetLastEraTimestamp sets the "last_era_timestamp" field.
func (rdc *RewardsDataCreate) SetLastEraTimestamp(s string) *RewardsDataCreate {
	rdc.mutation.SetLastEraTimestamp(s)
	return rdc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (rdc *RewardsDataCreate) SetOwnerID(id int64) *RewardsDataCreate {
	rdc.mutation.SetOwnerID(id)
	return rdc
}

// SetOwner sets the "owner" edge to the User entity.
func (rdc *RewardsDataCreate) SetOwner(u *User) *RewardsDataCreate {
	return rdc.SetOwnerID(u.ID)
}

// Mutation returns the RewardsDataMutation object of the builder.
func (rdc *RewardsDataCreate) Mutation() *RewardsDataMutation {
	return rdc.mutation
}

// Save creates the RewardsData in the database.
func (rdc *RewardsDataCreate) Save(ctx context.Context) (*RewardsData, error) {
	rdc.defaults()
	return withHooks(ctx, rdc.sqlSave, rdc.mutation, rdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rdc *RewardsDataCreate) SaveX(ctx context.Context) *RewardsData {
	v, err := rdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rdc *RewardsDataCreate) Exec(ctx context.Context) error {
	_, err := rdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdc *RewardsDataCreate) ExecX(ctx context.Context) {
	if err := rdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rdc *RewardsDataCreate) defaults() {
	if _, ok := rdc.mutation.FirstEra(); !ok {
		v := rewardsdata.DefaultFirstEra
		rdc.mutation.SetFirstEra(v)
	}
	if _, ok := rdc.mutation.LastEra(); !ok {
		v := rewardsdata.DefaultLastEra
		rdc.mutation.SetLastEra(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rdc *RewardsDataCreate) check() error {
	if _, ok := rdc.mutation.Validator(); !ok {
		return &ValidationError{Name: "validator", err: errors.New(`ent: missing required field "RewardsData.validator"`)}
	}
	if _, ok := rdc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "RewardsData.amount"`)}
	}
	if _, ok := rdc.mutation.LastReward(); !ok {
		return &ValidationError{Name: "last_reward", err: errors.New(`ent: missing required field "RewardsData.last_reward"`)}
	}
	if _, ok := rdc.mutation.FirstEra(); !ok {
		return &ValidationError{Name: "first_era", err: errors.New(`ent: missing required field "RewardsData.first_era"`)}
	}
	if _, ok := rdc.mutation.LastEra(); !ok {
		return &ValidationError{Name: "last_era", err: errors.New(`ent: missing required field "RewardsData.last_era"`)}
	}
	if _, ok := rdc.mutation.FirstEraTimestamp(); !ok {
		return &ValidationError{Name: "first_era_timestamp", err: errors.New(`ent: missing required field "RewardsData.first_era_timestamp"`)}
	}
	if _, ok := rdc.mutation.LastEraTimestamp(); !ok {
		return &ValidationError{Name: "last_era_timestamp", err: errors.New(`ent: missing required field "RewardsData.last_era_timestamp"`)}
	}
	if _, ok := rdc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "RewardsData.owner"`)}
	}
	return nil
}

func (rdc *RewardsDataCreate) sqlSave(ctx context.Context) (*RewardsData, error) {
	if err := rdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rdc.mutation.id = &_node.ID
	rdc.mutation.done = true
	return _node, nil
}

func (rdc *RewardsDataCreate) createSpec() (*RewardsData, *sqlgraph.CreateSpec) {
	var (
		_node = &RewardsData{config: rdc.config}
		_spec = sqlgraph.NewCreateSpec(rewardsdata.Table, sqlgraph.NewFieldSpec(rewardsdata.FieldID, field.TypeInt))
	)
	_spec.OnConflict = rdc.conflict
	if value, ok := rdc.mutation.Validator(); ok {
		_spec.SetField(rewardsdata.FieldValidator, field.TypeString, value)
		_node.Validator = value
	}
	if value, ok := rdc.mutation.Amount(); ok {
		_spec.SetField(rewardsdata.FieldAmount, field.TypeString, value)
		_node.Amount = value
	}
	if value, ok := rdc.mutation.LastReward(); ok {
		_spec.SetField(rewardsdata.FieldLastReward, field.TypeTime, value)
		_node.LastReward = value
	}
	if value, ok := rdc.mutation.FirstEra(); ok {
		_spec.SetField(rewardsdata.FieldFirstEra, field.TypeInt64, value)
		_node.FirstEra = value
	}
	if value, ok := rdc.mutation.LastEra(); ok {
		_spec.SetField(rewardsdata.FieldLastEra, field.TypeInt64, value)
		_node.LastEra = value
	}
	if value, ok := rdc.mutation.FirstEraTimestamp(); ok {
		_spec.SetField(rewardsdata.FieldFirstEraTimestamp, field.TypeString, value)
		_node.FirstEraTimestamp = value
	}
	if value, ok := rdc.mutation.LastEraTimestamp(); ok {
		_spec.SetField(rewardsdata.FieldLastEraTimestamp, field.TypeString, value)
		_node.LastEraTimestamp = value
	}
	if nodes := rdc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rewardsdata.OwnerTable,
			Columns: []string{rewardsdata.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_rewards_data = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RewardsData.Create().
//		SetValidator(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RewardsDataUpsert) {
//			SetValidator(v+v).
//		}).
//		Exec(ctx)
func (rdc *RewardsDataCreate) OnConflict(opts ...sql.ConflictOption) *RewardsDataUpsertOne {
	rdc.conflict = opts
	return &RewardsDataUpsertOne{
		create: rdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RewardsData.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rdc *RewardsDataCreate) OnConflictColumns(columns ...string) *RewardsDataUpsertOne {
	rdc.conflict = append(rdc.conflict, sql.ConflictColumns(columns...))
	return &RewardsDataUpsertOne{
		create: rdc,
	}
}

type (
	// RewardsDataUpsertOne is the builder for "upsert"-ing
	//  one RewardsData node.
	RewardsDataUpsertOne struct {
		create *RewardsDataCreate
	}

	// RewardsDataUpsert is the "OnConflict" setter.
	RewardsDataUpsert struct {
		*sql.UpdateSet
	}
)

// SetValidator sets the "validator" field.
func (u *RewardsDataUpsert) SetValidator(v string) *RewardsDataUpsert {
	u.Set(rewardsdata.FieldValidator, v)
	return u
}

// UpdateValidator sets the "validator" field to the value that was provided on create.
func (u *RewardsDataUpsert) UpdateValidator() *RewardsDataUpsert {
	u.SetExcluded(rewardsdata.FieldValidator)
	return u
}

// SetAmount sets the "amount" field.
func (u *RewardsDataUpsert) SetAmount(v string) *RewardsDataUpsert {
	u.Set(rewardsdata.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *RewardsDataUpsert) UpdateAmount() *RewardsDataUpsert {
	u.SetExcluded(rewardsdata.FieldAmount)
	return u
}

// SetLastReward sets the "last_reward" field.
func (u *RewardsDataUpsert) SetLastReward(v time.Time) *RewardsDataUpsert {
	u.Set(rewardsdata.FieldLastReward, v)
	return u
}

// UpdateLastReward sets the "last_reward" field to the value that was provided on create.
func (u *RewardsDataUpsert) UpdateLastReward() *RewardsDataUpsert {
	u.SetExcluded(rewardsdata.FieldLastReward)
	return u
}

// SetFirstEra sets the "first_era" field.
func (u *RewardsDataUpsert) SetFirstEra(v int64) *RewardsDataUpsert {
	u.Set(rewardsdata.FieldFirstEra, v)
	return u
}

// UpdateFirstEra sets the "first_era" field to the value that was provided on create.
func (u *RewardsDataUpsert) UpdateFirstEra() *RewardsDataUpsert {
	u.SetExcluded(rewardsdata.FieldFirstEra)
	return u
}

// AddFirstEra adds v to the "first_era" field.
func (u *RewardsDataUpsert) AddFirstEra(v int64) *RewardsDataUpsert {
	u.Add(rewardsdata.FieldFirstEra, v)
	return u
}

// SetLastEra sets the "last_era" field.
func (u *RewardsDataUpsert) SetLastEra(v int64) *RewardsDataUpsert {
	u.Set(rewardsdata.FieldLastEra, v)
	return u
}

// UpdateLastEra sets the "last_era" field to the value that was provided on create.
func (u *RewardsDataUpsert) UpdateLastEra() *RewardsDataUpsert {
	u.SetExcluded(rewardsdata.FieldLastEra)
	return u
}

// AddLastEra adds v to the "last_era" field.
func (u *RewardsDataUpsert) AddLastEra(v int64) *RewardsDataUpsert {
	u.Add(rewardsdata.FieldLastEra, v)
	return u
}

// SetFirstEraTimestamp sets the "first_era_timestamp" field.
func (u *RewardsDataUpsert) SetFirstEraTimestamp(v string) *RewardsDataUpsert {
	u.Set(rewardsdata.FieldFirstEraTimestamp, v)
	return u
}

// UpdateFirstEraTimestamp sets the "first_era_timestamp" field to the value that was provided on create.
func (u *RewardsDataUpsert) UpdateFirstEraTimestamp() *RewardsDataUpsert {
	u.SetExcluded(rewardsdata.FieldFirstEraTimestamp)
	return u
}

// SetLastEraTimestamp sets the "last_era_timestamp" field.
func (u *RewardsDataUpsert) SetLastEraTimestamp(v string) *RewardsDataUpsert {
	u.Set(rewardsdata.FieldLastEraTimestamp, v)
	return u
}

// UpdateLastEraTimestamp sets the "last_era_timestamp" field to the value that was provided on create.
func (u *RewardsDataUpsert) UpdateLastEraTimestamp() *RewardsDataUpsert {
	u.SetExcluded(rewardsdata.FieldLastEraTimestamp)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.RewardsData.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RewardsDataUpsertOne) UpdateNewValues() *RewardsDataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RewardsData.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RewardsDataUpsertOne) Ignore() *RewardsDataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RewardsDataUpsertOne) DoNothing() *RewardsDataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RewardsDataCreate.OnConflict
// documentation for more info.
func (u *RewardsDataUpsertOne) Update(set func(*RewardsDataUpsert)) *RewardsDataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RewardsDataUpsert{UpdateSet: update})
	}))
	return u
}

// SetValidator sets the "validator" field.
func (u *RewardsDataUpsertOne) SetValidator(v string) *RewardsDataUpsertOne {
	return u.Update(func(s *RewardsDataUpsert) {
		s.SetValidator(v)
	})
}

// UpdateValidator sets the "validator" field to the value that was provided on create.
func (u *RewardsDataUpsertOne) UpdateValidator() *RewardsDataUpsertOne {
	return u.Update(func(s *RewardsDataUpsert) {
		s.UpdateValidator()
	})
}

// SetAmount sets the "amount" field.
func (u *RewardsDataUpsertOne) SetAmount(v string) *RewardsDataUpsertOne {
	return u.Update(func(s *RewardsDataUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *RewardsDataUpsertOne) UpdateAmount() *RewardsDataUpsertOne {
	return u.Update(func(s *RewardsDataUpsert) {
		s.UpdateAmount()
	})
}

// SetLastReward sets the "last_reward" field.
func (u *RewardsDataUpsertOne) SetLastReward(v time.Time) *RewardsDataUpsertOne {
	return u.Update(func(s *RewardsDataUpsert) {
		s.SetLastReward(v)
	})
}

// UpdateLastReward sets the "last_reward" field to the value that was provided on create.
func (u *RewardsDataUpsertOne) UpdateLastReward() *RewardsDataUpsertOne {
	return u.Update(func(s *RewardsDataUpsert) {
		s.UpdateLastReward()
	})
}

// SetFirstEra sets the "first_era" field.
func (u *RewardsDataUpsertOne) SetFirstEra(v int64) *RewardsDataUpsertOne {
	return u.Update(func(s *RewardsDataUpsert) {
		s.SetFirstEra(v)
	})
}

// AddFirstEra adds v to the "first_era" field.
func (u *RewardsDataUpsertOne) AddFirstEra(v int64) *RewardsDataUpsertOne {
	return u.Update(func(s *RewardsDataUpsert) {
		s.AddFirstEra(v)
	})
}

// UpdateFirstEra sets the "first_era" field to the value that was provided on create.
func (u *RewardsDataUpsertOne) UpdateFirstEra() *RewardsDataUpsertOne {
	return u.Update(func(s *RewardsDataUpsert) {
		s.UpdateFirstEra()
	})
}

// SetLastEra sets the "last_era" field.
func (u *RewardsDataUpsertOne) SetLastEra(v int64) *RewardsDataUpsertOne {
	return u.Update(func(s *RewardsDataUpsert) {
		s.SetLastEra(v)
	})
}

// AddLastEra adds v to the "last_era" field.
func (u *RewardsDataUpsertOne) AddLastEra(v int64) *RewardsDataUpsertOne {
	return u.Update(func(s *RewardsDataUpsert) {
		s.AddLastEra(v)
	})
}

// UpdateLastEra sets the "last_era" field to the value that was provided on create.
func (u *RewardsDataUpsertOne) UpdateLastEra() *RewardsDataUpsertOne {
	return u.Update(func(s *RewardsDataUpsert) {
		s.UpdateLastEra()
	})
}

// SetFirstEraTimestamp sets the "first_era_timestamp" field.
func (u *RewardsDataUpsertOne) SetFirstEraTimestamp(v string) *RewardsDataUpsertOne {
	return u.Update(func(s *RewardsDataUpsert) {
		s.SetFirstEraTimestamp(v)
	})
}

// UpdateFirstEraTimestamp sets the "first_era_timestamp" field to the value that was provided on create.
func (u *RewardsDataUpsertOne) UpdateFirstEraTimestamp() *RewardsDataUpsertOne {
	return u.Update(func(s *RewardsDataUpsert) {
		s.UpdateFirstEraTimestamp()
	})
}

// SetLastEraTimestamp sets the "last_era_timestamp" field.
func (u *RewardsDataUpsertOne) SetLastEraTimestamp(v string) *RewardsDataUpsertOne {
	return u.Update(func(s *RewardsDataUpsert) {
		s.SetLastEraTimestamp(v)
	})
}

// UpdateLastEraTimestamp sets the "last_era_timestamp" field to the value that was provided on create.
func (u *RewardsDataUpsertOne) UpdateLastEraTimestamp() *RewardsDataUpsertOne {
	return u.Update(func(s *RewardsDataUpsert) {
		s.UpdateLastEraTimestamp()
	})
}

// Exec executes the query.
func (u *RewardsDataUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RewardsDataCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RewardsDataUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RewardsDataUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RewardsDataUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RewardsDataCreateBulk is the builder for creating many RewardsData entities in bulk.
type RewardsDataCreateBulk struct {
	config
	builders []*RewardsDataCreate
	conflict []sql.ConflictOption
}

// Save creates the RewardsData entities in the database.
func (rdcb *RewardsDataCreateBulk) Save(ctx context.Context) ([]*RewardsData, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rdcb.builders))
	nodes := make([]*RewardsData, len(rdcb.builders))
	mutators := make([]Mutator, len(rdcb.builders))
	for i := range rdcb.builders {
		func(i int, root context.Context) {
			builder := rdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RewardsDataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rdcb *RewardsDataCreateBulk) SaveX(ctx context.Context) []*RewardsData {
	v, err := rdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rdcb *RewardsDataCreateBulk) Exec(ctx context.Context) error {
	_, err := rdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdcb *RewardsDataCreateBulk) ExecX(ctx context.Context) {
	if err := rdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RewardsData.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RewardsDataUpsert) {
//			SetValidator(v+v).
//		}).
//		Exec(ctx)
func (rdcb *RewardsDataCreateBulk) OnConflict(opts ...sql.ConflictOption) *RewardsDataUpsertBulk {
	rdcb.conflict = opts
	return &RewardsDataUpsertBulk{
		create: rdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RewardsData.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rdcb *RewardsDataCreateBulk) OnConflictColumns(columns ...string) *RewardsDataUpsertBulk {
	rdcb.conflict = append(rdcb.conflict, sql.ConflictColumns(columns...))
	return &RewardsDataUpsertBulk{
		create: rdcb,
	}
}

// RewardsDataUpsertBulk is the builder for "upsert"-ing
// a bulk of RewardsData nodes.
type RewardsDataUpsertBulk struct {
	create *RewardsDataCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RewardsData.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RewardsDataUpsertBulk) UpdateNewValues() *RewardsDataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RewardsData.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RewardsDataUpsertBulk) Ignore() *RewardsDataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RewardsDataUpsertBulk) DoNothing() *RewardsDataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RewardsDataCreateBulk.OnConflict
// documentation for more info.
func (u *RewardsDataUpsertBulk) Update(set func(*RewardsDataUpsert)) *RewardsDataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RewardsDataUpsert{UpdateSet: update})
	}))
	return u
}

// SetValidator sets the "validator" field.
func (u *RewardsDataUpsertBulk) SetValidator(v string) *RewardsDataUpsertBulk {
	return u.Update(func(s *RewardsDataUpsert) {
		s.SetValidator(v)
	})
}

// UpdateValidator sets the "validator" field to the value that was provided on create.
func (u *RewardsDataUpsertBulk) UpdateValidator() *RewardsDataUpsertBulk {
	return u.Update(func(s *RewardsDataUpsert) {
		s.UpdateValidator()
	})
}

// SetAmount sets the "amount" field.
func (u *RewardsDataUpsertBulk) SetAmount(v string) *RewardsDataUpsertBulk {
	return u.Update(func(s *RewardsDataUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *RewardsDataUpsertBulk) UpdateAmount() *RewardsDataUpsertBulk {
	return u.Update(func(s *RewardsDataUpsert) {
		s.UpdateAmount()
	})
}

// SetLastReward sets the "last_reward" field.
func (u *RewardsDataUpsertBulk) SetLastReward(v time.Time) *RewardsDataUpsertBulk {
	return u.Update(func(s *RewardsDataUpsert) {
		s.SetLastReward(v)
	})
}

// UpdateLastReward sets the "last_reward" field to the value that was provided on create.
func (u *RewardsDataUpsertBulk) UpdateLastReward() *RewardsDataUpsertBulk {
	return u.Update(func(s *RewardsDataUpsert) {
		s.UpdateLastReward()
	})
}

// SetFirstEra sets the "first_era" field.
func (u *RewardsDataUpsertBulk) SetFirstEra(v int64) *RewardsDataUpsertBulk {
	return u.Update(func(s *RewardsDataUpsert) {
		s.SetFirstEra(v)
	})
}

// AddFirstEra adds v to the "first_era" field.
func (u *RewardsDataUpsertBulk) AddFirstEra(v int64) *RewardsDataUpsertBulk {
	return u.Update(func(s *RewardsDataUpsert) {
		s.AddFirstEra(v)
	})
}

// UpdateFirstEra sets the "first_era" field to the value that was provided on create.
func (u *RewardsDataUpsertBulk) UpdateFirstEra() *RewardsDataUpsertBulk {
	return u.Update(func(s *RewardsDataUpsert) {
		s.UpdateFirstEra()
	})
}

// SetLastEra sets the "last_era" field.
func (u *RewardsDataUpsertBulk) SetLastEra(v int64) *RewardsDataUpsertBulk {
	return u.Update(func(s *RewardsDataUpsert) {
		s.SetLastEra(v)
	})
}

// AddLastEra adds v to the "last_era" field.
func (u *RewardsDataUpsertBulk) AddLastEra(v int64) *RewardsDataUpsertBulk {
	return u.Update(func(s *RewardsDataUpsert) {
		s.AddLastEra(v)
	})
}

// UpdateLastEra sets the "last_era" field to the value that was provided on create.
func (u *RewardsDataUpsertBulk) UpdateLastEra() *RewardsDataUpsertBulk {
	return u.Update(func(s *RewardsDataUpsert) {
		s.UpdateLastEra()
	})
}

// SetFirstEraTimestamp sets the "first_era_timestamp" field.
func (u *RewardsDataUpsertBulk) SetFirstEraTimestamp(v string) *RewardsDataUpsertBulk {
	return u.Update(func(s *RewardsDataUpsert) {
		s.SetFirstEraTimestamp(v)
	})
}

// UpdateFirstEraTimestamp sets the "first_era_timestamp" field to the value that was provided on create.
func (u *RewardsDataUpsertBulk) UpdateFirstEraTimestamp() *RewardsDataUpsertBulk {
	return u.Update(func(s *RewardsDataUpsert) {
		s.UpdateFirstEraTimestamp()
	})
}

// SetLastEraTimestamp sets the "last_era_timestamp" field.
func (u *RewardsDataUpsertBulk) SetLastEraTimestamp(v string) *RewardsDataUpsertBulk {
	return u.Update(func(s *RewardsDataUpsert) {
		s.SetLastEraTimestamp(v)
	})
}

// UpdateLastEraTimestamp sets the "last_era_timestamp" field to the value that was provided on create.
func (u *RewardsDataUpsertBulk) UpdateLastEraTimestamp() *RewardsDataUpsertBulk {
	return u.Update(func(s *RewardsDataUpsert) {
		s.UpdateLastEraTimestamp()
	})
}

// Exec executes the query.
func (u *RewardsDataUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RewardsDataCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RewardsDataCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RewardsDataUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
