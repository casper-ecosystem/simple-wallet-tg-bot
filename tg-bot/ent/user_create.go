// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/adressbook"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/balances"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/delegates"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/invoice"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/privatekeys"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/recentinvoices"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/rewardsdata"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/swaps"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/transfers"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/undelegates"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/user"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/userstate"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetPublicKey sets the "public_key" field.
func (uc *UserCreate) SetPublicKey(s string) *UserCreate {
	uc.mutation.SetPublicKey(s)
	return uc
}

// SetNillablePublicKey sets the "public_key" field if the given value is not nil.
func (uc *UserCreate) SetNillablePublicKey(s *string) *UserCreate {
	if s != nil {
		uc.SetPublicKey(*s)
	}
	return uc
}

// SetPassword sets the "password" field.
func (uc *UserCreate) SetPassword(s string) *UserCreate {
	uc.mutation.SetPassword(s)
	return uc
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uc *UserCreate) SetNillablePassword(s *string) *UserCreate {
	if s != nil {
		uc.SetPassword(*s)
	}
	return uc
}

// SetLoggedIn sets the "logged_in" field.
func (uc *UserCreate) SetLoggedIn(b bool) *UserCreate {
	uc.mutation.SetLoggedIn(b)
	return uc
}

// SetNillableLoggedIn sets the "logged_in" field if the given value is not nil.
func (uc *UserCreate) SetNillableLoggedIn(b *bool) *UserCreate {
	if b != nil {
		uc.SetLoggedIn(*b)
	}
	return uc
}

// SetLastAccess sets the "last_access" field.
func (uc *UserCreate) SetLastAccess(t time.Time) *UserCreate {
	uc.mutation.SetLastAccess(t)
	return uc
}

// SetNillableLastAccess sets the "last_access" field if the given value is not nil.
func (uc *UserCreate) SetNillableLastAccess(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetLastAccess(*t)
	}
	return uc
}

// SetLockTimeout sets the "lock_timeout" field.
func (uc *UserCreate) SetLockTimeout(i int64) *UserCreate {
	uc.mutation.SetLockTimeout(i)
	return uc
}

// SetNillableLockTimeout sets the "lock_timeout" field if the given value is not nil.
func (uc *UserCreate) SetNillableLockTimeout(i *int64) *UserCreate {
	if i != nil {
		uc.SetLockTimeout(*i)
	}
	return uc
}

// SetLockedManual sets the "locked_manual" field.
func (uc *UserCreate) SetLockedManual(b bool) *UserCreate {
	uc.mutation.SetLockedManual(b)
	return uc
}

// SetNillableLockedManual sets the "locked_manual" field if the given value is not nil.
func (uc *UserCreate) SetNillableLockedManual(b *bool) *UserCreate {
	if b != nil {
		uc.SetLockedManual(*b)
	}
	return uc
}

// SetNotify sets the "notify" field.
func (uc *UserCreate) SetNotify(b bool) *UserCreate {
	uc.mutation.SetNotify(b)
	return uc
}

// SetNillableNotify sets the "notify" field if the given value is not nil.
func (uc *UserCreate) SetNillableNotify(b *bool) *UserCreate {
	if b != nil {
		uc.SetNotify(*b)
	}
	return uc
}

// SetNotifyTime sets the "notify_time" field.
func (uc *UserCreate) SetNotifyTime(i int8) *UserCreate {
	uc.mutation.SetNotifyTime(i)
	return uc
}

// SetNillableNotifyTime sets the "notify_time" field if the given value is not nil.
func (uc *UserCreate) SetNillableNotifyTime(i *int8) *UserCreate {
	if i != nil {
		uc.SetNotifyTime(*i)
	}
	return uc
}

// SetNotifyLastTime sets the "notify_last_time" field.
func (uc *UserCreate) SetNotifyLastTime(t time.Time) *UserCreate {
	uc.mutation.SetNotifyLastTime(t)
	return uc
}

// SetNillableNotifyLastTime sets the "notify_last_time" field if the given value is not nil.
func (uc *UserCreate) SetNillableNotifyLastTime(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetNotifyLastTime(*t)
	}
	return uc
}

// SetStorePrivatKey sets the "store_privat_key" field.
func (uc *UserCreate) SetStorePrivatKey(b bool) *UserCreate {
	uc.mutation.SetStorePrivatKey(b)
	return uc
}

// SetNillableStorePrivatKey sets the "store_privat_key" field if the given value is not nil.
func (uc *UserCreate) SetNillableStorePrivatKey(b *bool) *UserCreate {
	if b != nil {
		uc.SetStorePrivatKey(*b)
	}
	return uc
}

// SetEnableLogging sets the "enable_logging" field.
func (uc *UserCreate) SetEnableLogging(b bool) *UserCreate {
	uc.mutation.SetEnableLogging(b)
	return uc
}

// SetNillableEnableLogging sets the "enable_logging" field if the given value is not nil.
func (uc *UserCreate) SetNillableEnableLogging(b *bool) *UserCreate {
	if b != nil {
		uc.SetEnableLogging(*b)
	}
	return uc
}

// SetRegistered sets the "registered" field.
func (uc *UserCreate) SetRegistered(b bool) *UserCreate {
	uc.mutation.SetRegistered(b)
	return uc
}

// SetNillableRegistered sets the "registered" field if the given value is not nil.
func (uc *UserCreate) SetNillableRegistered(b *bool) *UserCreate {
	if b != nil {
		uc.SetRegistered(*b)
	}
	return uc
}

// SetID sets the "id" field.
func (uc *UserCreate) SetID(i int64) *UserCreate {
	uc.mutation.SetID(i)
	return uc
}

// SetBalanceID sets the "balance" edge to the Balances entity by ID.
func (uc *UserCreate) SetBalanceID(id int) *UserCreate {
	uc.mutation.SetBalanceID(id)
	return uc
}

// SetNillableBalanceID sets the "balance" edge to the Balances entity by ID if the given value is not nil.
func (uc *UserCreate) SetNillableBalanceID(id *int) *UserCreate {
	if id != nil {
		uc = uc.SetBalanceID(*id)
	}
	return uc
}

// SetBalance sets the "balance" edge to the Balances entity.
func (uc *UserCreate) SetBalance(b *Balances) *UserCreate {
	return uc.SetBalanceID(b.ID)
}

// AddAddressBookIDs adds the "address_book" edge to the AdressBook entity by IDs.
func (uc *UserCreate) AddAddressBookIDs(ids ...int) *UserCreate {
	uc.mutation.AddAddressBookIDs(ids...)
	return uc
}

// AddAddressBook adds the "address_book" edges to the AdressBook entity.
func (uc *UserCreate) AddAddressBook(a ...*AdressBook) *UserCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uc.AddAddressBookIDs(ids...)
}

// SetStateID sets the "state" edge to the UserState entity by ID.
func (uc *UserCreate) SetStateID(id int) *UserCreate {
	uc.mutation.SetStateID(id)
	return uc
}

// SetNillableStateID sets the "state" edge to the UserState entity by ID if the given value is not nil.
func (uc *UserCreate) SetNillableStateID(id *int) *UserCreate {
	if id != nil {
		uc = uc.SetStateID(*id)
	}
	return uc
}

// SetState sets the "state" edge to the UserState entity.
func (uc *UserCreate) SetState(u *UserState) *UserCreate {
	return uc.SetStateID(u.ID)
}

// AddRewardsDatumIDs adds the "rewards_data" edge to the RewardsData entity by IDs.
func (uc *UserCreate) AddRewardsDatumIDs(ids ...int) *UserCreate {
	uc.mutation.AddRewardsDatumIDs(ids...)
	return uc
}

// AddRewardsData adds the "rewards_data" edges to the RewardsData entity.
func (uc *UserCreate) AddRewardsData(r ...*RewardsData) *UserCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uc.AddRewardsDatumIDs(ids...)
}

// SetPrivateKeyID sets the "PrivateKey" edge to the PrivateKeys entity by ID.
func (uc *UserCreate) SetPrivateKeyID(id int) *UserCreate {
	uc.mutation.SetPrivateKeyID(id)
	return uc
}

// SetNillablePrivateKeyID sets the "PrivateKey" edge to the PrivateKeys entity by ID if the given value is not nil.
func (uc *UserCreate) SetNillablePrivateKeyID(id *int) *UserCreate {
	if id != nil {
		uc = uc.SetPrivateKeyID(*id)
	}
	return uc
}

// SetPrivateKey sets the "PrivateKey" edge to the PrivateKeys entity.
func (uc *UserCreate) SetPrivateKey(p *PrivateKeys) *UserCreate {
	return uc.SetPrivateKeyID(p.ID)
}

// AddTransferIDs adds the "transfers" edge to the Transfers entity by IDs.
func (uc *UserCreate) AddTransferIDs(ids ...int) *UserCreate {
	uc.mutation.AddTransferIDs(ids...)
	return uc
}

// AddTransfers adds the "transfers" edges to the Transfers entity.
func (uc *UserCreate) AddTransfers(t ...*Transfers) *UserCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uc.AddTransferIDs(ids...)
}

// AddDelegateIDs adds the "delegates" edge to the Delegates entity by IDs.
func (uc *UserCreate) AddDelegateIDs(ids ...int) *UserCreate {
	uc.mutation.AddDelegateIDs(ids...)
	return uc
}

// AddDelegates adds the "delegates" edges to the Delegates entity.
func (uc *UserCreate) AddDelegates(d ...*Delegates) *UserCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uc.AddDelegateIDs(ids...)
}

// AddUndelegateIDs adds the "undelegates" edge to the Undelegates entity by IDs.
func (uc *UserCreate) AddUndelegateIDs(ids ...int) *UserCreate {
	uc.mutation.AddUndelegateIDs(ids...)
	return uc
}

// AddUndelegates adds the "undelegates" edges to the Undelegates entity.
func (uc *UserCreate) AddUndelegates(u ...*Undelegates) *UserCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddUndelegateIDs(ids...)
}

// AddSwapIDs adds the "swaps" edge to the Swaps entity by IDs.
func (uc *UserCreate) AddSwapIDs(ids ...int) *UserCreate {
	uc.mutation.AddSwapIDs(ids...)
	return uc
}

// AddSwaps adds the "swaps" edges to the Swaps entity.
func (uc *UserCreate) AddSwaps(s ...*Swaps) *UserCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uc.AddSwapIDs(ids...)
}

// AddInvoiceIDs adds the "invoices" edge to the Invoice entity by IDs.
func (uc *UserCreate) AddInvoiceIDs(ids ...int) *UserCreate {
	uc.mutation.AddInvoiceIDs(ids...)
	return uc
}

// AddInvoices adds the "invoices" edges to the Invoice entity.
func (uc *UserCreate) AddInvoices(i ...*Invoice) *UserCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uc.AddInvoiceIDs(ids...)
}

// AddRecentInvoiceIDs adds the "recentInvoices" edge to the RecentInvoices entity by IDs.
func (uc *UserCreate) AddRecentInvoiceIDs(ids ...int) *UserCreate {
	uc.mutation.AddRecentInvoiceIDs(ids...)
	return uc
}

// AddRecentInvoices adds the "recentInvoices" edges to the RecentInvoices entity.
func (uc *UserCreate) AddRecentInvoices(r ...*RecentInvoices) *UserCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uc.AddRecentInvoiceIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	uc.defaults()
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.LoggedIn(); !ok {
		v := user.DefaultLoggedIn
		uc.mutation.SetLoggedIn(v)
	}
	if _, ok := uc.mutation.Notify(); !ok {
		v := user.DefaultNotify
		uc.mutation.SetNotify(v)
	}
	if _, ok := uc.mutation.NotifyTime(); !ok {
		v := user.DefaultNotifyTime
		uc.mutation.SetNotifyTime(v)
	}
	if _, ok := uc.mutation.NotifyLastTime(); !ok {
		v := user.DefaultNotifyLastTime
		uc.mutation.SetNotifyLastTime(v)
	}
	if _, ok := uc.mutation.StorePrivatKey(); !ok {
		v := user.DefaultStorePrivatKey
		uc.mutation.SetStorePrivatKey(v)
	}
	if _, ok := uc.mutation.EnableLogging(); !ok {
		v := user.DefaultEnableLogging
		uc.mutation.SetEnableLogging(v)
	}
	if _, ok := uc.mutation.Registered(); !ok {
		v := user.DefaultRegistered
		uc.mutation.SetRegistered(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.LoggedIn(); !ok {
		return &ValidationError{Name: "logged_in", err: errors.New(`ent: missing required field "User.logged_in"`)}
	}
	if _, ok := uc.mutation.Notify(); !ok {
		return &ValidationError{Name: "notify", err: errors.New(`ent: missing required field "User.notify"`)}
	}
	if _, ok := uc.mutation.NotifyTime(); !ok {
		return &ValidationError{Name: "notify_time", err: errors.New(`ent: missing required field "User.notify_time"`)}
	}
	if _, ok := uc.mutation.NotifyLastTime(); !ok {
		return &ValidationError{Name: "notify_last_time", err: errors.New(`ent: missing required field "User.notify_last_time"`)}
	}
	if _, ok := uc.mutation.StorePrivatKey(); !ok {
		return &ValidationError{Name: "store_privat_key", err: errors.New(`ent: missing required field "User.store_privat_key"`)}
	}
	if _, ok := uc.mutation.EnableLogging(); !ok {
		return &ValidationError{Name: "enable_logging", err: errors.New(`ent: missing required field "User.enable_logging"`)}
	}
	if _, ok := uc.mutation.Registered(); !ok {
		return &ValidationError{Name: "registered", err: errors.New(`ent: missing required field "User.registered"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = uc.conflict
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uc.mutation.PublicKey(); ok {
		_spec.SetField(user.FieldPublicKey, field.TypeString, value)
		_node.PublicKey = value
	}
	if value, ok := uc.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := uc.mutation.LoggedIn(); ok {
		_spec.SetField(user.FieldLoggedIn, field.TypeBool, value)
		_node.LoggedIn = value
	}
	if value, ok := uc.mutation.LastAccess(); ok {
		_spec.SetField(user.FieldLastAccess, field.TypeTime, value)
		_node.LastAccess = value
	}
	if value, ok := uc.mutation.LockTimeout(); ok {
		_spec.SetField(user.FieldLockTimeout, field.TypeInt64, value)
		_node.LockTimeout = value
	}
	if value, ok := uc.mutation.LockedManual(); ok {
		_spec.SetField(user.FieldLockedManual, field.TypeBool, value)
		_node.LockedManual = value
	}
	if value, ok := uc.mutation.Notify(); ok {
		_spec.SetField(user.FieldNotify, field.TypeBool, value)
		_node.Notify = value
	}
	if value, ok := uc.mutation.NotifyTime(); ok {
		_spec.SetField(user.FieldNotifyTime, field.TypeInt8, value)
		_node.NotifyTime = value
	}
	if value, ok := uc.mutation.NotifyLastTime(); ok {
		_spec.SetField(user.FieldNotifyLastTime, field.TypeTime, value)
		_node.NotifyLastTime = value
	}
	if value, ok := uc.mutation.StorePrivatKey(); ok {
		_spec.SetField(user.FieldStorePrivatKey, field.TypeBool, value)
		_node.StorePrivatKey = value
	}
	if value, ok := uc.mutation.EnableLogging(); ok {
		_spec.SetField(user.FieldEnableLogging, field.TypeBool, value)
		_node.EnableLogging = value
	}
	if value, ok := uc.mutation.Registered(); ok {
		_spec.SetField(user.FieldRegistered, field.TypeBool, value)
		_node.Registered = value
	}
	if nodes := uc.mutation.BalanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.BalanceTable,
			Columns: []string{user.BalanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(balances.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.AddressBookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AddressBookTable,
			Columns: []string{user.AddressBookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adressbook.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.StateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.StateTable,
			Columns: []string{user.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userstate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.RewardsDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RewardsDataTable,
			Columns: []string{user.RewardsDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rewardsdata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.PrivateKeyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.PrivateKeyTable,
			Columns: []string{user.PrivateKeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(privatekeys.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.TransfersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TransfersTable,
			Columns: []string{user.TransfersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transfers.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.DelegatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DelegatesTable,
			Columns: []string{user.DelegatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delegates.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UndelegatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UndelegatesTable,
			Columns: []string{user.UndelegatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(undelegates.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.SwapsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SwapsTable,
			Columns: []string{user.SwapsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(swaps.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.InvoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InvoicesTable,
			Columns: []string{user.InvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.RecentInvoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RecentInvoicesTable,
			Columns: []string{user.RecentInvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recentinvoices.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.Create().
//		SetPublicKey(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetPublicKey(v+v).
//		}).
//		Exec(ctx)
func (uc *UserCreate) OnConflict(opts ...sql.ConflictOption) *UserUpsertOne {
	uc.conflict = opts
	return &UserUpsertOne{
		create: uc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uc *UserCreate) OnConflictColumns(columns ...string) *UserUpsertOne {
	uc.conflict = append(uc.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertOne{
		create: uc,
	}
}

type (
	// UserUpsertOne is the builder for "upsert"-ing
	//  one User node.
	UserUpsertOne struct {
		create *UserCreate
	}

	// UserUpsert is the "OnConflict" setter.
	UserUpsert struct {
		*sql.UpdateSet
	}
)

// SetPublicKey sets the "public_key" field.
func (u *UserUpsert) SetPublicKey(v string) *UserUpsert {
	u.Set(user.FieldPublicKey, v)
	return u
}

// UpdatePublicKey sets the "public_key" field to the value that was provided on create.
func (u *UserUpsert) UpdatePublicKey() *UserUpsert {
	u.SetExcluded(user.FieldPublicKey)
	return u
}

// ClearPublicKey clears the value of the "public_key" field.
func (u *UserUpsert) ClearPublicKey() *UserUpsert {
	u.SetNull(user.FieldPublicKey)
	return u
}

// SetPassword sets the "password" field.
func (u *UserUpsert) SetPassword(v string) *UserUpsert {
	u.Set(user.FieldPassword, v)
	return u
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *UserUpsert) UpdatePassword() *UserUpsert {
	u.SetExcluded(user.FieldPassword)
	return u
}

// ClearPassword clears the value of the "password" field.
func (u *UserUpsert) ClearPassword() *UserUpsert {
	u.SetNull(user.FieldPassword)
	return u
}

// SetLoggedIn sets the "logged_in" field.
func (u *UserUpsert) SetLoggedIn(v bool) *UserUpsert {
	u.Set(user.FieldLoggedIn, v)
	return u
}

// UpdateLoggedIn sets the "logged_in" field to the value that was provided on create.
func (u *UserUpsert) UpdateLoggedIn() *UserUpsert {
	u.SetExcluded(user.FieldLoggedIn)
	return u
}

// SetLastAccess sets the "last_access" field.
func (u *UserUpsert) SetLastAccess(v time.Time) *UserUpsert {
	u.Set(user.FieldLastAccess, v)
	return u
}

// UpdateLastAccess sets the "last_access" field to the value that was provided on create.
func (u *UserUpsert) UpdateLastAccess() *UserUpsert {
	u.SetExcluded(user.FieldLastAccess)
	return u
}

// ClearLastAccess clears the value of the "last_access" field.
func (u *UserUpsert) ClearLastAccess() *UserUpsert {
	u.SetNull(user.FieldLastAccess)
	return u
}

// SetLockTimeout sets the "lock_timeout" field.
func (u *UserUpsert) SetLockTimeout(v int64) *UserUpsert {
	u.Set(user.FieldLockTimeout, v)
	return u
}

// UpdateLockTimeout sets the "lock_timeout" field to the value that was provided on create.
func (u *UserUpsert) UpdateLockTimeout() *UserUpsert {
	u.SetExcluded(user.FieldLockTimeout)
	return u
}

// AddLockTimeout adds v to the "lock_timeout" field.
func (u *UserUpsert) AddLockTimeout(v int64) *UserUpsert {
	u.Add(user.FieldLockTimeout, v)
	return u
}

// ClearLockTimeout clears the value of the "lock_timeout" field.
func (u *UserUpsert) ClearLockTimeout() *UserUpsert {
	u.SetNull(user.FieldLockTimeout)
	return u
}

// SetLockedManual sets the "locked_manual" field.
func (u *UserUpsert) SetLockedManual(v bool) *UserUpsert {
	u.Set(user.FieldLockedManual, v)
	return u
}

// UpdateLockedManual sets the "locked_manual" field to the value that was provided on create.
func (u *UserUpsert) UpdateLockedManual() *UserUpsert {
	u.SetExcluded(user.FieldLockedManual)
	return u
}

// ClearLockedManual clears the value of the "locked_manual" field.
func (u *UserUpsert) ClearLockedManual() *UserUpsert {
	u.SetNull(user.FieldLockedManual)
	return u
}

// SetNotify sets the "notify" field.
func (u *UserUpsert) SetNotify(v bool) *UserUpsert {
	u.Set(user.FieldNotify, v)
	return u
}

// UpdateNotify sets the "notify" field to the value that was provided on create.
func (u *UserUpsert) UpdateNotify() *UserUpsert {
	u.SetExcluded(user.FieldNotify)
	return u
}

// SetNotifyTime sets the "notify_time" field.
func (u *UserUpsert) SetNotifyTime(v int8) *UserUpsert {
	u.Set(user.FieldNotifyTime, v)
	return u
}

// UpdateNotifyTime sets the "notify_time" field to the value that was provided on create.
func (u *UserUpsert) UpdateNotifyTime() *UserUpsert {
	u.SetExcluded(user.FieldNotifyTime)
	return u
}

// AddNotifyTime adds v to the "notify_time" field.
func (u *UserUpsert) AddNotifyTime(v int8) *UserUpsert {
	u.Add(user.FieldNotifyTime, v)
	return u
}

// SetNotifyLastTime sets the "notify_last_time" field.
func (u *UserUpsert) SetNotifyLastTime(v time.Time) *UserUpsert {
	u.Set(user.FieldNotifyLastTime, v)
	return u
}

// UpdateNotifyLastTime sets the "notify_last_time" field to the value that was provided on create.
func (u *UserUpsert) UpdateNotifyLastTime() *UserUpsert {
	u.SetExcluded(user.FieldNotifyLastTime)
	return u
}

// SetStorePrivatKey sets the "store_privat_key" field.
func (u *UserUpsert) SetStorePrivatKey(v bool) *UserUpsert {
	u.Set(user.FieldStorePrivatKey, v)
	return u
}

// UpdateStorePrivatKey sets the "store_privat_key" field to the value that was provided on create.
func (u *UserUpsert) UpdateStorePrivatKey() *UserUpsert {
	u.SetExcluded(user.FieldStorePrivatKey)
	return u
}

// SetEnableLogging sets the "enable_logging" field.
func (u *UserUpsert) SetEnableLogging(v bool) *UserUpsert {
	u.Set(user.FieldEnableLogging, v)
	return u
}

// UpdateEnableLogging sets the "enable_logging" field to the value that was provided on create.
func (u *UserUpsert) UpdateEnableLogging() *UserUpsert {
	u.SetExcluded(user.FieldEnableLogging)
	return u
}

// SetRegistered sets the "registered" field.
func (u *UserUpsert) SetRegistered(v bool) *UserUpsert {
	u.Set(user.FieldRegistered, v)
	return u
}

// UpdateRegistered sets the "registered" field to the value that was provided on create.
func (u *UserUpsert) UpdateRegistered() *UserUpsert {
	u.SetExcluded(user.FieldRegistered)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(user.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserUpsertOne) UpdateNewValues() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(user.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserUpsertOne) Ignore() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertOne) DoNothing() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreate.OnConflict
// documentation for more info.
func (u *UserUpsertOne) Update(set func(*UserUpsert)) *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetPublicKey sets the "public_key" field.
func (u *UserUpsertOne) SetPublicKey(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPublicKey(v)
	})
}

// UpdatePublicKey sets the "public_key" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePublicKey() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePublicKey()
	})
}

// ClearPublicKey clears the value of the "public_key" field.
func (u *UserUpsertOne) ClearPublicKey() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearPublicKey()
	})
}

// SetPassword sets the "password" field.
func (u *UserUpsertOne) SetPassword(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePassword() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePassword()
	})
}

// ClearPassword clears the value of the "password" field.
func (u *UserUpsertOne) ClearPassword() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearPassword()
	})
}

// SetLoggedIn sets the "logged_in" field.
func (u *UserUpsertOne) SetLoggedIn(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLoggedIn(v)
	})
}

// UpdateLoggedIn sets the "logged_in" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLoggedIn() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLoggedIn()
	})
}

// SetLastAccess sets the "last_access" field.
func (u *UserUpsertOne) SetLastAccess(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLastAccess(v)
	})
}

// UpdateLastAccess sets the "last_access" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLastAccess() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastAccess()
	})
}

// ClearLastAccess clears the value of the "last_access" field.
func (u *UserUpsertOne) ClearLastAccess() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearLastAccess()
	})
}

// SetLockTimeout sets the "lock_timeout" field.
func (u *UserUpsertOne) SetLockTimeout(v int64) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLockTimeout(v)
	})
}

// AddLockTimeout adds v to the "lock_timeout" field.
func (u *UserUpsertOne) AddLockTimeout(v int64) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddLockTimeout(v)
	})
}

// UpdateLockTimeout sets the "lock_timeout" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLockTimeout() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLockTimeout()
	})
}

// ClearLockTimeout clears the value of the "lock_timeout" field.
func (u *UserUpsertOne) ClearLockTimeout() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearLockTimeout()
	})
}

// SetLockedManual sets the "locked_manual" field.
func (u *UserUpsertOne) SetLockedManual(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLockedManual(v)
	})
}

// UpdateLockedManual sets the "locked_manual" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLockedManual() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLockedManual()
	})
}

// ClearLockedManual clears the value of the "locked_manual" field.
func (u *UserUpsertOne) ClearLockedManual() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearLockedManual()
	})
}

// SetNotify sets the "notify" field.
func (u *UserUpsertOne) SetNotify(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetNotify(v)
	})
}

// UpdateNotify sets the "notify" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateNotify() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateNotify()
	})
}

// SetNotifyTime sets the "notify_time" field.
func (u *UserUpsertOne) SetNotifyTime(v int8) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetNotifyTime(v)
	})
}

// AddNotifyTime adds v to the "notify_time" field.
func (u *UserUpsertOne) AddNotifyTime(v int8) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddNotifyTime(v)
	})
}

// UpdateNotifyTime sets the "notify_time" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateNotifyTime() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateNotifyTime()
	})
}

// SetNotifyLastTime sets the "notify_last_time" field.
func (u *UserUpsertOne) SetNotifyLastTime(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetNotifyLastTime(v)
	})
}

// UpdateNotifyLastTime sets the "notify_last_time" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateNotifyLastTime() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateNotifyLastTime()
	})
}

// SetStorePrivatKey sets the "store_privat_key" field.
func (u *UserUpsertOne) SetStorePrivatKey(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetStorePrivatKey(v)
	})
}

// UpdateStorePrivatKey sets the "store_privat_key" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateStorePrivatKey() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateStorePrivatKey()
	})
}

// SetEnableLogging sets the "enable_logging" field.
func (u *UserUpsertOne) SetEnableLogging(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetEnableLogging(v)
	})
}

// UpdateEnableLogging sets the "enable_logging" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateEnableLogging() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEnableLogging()
	})
}

// SetRegistered sets the "registered" field.
func (u *UserUpsertOne) SetRegistered(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetRegistered(v)
	})
}

// UpdateRegistered sets the "registered" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateRegistered() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateRegistered()
	})
}

// Exec executes the query.
func (u *UserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	builders []*UserCreate
	conflict []sql.ConflictOption
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetPublicKey(v+v).
//		}).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserUpsertBulk {
	ucb.conflict = opts
	return &UserUpsertBulk{
		create: ucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflictColumns(columns ...string) *UserUpsertBulk {
	ucb.conflict = append(ucb.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertBulk{
		create: ucb,
	}
}

// UserUpsertBulk is the builder for "upsert"-ing
// a bulk of User nodes.
type UserUpsertBulk struct {
	create *UserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(user.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserUpsertBulk) UpdateNewValues() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(user.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserUpsertBulk) Ignore() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertBulk) DoNothing() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreateBulk.OnConflict
// documentation for more info.
func (u *UserUpsertBulk) Update(set func(*UserUpsert)) *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetPublicKey sets the "public_key" field.
func (u *UserUpsertBulk) SetPublicKey(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPublicKey(v)
	})
}

// UpdatePublicKey sets the "public_key" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePublicKey() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePublicKey()
	})
}

// ClearPublicKey clears the value of the "public_key" field.
func (u *UserUpsertBulk) ClearPublicKey() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearPublicKey()
	})
}

// SetPassword sets the "password" field.
func (u *UserUpsertBulk) SetPassword(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePassword() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePassword()
	})
}

// ClearPassword clears the value of the "password" field.
func (u *UserUpsertBulk) ClearPassword() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearPassword()
	})
}

// SetLoggedIn sets the "logged_in" field.
func (u *UserUpsertBulk) SetLoggedIn(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLoggedIn(v)
	})
}

// UpdateLoggedIn sets the "logged_in" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLoggedIn() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLoggedIn()
	})
}

// SetLastAccess sets the "last_access" field.
func (u *UserUpsertBulk) SetLastAccess(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLastAccess(v)
	})
}

// UpdateLastAccess sets the "last_access" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLastAccess() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastAccess()
	})
}

// ClearLastAccess clears the value of the "last_access" field.
func (u *UserUpsertBulk) ClearLastAccess() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearLastAccess()
	})
}

// SetLockTimeout sets the "lock_timeout" field.
func (u *UserUpsertBulk) SetLockTimeout(v int64) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLockTimeout(v)
	})
}

// AddLockTimeout adds v to the "lock_timeout" field.
func (u *UserUpsertBulk) AddLockTimeout(v int64) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddLockTimeout(v)
	})
}

// UpdateLockTimeout sets the "lock_timeout" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLockTimeout() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLockTimeout()
	})
}

// ClearLockTimeout clears the value of the "lock_timeout" field.
func (u *UserUpsertBulk) ClearLockTimeout() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearLockTimeout()
	})
}

// SetLockedManual sets the "locked_manual" field.
func (u *UserUpsertBulk) SetLockedManual(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLockedManual(v)
	})
}

// UpdateLockedManual sets the "locked_manual" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLockedManual() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLockedManual()
	})
}

// ClearLockedManual clears the value of the "locked_manual" field.
func (u *UserUpsertBulk) ClearLockedManual() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearLockedManual()
	})
}

// SetNotify sets the "notify" field.
func (u *UserUpsertBulk) SetNotify(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetNotify(v)
	})
}

// UpdateNotify sets the "notify" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateNotify() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateNotify()
	})
}

// SetNotifyTime sets the "notify_time" field.
func (u *UserUpsertBulk) SetNotifyTime(v int8) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetNotifyTime(v)
	})
}

// AddNotifyTime adds v to the "notify_time" field.
func (u *UserUpsertBulk) AddNotifyTime(v int8) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddNotifyTime(v)
	})
}

// UpdateNotifyTime sets the "notify_time" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateNotifyTime() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateNotifyTime()
	})
}

// SetNotifyLastTime sets the "notify_last_time" field.
func (u *UserUpsertBulk) SetNotifyLastTime(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetNotifyLastTime(v)
	})
}

// UpdateNotifyLastTime sets the "notify_last_time" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateNotifyLastTime() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateNotifyLastTime()
	})
}

// SetStorePrivatKey sets the "store_privat_key" field.
func (u *UserUpsertBulk) SetStorePrivatKey(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetStorePrivatKey(v)
	})
}

// UpdateStorePrivatKey sets the "store_privat_key" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateStorePrivatKey() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateStorePrivatKey()
	})
}

// SetEnableLogging sets the "enable_logging" field.
func (u *UserUpsertBulk) SetEnableLogging(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetEnableLogging(v)
	})
}

// UpdateEnableLogging sets the "enable_logging" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateEnableLogging() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEnableLogging()
	})
}

// SetRegistered sets the "registered" field.
func (u *UserUpsertBulk) SetRegistered(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetRegistered(v)
	})
}

// UpdateRegistered sets the "registered" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateRegistered() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateRegistered()
	})
}

// Exec executes the query.
func (u *UserUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
