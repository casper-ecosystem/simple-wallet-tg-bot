// Code generated by ent, DO NOT EDIT.

package validators

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the validators type in the database.
	Label = "validators"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldFee holds the string denoting the fee field in the database.
	FieldFee = "fee"
	// FieldDelegators holds the string denoting the delegators field in the database.
	FieldDelegators = "delegators"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// Table holds the table name of the validators in the database.
	Table = "validators"
)

// Columns holds all SQL columns for validators fields.
var Columns = []string{
	FieldID,
	FieldAddress,
	FieldName,
	FieldFee,
	FieldDelegators,
	FieldActive,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Validators queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByFee orders the results by the fee field.
func ByFee(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFee, opts...).ToFunc()
}

// ByDelegators orders the results by the delegators field.
func ByDelegators(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDelegators, opts...).ToFunc()
}

// ByActive orders the results by the active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}
