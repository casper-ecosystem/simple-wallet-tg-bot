// Code generated by ent, DO NOT EDIT.

package validators

import (
	"entgo.io/ent/dialect/sql"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Validators {
	return predicate.Validators(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Validators {
	return predicate.Validators(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Validators {
	return predicate.Validators(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Validators {
	return predicate.Validators(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Validators {
	return predicate.Validators(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Validators {
	return predicate.Validators(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Validators {
	return predicate.Validators(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Validators {
	return predicate.Validators(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Validators {
	return predicate.Validators(sql.FieldLTE(FieldID, id))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Validators {
	return predicate.Validators(sql.FieldEQ(FieldAddress, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Validators {
	return predicate.Validators(sql.FieldEQ(FieldName, v))
}

// Fee applies equality check predicate on the "fee" field. It's identical to FeeEQ.
func Fee(v int8) predicate.Validators {
	return predicate.Validators(sql.FieldEQ(FieldFee, v))
}

// Delegators applies equality check predicate on the "delegators" field. It's identical to DelegatorsEQ.
func Delegators(v int64) predicate.Validators {
	return predicate.Validators(sql.FieldEQ(FieldDelegators, v))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.Validators {
	return predicate.Validators(sql.FieldEQ(FieldActive, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Validators {
	return predicate.Validators(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Validators {
	return predicate.Validators(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Validators {
	return predicate.Validators(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Validators {
	return predicate.Validators(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Validators {
	return predicate.Validators(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Validators {
	return predicate.Validators(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Validators {
	return predicate.Validators(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Validators {
	return predicate.Validators(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Validators {
	return predicate.Validators(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Validators {
	return predicate.Validators(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Validators {
	return predicate.Validators(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Validators {
	return predicate.Validators(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Validators {
	return predicate.Validators(sql.FieldContainsFold(FieldAddress, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Validators {
	return predicate.Validators(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Validators {
	return predicate.Validators(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Validators {
	return predicate.Validators(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Validators {
	return predicate.Validators(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Validators {
	return predicate.Validators(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Validators {
	return predicate.Validators(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Validators {
	return predicate.Validators(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Validators {
	return predicate.Validators(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Validators {
	return predicate.Validators(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Validators {
	return predicate.Validators(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Validators {
	return predicate.Validators(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Validators {
	return predicate.Validators(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Validators {
	return predicate.Validators(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Validators {
	return predicate.Validators(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Validators {
	return predicate.Validators(sql.FieldContainsFold(FieldName, v))
}

// FeeEQ applies the EQ predicate on the "fee" field.
func FeeEQ(v int8) predicate.Validators {
	return predicate.Validators(sql.FieldEQ(FieldFee, v))
}

// FeeNEQ applies the NEQ predicate on the "fee" field.
func FeeNEQ(v int8) predicate.Validators {
	return predicate.Validators(sql.FieldNEQ(FieldFee, v))
}

// FeeIn applies the In predicate on the "fee" field.
func FeeIn(vs ...int8) predicate.Validators {
	return predicate.Validators(sql.FieldIn(FieldFee, vs...))
}

// FeeNotIn applies the NotIn predicate on the "fee" field.
func FeeNotIn(vs ...int8) predicate.Validators {
	return predicate.Validators(sql.FieldNotIn(FieldFee, vs...))
}

// FeeGT applies the GT predicate on the "fee" field.
func FeeGT(v int8) predicate.Validators {
	return predicate.Validators(sql.FieldGT(FieldFee, v))
}

// FeeGTE applies the GTE predicate on the "fee" field.
func FeeGTE(v int8) predicate.Validators {
	return predicate.Validators(sql.FieldGTE(FieldFee, v))
}

// FeeLT applies the LT predicate on the "fee" field.
func FeeLT(v int8) predicate.Validators {
	return predicate.Validators(sql.FieldLT(FieldFee, v))
}

// FeeLTE applies the LTE predicate on the "fee" field.
func FeeLTE(v int8) predicate.Validators {
	return predicate.Validators(sql.FieldLTE(FieldFee, v))
}

// FeeIsNil applies the IsNil predicate on the "fee" field.
func FeeIsNil() predicate.Validators {
	return predicate.Validators(sql.FieldIsNull(FieldFee))
}

// FeeNotNil applies the NotNil predicate on the "fee" field.
func FeeNotNil() predicate.Validators {
	return predicate.Validators(sql.FieldNotNull(FieldFee))
}

// DelegatorsEQ applies the EQ predicate on the "delegators" field.
func DelegatorsEQ(v int64) predicate.Validators {
	return predicate.Validators(sql.FieldEQ(FieldDelegators, v))
}

// DelegatorsNEQ applies the NEQ predicate on the "delegators" field.
func DelegatorsNEQ(v int64) predicate.Validators {
	return predicate.Validators(sql.FieldNEQ(FieldDelegators, v))
}

// DelegatorsIn applies the In predicate on the "delegators" field.
func DelegatorsIn(vs ...int64) predicate.Validators {
	return predicate.Validators(sql.FieldIn(FieldDelegators, vs...))
}

// DelegatorsNotIn applies the NotIn predicate on the "delegators" field.
func DelegatorsNotIn(vs ...int64) predicate.Validators {
	return predicate.Validators(sql.FieldNotIn(FieldDelegators, vs...))
}

// DelegatorsGT applies the GT predicate on the "delegators" field.
func DelegatorsGT(v int64) predicate.Validators {
	return predicate.Validators(sql.FieldGT(FieldDelegators, v))
}

// DelegatorsGTE applies the GTE predicate on the "delegators" field.
func DelegatorsGTE(v int64) predicate.Validators {
	return predicate.Validators(sql.FieldGTE(FieldDelegators, v))
}

// DelegatorsLT applies the LT predicate on the "delegators" field.
func DelegatorsLT(v int64) predicate.Validators {
	return predicate.Validators(sql.FieldLT(FieldDelegators, v))
}

// DelegatorsLTE applies the LTE predicate on the "delegators" field.
func DelegatorsLTE(v int64) predicate.Validators {
	return predicate.Validators(sql.FieldLTE(FieldDelegators, v))
}

// DelegatorsIsNil applies the IsNil predicate on the "delegators" field.
func DelegatorsIsNil() predicate.Validators {
	return predicate.Validators(sql.FieldIsNull(FieldDelegators))
}

// DelegatorsNotNil applies the NotNil predicate on the "delegators" field.
func DelegatorsNotNil() predicate.Validators {
	return predicate.Validators(sql.FieldNotNull(FieldDelegators))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.Validators {
	return predicate.Validators(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.Validators {
	return predicate.Validators(sql.FieldNEQ(FieldActive, v))
}

// ActiveIsNil applies the IsNil predicate on the "active" field.
func ActiveIsNil() predicate.Validators {
	return predicate.Validators(sql.FieldIsNull(FieldActive))
}

// ActiveNotNil applies the NotNil predicate on the "active" field.
func ActiveNotNil() predicate.Validators {
	return predicate.Validators(sql.FieldNotNull(FieldActive))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Validators) predicate.Validators {
	return predicate.Validators(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Validators) predicate.Validators {
	return predicate.Validators(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Validators) predicate.Validators {
	return predicate.Validators(func(s *sql.Selector) {
		p(s.Not())
	})
}
