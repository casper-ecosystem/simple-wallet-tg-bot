// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/delegates"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/user"
)

// Delegates is the model entity for the Delegates schema.
type Delegates struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Delegator holds the value of the "delegator" field.
	Delegator string `json:"delegator,omitempty"`
	// Validator holds the value of the "validator" field.
	Validator string `json:"validator,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// UserBalance holds the value of the "user_balance" field.
	UserBalance string `json:"user_balance,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount string `json:"amount,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Deploy holds the value of the "Deploy" field.
	Deploy string `json:"Deploy,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DelegatesQuery when eager-loading is set.
	Edges          DelegatesEdges `json:"edges"`
	user_delegates *int64
	selectValues   sql.SelectValues
}

// DelegatesEdges holds the relations/edges for other nodes in the graph.
type DelegatesEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DelegatesEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Delegates) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case delegates.FieldID:
			values[i] = new(sql.NullInt64)
		case delegates.FieldDelegator, delegates.FieldValidator, delegates.FieldName, delegates.FieldUserBalance, delegates.FieldAmount, delegates.FieldStatus, delegates.FieldDeploy:
			values[i] = new(sql.NullString)
		case delegates.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case delegates.ForeignKeys[0]: // user_delegates
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Delegates fields.
func (d *Delegates) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case delegates.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case delegates.FieldDelegator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field delegator", values[i])
			} else if value.Valid {
				d.Delegator = value.String
			}
		case delegates.FieldValidator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field validator", values[i])
			} else if value.Valid {
				d.Validator = value.String
			}
		case delegates.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				d.Name = value.String
			}
		case delegates.FieldUserBalance:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_balance", values[i])
			} else if value.Valid {
				d.UserBalance = value.String
			}
		case delegates.FieldAmount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				d.Amount = value.String
			}
		case delegates.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				d.CreatedAt = value.Time
			}
		case delegates.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				d.Status = value.String
			}
		case delegates.FieldDeploy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Deploy", values[i])
			} else if value.Valid {
				d.Deploy = value.String
			}
		case delegates.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_delegates", value)
			} else if value.Valid {
				d.user_delegates = new(int64)
				*d.user_delegates = int64(value.Int64)
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Delegates.
// This includes values selected through modifiers, order, etc.
func (d *Delegates) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Delegates entity.
func (d *Delegates) QueryOwner() *UserQuery {
	return NewDelegatesClient(d.config).QueryOwner(d)
}

// Update returns a builder for updating this Delegates.
// Note that you need to call Delegates.Unwrap() before calling this method if this Delegates
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Delegates) Update() *DelegatesUpdateOne {
	return NewDelegatesClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Delegates entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Delegates) Unwrap() *Delegates {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Delegates is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Delegates) String() string {
	var builder strings.Builder
	builder.WriteString("Delegates(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("delegator=")
	builder.WriteString(d.Delegator)
	builder.WriteString(", ")
	builder.WriteString("validator=")
	builder.WriteString(d.Validator)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(d.Name)
	builder.WriteString(", ")
	builder.WriteString("user_balance=")
	builder.WriteString(d.UserBalance)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(d.Amount)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(d.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(d.Status)
	builder.WriteString(", ")
	builder.WriteString("Deploy=")
	builder.WriteString(d.Deploy)
	builder.WriteByte(')')
	return builder.String()
}

// DelegatesSlice is a parsable slice of Delegates.
type DelegatesSlice []*Delegates
