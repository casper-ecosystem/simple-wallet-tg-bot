// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Simplewallethq/tg-bot/ent/balances"
	"github.com/Simplewallethq/tg-bot/ent/user"
)

// Balances is the model entity for the Balances schema.
type Balances struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Balance holds the value of the "balance" field.
	Balance float64 `json:"balance,omitempty"`
	// Height holds the value of the "height" field.
	Height uint64 `json:"height,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BalancesQuery when eager-loading is set.
	Edges        BalancesEdges `json:"edges"`
	user_balance *int64
	selectValues sql.SelectValues
}

// BalancesEdges holds the relations/edges for other nodes in the graph.
type BalancesEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BalancesEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Balances) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case balances.FieldBalance:
			values[i] = new(sql.NullFloat64)
		case balances.FieldID, balances.FieldHeight:
			values[i] = new(sql.NullInt64)
		case balances.ForeignKeys[0]: // user_balance
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Balances fields.
func (b *Balances) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case balances.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case balances.FieldBalance:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field balance", values[i])
			} else if value.Valid {
				b.Balance = value.Float64
			}
		case balances.FieldHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field height", values[i])
			} else if value.Valid {
				b.Height = uint64(value.Int64)
			}
		case balances.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_balance", value)
			} else if value.Valid {
				b.user_balance = new(int64)
				*b.user_balance = int64(value.Int64)
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Balances.
// This includes values selected through modifiers, order, etc.
func (b *Balances) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Balances entity.
func (b *Balances) QueryOwner() *UserQuery {
	return NewBalancesClient(b.config).QueryOwner(b)
}

// Update returns a builder for updating this Balances.
// Note that you need to call Balances.Unwrap() before calling this method if this Balances
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Balances) Update() *BalancesUpdateOne {
	return NewBalancesClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Balances entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Balances) Unwrap() *Balances {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Balances is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Balances) String() string {
	var builder strings.Builder
	builder.WriteString("Balances(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("balance=")
	builder.WriteString(fmt.Sprintf("%v", b.Balance))
	builder.WriteString(", ")
	builder.WriteString("height=")
	builder.WriteString(fmt.Sprintf("%v", b.Height))
	builder.WriteByte(')')
	return builder.String()
}

// BalancesSlice is a parsable slice of Balances.
type BalancesSlice []*Balances
