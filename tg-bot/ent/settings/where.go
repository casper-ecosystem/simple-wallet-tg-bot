// Code generated by ent, DO NOT EDIT.

package settings

import (
	"entgo.io/ent/dialect/sql"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldID, id))
}

// LastScannedBlockNotificator applies equality check predicate on the "last_scanned_block_notificator" field. It's identical to LastScannedBlockNotificatorEQ.
func LastScannedBlockNotificator(v int64) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldLastScannedBlockNotificator, v))
}

// LastScannedEraValidators applies equality check predicate on the "last_scanned_era_validators" field. It's identical to LastScannedEraValidatorsEQ.
func LastScannedEraValidators(v int64) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldLastScannedEraValidators, v))
}

// LastScannedBlockNotificatorEQ applies the EQ predicate on the "last_scanned_block_notificator" field.
func LastScannedBlockNotificatorEQ(v int64) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldLastScannedBlockNotificator, v))
}

// LastScannedBlockNotificatorNEQ applies the NEQ predicate on the "last_scanned_block_notificator" field.
func LastScannedBlockNotificatorNEQ(v int64) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldLastScannedBlockNotificator, v))
}

// LastScannedBlockNotificatorIn applies the In predicate on the "last_scanned_block_notificator" field.
func LastScannedBlockNotificatorIn(vs ...int64) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldLastScannedBlockNotificator, vs...))
}

// LastScannedBlockNotificatorNotIn applies the NotIn predicate on the "last_scanned_block_notificator" field.
func LastScannedBlockNotificatorNotIn(vs ...int64) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldLastScannedBlockNotificator, vs...))
}

// LastScannedBlockNotificatorGT applies the GT predicate on the "last_scanned_block_notificator" field.
func LastScannedBlockNotificatorGT(v int64) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldLastScannedBlockNotificator, v))
}

// LastScannedBlockNotificatorGTE applies the GTE predicate on the "last_scanned_block_notificator" field.
func LastScannedBlockNotificatorGTE(v int64) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldLastScannedBlockNotificator, v))
}

// LastScannedBlockNotificatorLT applies the LT predicate on the "last_scanned_block_notificator" field.
func LastScannedBlockNotificatorLT(v int64) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldLastScannedBlockNotificator, v))
}

// LastScannedBlockNotificatorLTE applies the LTE predicate on the "last_scanned_block_notificator" field.
func LastScannedBlockNotificatorLTE(v int64) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldLastScannedBlockNotificator, v))
}

// LastScannedBlockNotificatorIsNil applies the IsNil predicate on the "last_scanned_block_notificator" field.
func LastScannedBlockNotificatorIsNil() predicate.Settings {
	return predicate.Settings(sql.FieldIsNull(FieldLastScannedBlockNotificator))
}

// LastScannedBlockNotificatorNotNil applies the NotNil predicate on the "last_scanned_block_notificator" field.
func LastScannedBlockNotificatorNotNil() predicate.Settings {
	return predicate.Settings(sql.FieldNotNull(FieldLastScannedBlockNotificator))
}

// LastScannedEraValidatorsEQ applies the EQ predicate on the "last_scanned_era_validators" field.
func LastScannedEraValidatorsEQ(v int64) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldLastScannedEraValidators, v))
}

// LastScannedEraValidatorsNEQ applies the NEQ predicate on the "last_scanned_era_validators" field.
func LastScannedEraValidatorsNEQ(v int64) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldLastScannedEraValidators, v))
}

// LastScannedEraValidatorsIn applies the In predicate on the "last_scanned_era_validators" field.
func LastScannedEraValidatorsIn(vs ...int64) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldLastScannedEraValidators, vs...))
}

// LastScannedEraValidatorsNotIn applies the NotIn predicate on the "last_scanned_era_validators" field.
func LastScannedEraValidatorsNotIn(vs ...int64) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldLastScannedEraValidators, vs...))
}

// LastScannedEraValidatorsGT applies the GT predicate on the "last_scanned_era_validators" field.
func LastScannedEraValidatorsGT(v int64) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldLastScannedEraValidators, v))
}

// LastScannedEraValidatorsGTE applies the GTE predicate on the "last_scanned_era_validators" field.
func LastScannedEraValidatorsGTE(v int64) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldLastScannedEraValidators, v))
}

// LastScannedEraValidatorsLT applies the LT predicate on the "last_scanned_era_validators" field.
func LastScannedEraValidatorsLT(v int64) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldLastScannedEraValidators, v))
}

// LastScannedEraValidatorsLTE applies the LTE predicate on the "last_scanned_era_validators" field.
func LastScannedEraValidatorsLTE(v int64) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldLastScannedEraValidators, v))
}

// LastScannedEraValidatorsIsNil applies the IsNil predicate on the "last_scanned_era_validators" field.
func LastScannedEraValidatorsIsNil() predicate.Settings {
	return predicate.Settings(sql.FieldIsNull(FieldLastScannedEraValidators))
}

// LastScannedEraValidatorsNotNil applies the NotNil predicate on the "last_scanned_era_validators" field.
func LastScannedEraValidatorsNotNil() predicate.Settings {
	return predicate.Settings(sql.FieldNotNull(FieldLastScannedEraValidators))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Settings) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Settings) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Settings) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		p(s.Not())
	})
}
