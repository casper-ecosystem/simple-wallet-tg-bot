// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/predicate"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/recentinvoices"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/user"
)

// RecentInvoicesUpdate is the builder for updating RecentInvoices entities.
type RecentInvoicesUpdate struct {
	config
	hooks    []Hook
	mutation *RecentInvoicesMutation
}

// Where appends a list predicates to the RecentInvoicesUpdate builder.
func (riu *RecentInvoicesUpdate) Where(ps ...predicate.RecentInvoices) *RecentInvoicesUpdate {
	riu.mutation.Where(ps...)
	return riu
}

// SetStatus sets the "status" field.
func (riu *RecentInvoicesUpdate) SetStatus(s string) *RecentInvoicesUpdate {
	riu.mutation.SetStatus(s)
	return riu
}

// SetInvoiceID sets the "invoiceID" field.
func (riu *RecentInvoicesUpdate) SetInvoiceID(i int64) *RecentInvoicesUpdate {
	riu.mutation.ResetInvoiceID()
	riu.mutation.SetInvoiceID(i)
	return riu
}

// AddInvoiceID adds i to the "invoiceID" field.
func (riu *RecentInvoicesUpdate) AddInvoiceID(i int64) *RecentInvoicesUpdate {
	riu.mutation.AddInvoiceID(i)
	return riu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (riu *RecentInvoicesUpdate) SetOwnerID(id int64) *RecentInvoicesUpdate {
	riu.mutation.SetOwnerID(id)
	return riu
}

// SetOwner sets the "owner" edge to the User entity.
func (riu *RecentInvoicesUpdate) SetOwner(u *User) *RecentInvoicesUpdate {
	return riu.SetOwnerID(u.ID)
}

// Mutation returns the RecentInvoicesMutation object of the builder.
func (riu *RecentInvoicesUpdate) Mutation() *RecentInvoicesMutation {
	return riu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (riu *RecentInvoicesUpdate) ClearOwner() *RecentInvoicesUpdate {
	riu.mutation.ClearOwner()
	return riu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (riu *RecentInvoicesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, riu.sqlSave, riu.mutation, riu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (riu *RecentInvoicesUpdate) SaveX(ctx context.Context) int {
	affected, err := riu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (riu *RecentInvoicesUpdate) Exec(ctx context.Context) error {
	_, err := riu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (riu *RecentInvoicesUpdate) ExecX(ctx context.Context) {
	if err := riu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (riu *RecentInvoicesUpdate) check() error {
	if _, ok := riu.mutation.OwnerID(); riu.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RecentInvoices.owner"`)
	}
	return nil
}

func (riu *RecentInvoicesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := riu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(recentinvoices.Table, recentinvoices.Columns, sqlgraph.NewFieldSpec(recentinvoices.FieldID, field.TypeInt))
	if ps := riu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := riu.mutation.Status(); ok {
		_spec.SetField(recentinvoices.FieldStatus, field.TypeString, value)
	}
	if value, ok := riu.mutation.InvoiceID(); ok {
		_spec.SetField(recentinvoices.FieldInvoiceID, field.TypeInt64, value)
	}
	if value, ok := riu.mutation.AddedInvoiceID(); ok {
		_spec.AddField(recentinvoices.FieldInvoiceID, field.TypeInt64, value)
	}
	if riu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recentinvoices.OwnerTable,
			Columns: []string{recentinvoices.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := riu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recentinvoices.OwnerTable,
			Columns: []string{recentinvoices.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, riu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recentinvoices.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	riu.mutation.done = true
	return n, nil
}

// RecentInvoicesUpdateOne is the builder for updating a single RecentInvoices entity.
type RecentInvoicesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RecentInvoicesMutation
}

// SetStatus sets the "status" field.
func (riuo *RecentInvoicesUpdateOne) SetStatus(s string) *RecentInvoicesUpdateOne {
	riuo.mutation.SetStatus(s)
	return riuo
}

// SetInvoiceID sets the "invoiceID" field.
func (riuo *RecentInvoicesUpdateOne) SetInvoiceID(i int64) *RecentInvoicesUpdateOne {
	riuo.mutation.ResetInvoiceID()
	riuo.mutation.SetInvoiceID(i)
	return riuo
}

// AddInvoiceID adds i to the "invoiceID" field.
func (riuo *RecentInvoicesUpdateOne) AddInvoiceID(i int64) *RecentInvoicesUpdateOne {
	riuo.mutation.AddInvoiceID(i)
	return riuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (riuo *RecentInvoicesUpdateOne) SetOwnerID(id int64) *RecentInvoicesUpdateOne {
	riuo.mutation.SetOwnerID(id)
	return riuo
}

// SetOwner sets the "owner" edge to the User entity.
func (riuo *RecentInvoicesUpdateOne) SetOwner(u *User) *RecentInvoicesUpdateOne {
	return riuo.SetOwnerID(u.ID)
}

// Mutation returns the RecentInvoicesMutation object of the builder.
func (riuo *RecentInvoicesUpdateOne) Mutation() *RecentInvoicesMutation {
	return riuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (riuo *RecentInvoicesUpdateOne) ClearOwner() *RecentInvoicesUpdateOne {
	riuo.mutation.ClearOwner()
	return riuo
}

// Where appends a list predicates to the RecentInvoicesUpdate builder.
func (riuo *RecentInvoicesUpdateOne) Where(ps ...predicate.RecentInvoices) *RecentInvoicesUpdateOne {
	riuo.mutation.Where(ps...)
	return riuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (riuo *RecentInvoicesUpdateOne) Select(field string, fields ...string) *RecentInvoicesUpdateOne {
	riuo.fields = append([]string{field}, fields...)
	return riuo
}

// Save executes the query and returns the updated RecentInvoices entity.
func (riuo *RecentInvoicesUpdateOne) Save(ctx context.Context) (*RecentInvoices, error) {
	return withHooks(ctx, riuo.sqlSave, riuo.mutation, riuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (riuo *RecentInvoicesUpdateOne) SaveX(ctx context.Context) *RecentInvoices {
	node, err := riuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (riuo *RecentInvoicesUpdateOne) Exec(ctx context.Context) error {
	_, err := riuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (riuo *RecentInvoicesUpdateOne) ExecX(ctx context.Context) {
	if err := riuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (riuo *RecentInvoicesUpdateOne) check() error {
	if _, ok := riuo.mutation.OwnerID(); riuo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RecentInvoices.owner"`)
	}
	return nil
}

func (riuo *RecentInvoicesUpdateOne) sqlSave(ctx context.Context) (_node *RecentInvoices, err error) {
	if err := riuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(recentinvoices.Table, recentinvoices.Columns, sqlgraph.NewFieldSpec(recentinvoices.FieldID, field.TypeInt))
	id, ok := riuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RecentInvoices.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := riuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, recentinvoices.FieldID)
		for _, f := range fields {
			if !recentinvoices.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != recentinvoices.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := riuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := riuo.mutation.Status(); ok {
		_spec.SetField(recentinvoices.FieldStatus, field.TypeString, value)
	}
	if value, ok := riuo.mutation.InvoiceID(); ok {
		_spec.SetField(recentinvoices.FieldInvoiceID, field.TypeInt64, value)
	}
	if value, ok := riuo.mutation.AddedInvoiceID(); ok {
		_spec.AddField(recentinvoices.FieldInvoiceID, field.TypeInt64, value)
	}
	if riuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recentinvoices.OwnerTable,
			Columns: []string{recentinvoices.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := riuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recentinvoices.OwnerTable,
			Columns: []string{recentinvoices.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RecentInvoices{config: riuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, riuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recentinvoices.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	riuo.mutation.done = true
	return _node, nil
}
