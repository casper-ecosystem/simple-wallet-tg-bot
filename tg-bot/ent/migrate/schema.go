// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AdressBooksColumns holds the columns for the "adress_books" table.
	AdressBooksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "address", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "in_update", Type: field.TypeBool},
		{Name: "user_address_book", Type: field.TypeInt64},
	}
	// AdressBooksTable holds the schema information for the "adress_books" table.
	AdressBooksTable = &schema.Table{
		Name:       "adress_books",
		Columns:    AdressBooksColumns,
		PrimaryKey: []*schema.Column{AdressBooksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "adress_books_users_address_book",
				Columns:    []*schema.Column{AdressBooksColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// BalancesColumns holds the columns for the "balances" table.
	BalancesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "balance", Type: field.TypeFloat64},
		{Name: "height", Type: field.TypeUint64},
		{Name: "user_balance", Type: field.TypeInt64, Unique: true},
	}
	// BalancesTable holds the schema information for the "balances" table.
	BalancesTable = &schema.Table{
		Name:       "balances",
		Columns:    BalancesColumns,
		PrimaryKey: []*schema.Column{BalancesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "balances_users_balance",
				Columns:    []*schema.Column{BalancesColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// DelegatesColumns holds the columns for the "delegates" table.
	DelegatesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "delegator", Type: field.TypeString},
		{Name: "validator", Type: field.TypeString, Nullable: true},
		{Name: "name", Type: field.TypeString, Nullable: true},
		{Name: "user_balance", Type: field.TypeString, Nullable: true},
		{Name: "amount", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "status", Type: field.TypeString, Nullable: true},
		{Name: "deploy", Type: field.TypeString, Nullable: true},
		{Name: "user_delegates", Type: field.TypeInt64},
	}
	// DelegatesTable holds the schema information for the "delegates" table.
	DelegatesTable = &schema.Table{
		Name:       "delegates",
		Columns:    DelegatesColumns,
		PrimaryKey: []*schema.Column{DelegatesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "delegates_users_delegates",
				Columns:    []*schema.Column{DelegatesColumns[9]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// InvoicesColumns holds the columns for the "invoices" table.
	InvoicesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Nullable: true},
		{Name: "address", Type: field.TypeString, Nullable: true},
		{Name: "amount", Type: field.TypeString, Nullable: true},
		{Name: "currency", Type: field.TypeString, Nullable: true},
		{Name: "comment", Type: field.TypeString, Nullable: true},
		{Name: "active", Type: field.TypeBool, Nullable: true},
		{Name: "repeatability", Type: field.TypeInt, Nullable: true},
		{Name: "paid", Type: field.TypeInt, Nullable: true},
		{Name: "short", Type: field.TypeString, Nullable: true},
		{Name: "memo", Type: field.TypeUint64, Nullable: true},
		{Name: "user_invoices", Type: field.TypeInt64},
	}
	// InvoicesTable holds the schema information for the "invoices" table.
	InvoicesTable = &schema.Table{
		Name:       "invoices",
		Columns:    InvoicesColumns,
		PrimaryKey: []*schema.Column{InvoicesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "invoices_users_invoices",
				Columns:    []*schema.Column{InvoicesColumns[11]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// InvoicesPaymentsColumns holds the columns for the "invoices_payments" table.
	InvoicesPaymentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "from", Type: field.TypeString, Nullable: true},
		{Name: "amount", Type: field.TypeString, Nullable: true},
		{Name: "correct", Type: field.TypeBool, Nullable: true},
		{Name: "invoice_payments", Type: field.TypeInt},
	}
	// InvoicesPaymentsTable holds the schema information for the "invoices_payments" table.
	InvoicesPaymentsTable = &schema.Table{
		Name:       "invoices_payments",
		Columns:    InvoicesPaymentsColumns,
		PrimaryKey: []*schema.Column{InvoicesPaymentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "invoices_payments_invoices_payments",
				Columns:    []*schema.Column{InvoicesPaymentsColumns[4]},
				RefColumns: []*schema.Column{InvoicesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// PrivateKeysColumns holds the columns for the "private_keys" table.
	PrivateKeysColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "private_key", Type: field.TypeBytes, Nullable: true},
		{Name: "user_private_key", Type: field.TypeInt64, Unique: true},
	}
	// PrivateKeysTable holds the schema information for the "private_keys" table.
	PrivateKeysTable = &schema.Table{
		Name:       "private_keys",
		Columns:    PrivateKeysColumns,
		PrimaryKey: []*schema.Column{PrivateKeysColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "private_keys_users_PrivateKey",
				Columns:    []*schema.Column{PrivateKeysColumns[2]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// RecentInvoicesColumns holds the columns for the "recent_invoices" table.
	RecentInvoicesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "status", Type: field.TypeString},
		{Name: "invoice_id", Type: field.TypeInt64, Unique: true},
		{Name: "user_recent_invoices", Type: field.TypeInt64},
	}
	// RecentInvoicesTable holds the schema information for the "recent_invoices" table.
	RecentInvoicesTable = &schema.Table{
		Name:       "recent_invoices",
		Columns:    RecentInvoicesColumns,
		PrimaryKey: []*schema.Column{RecentInvoicesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "recent_invoices_users_recentInvoices",
				Columns:    []*schema.Column{RecentInvoicesColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// RewardsDataColumns holds the columns for the "rewards_data" table.
	RewardsDataColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "validator", Type: field.TypeString},
		{Name: "amount", Type: field.TypeString},
		{Name: "last_reward", Type: field.TypeTime},
		{Name: "first_era", Type: field.TypeInt64, Default: 0},
		{Name: "last_era", Type: field.TypeInt64, Default: 0},
		{Name: "first_era_timestamp", Type: field.TypeString},
		{Name: "last_era_timestamp", Type: field.TypeString},
		{Name: "user_rewards_data", Type: field.TypeInt64},
	}
	// RewardsDataTable holds the schema information for the "rewards_data" table.
	RewardsDataTable = &schema.Table{
		Name:       "rewards_data",
		Columns:    RewardsDataColumns,
		PrimaryKey: []*schema.Column{RewardsDataColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "rewards_data_users_rewards_data",
				Columns:    []*schema.Column{RewardsDataColumns[8]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// SettingsColumns holds the columns for the "settings" table.
	SettingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "last_scanned_block_notificator", Type: field.TypeInt64, Nullable: true},
		{Name: "last_scanned_era_validators", Type: field.TypeInt64, Nullable: true},
	}
	// SettingsTable holds the schema information for the "settings" table.
	SettingsTable = &schema.Table{
		Name:       "settings",
		Columns:    SettingsColumns,
		PrimaryKey: []*schema.Column{SettingsColumns[0]},
	}
	// SwapsColumns holds the columns for the "swaps" table.
	SwapsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "type", Type: field.TypeString, Nullable: true},
		{Name: "to_address", Type: field.TypeString, Nullable: true},
		{Name: "from_currency", Type: field.TypeString, Nullable: true},
		{Name: "to_currency", Type: field.TypeString, Nullable: true},
		{Name: "to_network", Type: field.TypeString, Nullable: true},
		{Name: "from_network", Type: field.TypeString, Nullable: true},
		{Name: "amount", Type: field.TypeString, Nullable: true},
		{Name: "amount_recive", Type: field.TypeString, Nullable: true},
		{Name: "refund_address", Type: field.TypeString, Nullable: true},
		{Name: "swap_id", Type: field.TypeString, Nullable: true},
		{Name: "extra_id", Type: field.TypeString, Nullable: true},
		{Name: "invoice_id", Type: field.TypeInt64, Nullable: true},
		{Name: "user_swaps", Type: field.TypeInt64},
	}
	// SwapsTable holds the schema information for the "swaps" table.
	SwapsTable = &schema.Table{
		Name:       "swaps",
		Columns:    SwapsColumns,
		PrimaryKey: []*schema.Column{SwapsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "swaps_users_swaps",
				Columns:    []*schema.Column{SwapsColumns[13]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TasksColumns holds the columns for the "tasks" table.
	TasksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "data", Type: field.TypeBytes},
	}
	// TasksTable holds the schema information for the "tasks" table.
	TasksTable = &schema.Table{
		Name:       "tasks",
		Columns:    TasksColumns,
		PrimaryKey: []*schema.Column{TasksColumns[0]},
	}
	// TransfersColumns holds the columns for the "transfers" table.
	TransfersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "from_pubkey", Type: field.TypeString},
		{Name: "to_pubkey", Type: field.TypeString, Nullable: true},
		{Name: "name", Type: field.TypeString, Nullable: true},
		{Name: "sender_balance", Type: field.TypeString, Nullable: true},
		{Name: "amount", Type: field.TypeString, Nullable: true},
		{Name: "memo_id", Type: field.TypeUint64, Nullable: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "status", Type: field.TypeString, Nullable: true},
		{Name: "deploy", Type: field.TypeString, Nullable: true},
		{Name: "additional_type", Type: field.TypeString, Nullable: true},
		{Name: "invoice_id", Type: field.TypeInt64, Nullable: true},
		{Name: "user_transfers", Type: field.TypeInt64},
	}
	// TransfersTable holds the schema information for the "transfers" table.
	TransfersTable = &schema.Table{
		Name:       "transfers",
		Columns:    TransfersColumns,
		PrimaryKey: []*schema.Column{TransfersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "transfers_users_transfers",
				Columns:    []*schema.Column{TransfersColumns[12]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UndelegatesColumns holds the columns for the "undelegates" table.
	UndelegatesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "delegator", Type: field.TypeString},
		{Name: "validator", Type: field.TypeString, Nullable: true},
		{Name: "name", Type: field.TypeString, Nullable: true},
		{Name: "staked_balance", Type: field.TypeString, Nullable: true},
		{Name: "amount", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "status", Type: field.TypeString, Nullable: true},
		{Name: "deploy", Type: field.TypeString, Nullable: true},
		{Name: "user_undelegates", Type: field.TypeInt64},
	}
	// UndelegatesTable holds the schema information for the "undelegates" table.
	UndelegatesTable = &schema.Table{
		Name:       "undelegates",
		Columns:    UndelegatesColumns,
		PrimaryKey: []*schema.Column{UndelegatesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "undelegates_users_undelegates",
				Columns:    []*schema.Column{UndelegatesColumns[9]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true},
		{Name: "public_key", Type: field.TypeString, Nullable: true},
		{Name: "password", Type: field.TypeString, Nullable: true},
		{Name: "logged_in", Type: field.TypeBool, Default: false},
		{Name: "last_access", Type: field.TypeTime, Nullable: true},
		{Name: "lock_timeout", Type: field.TypeInt64, Nullable: true},
		{Name: "locked_manual", Type: field.TypeBool, Nullable: true},
		{Name: "notify", Type: field.TypeBool, Default: false},
		{Name: "notify_time", Type: field.TypeInt8, Default: 0},
		{Name: "notify_last_time", Type: field.TypeTime},
		{Name: "store_privat_key", Type: field.TypeBool, Default: false},
		{Name: "enable_logging", Type: field.TypeBool, Default: true},
		{Name: "registered", Type: field.TypeBool, Default: false},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "user_public_key",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[1]},
			},
		},
	}
	// UserStatesColumns holds the columns for the "user_states" table.
	UserStatesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "state", Type: field.TypeString},
		{Name: "data", Type: field.TypeBytes, Nullable: true},
		{Name: "user_state", Type: field.TypeInt64, Unique: true},
	}
	// UserStatesTable holds the schema information for the "user_states" table.
	UserStatesTable = &schema.Table{
		Name:       "user_states",
		Columns:    UserStatesColumns,
		PrimaryKey: []*schema.Column{UserStatesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_states_users_state",
				Columns:    []*schema.Column{UserStatesColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ValidatorsColumns holds the columns for the "validators" table.
	ValidatorsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "address", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString, Nullable: true},
		{Name: "fee", Type: field.TypeInt8, Nullable: true},
		{Name: "delegators", Type: field.TypeInt64, Nullable: true},
		{Name: "active", Type: field.TypeBool, Nullable: true},
	}
	// ValidatorsTable holds the schema information for the "validators" table.
	ValidatorsTable = &schema.Table{
		Name:       "validators",
		Columns:    ValidatorsColumns,
		PrimaryKey: []*schema.Column{ValidatorsColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AdressBooksTable,
		BalancesTable,
		DelegatesTable,
		InvoicesTable,
		InvoicesPaymentsTable,
		PrivateKeysTable,
		RecentInvoicesTable,
		RewardsDataTable,
		SettingsTable,
		SwapsTable,
		TasksTable,
		TransfersTable,
		UndelegatesTable,
		UsersTable,
		UserStatesTable,
		ValidatorsTable,
	}
)

func init() {
	AdressBooksTable.ForeignKeys[0].RefTable = UsersTable
	BalancesTable.ForeignKeys[0].RefTable = UsersTable
	DelegatesTable.ForeignKeys[0].RefTable = UsersTable
	InvoicesTable.ForeignKeys[0].RefTable = UsersTable
	InvoicesPaymentsTable.ForeignKeys[0].RefTable = InvoicesTable
	PrivateKeysTable.ForeignKeys[0].RefTable = UsersTable
	RecentInvoicesTable.ForeignKeys[0].RefTable = UsersTable
	RewardsDataTable.ForeignKeys[0].RefTable = UsersTable
	SwapsTable.ForeignKeys[0].RefTable = UsersTable
	TransfersTable.ForeignKeys[0].RefTable = UsersTable
	UndelegatesTable.ForeignKeys[0].RefTable = UsersTable
	UserStatesTable.ForeignKeys[0].RefTable = UsersTable
}
