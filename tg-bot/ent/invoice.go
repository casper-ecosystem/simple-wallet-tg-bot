// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Simplewallethq/tg-bot/ent/invoice"
	"github.com/Simplewallethq/tg-bot/ent/user"
)

// Invoice is the model entity for the Invoice schema.
type Invoice struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount string `json:"amount,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency string `json:"currency,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment string `json:"comment,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// Repeatability holds the value of the "repeatability" field.
	Repeatability int `json:"repeatability,omitempty"`
	// Paid holds the value of the "paid" field.
	Paid int `json:"paid,omitempty"`
	// Short holds the value of the "short" field.
	Short string `json:"short,omitempty"`
	// Memo holds the value of the "memo" field.
	Memo uint64 `json:"memo,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InvoiceQuery when eager-loading is set.
	Edges         InvoiceEdges `json:"edges"`
	user_invoices *int64
	selectValues  sql.SelectValues
}

// InvoiceEdges holds the relations/edges for other nodes in the graph.
type InvoiceEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// Payments holds the value of the payments edge.
	Payments []*Invoices_payments `json:"payments,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InvoiceEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// PaymentsOrErr returns the Payments value or an error if the edge
// was not loaded in eager-loading.
func (e InvoiceEdges) PaymentsOrErr() ([]*Invoices_payments, error) {
	if e.loadedTypes[1] {
		return e.Payments, nil
	}
	return nil, &NotLoadedError{edge: "payments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Invoice) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case invoice.FieldActive:
			values[i] = new(sql.NullBool)
		case invoice.FieldID, invoice.FieldRepeatability, invoice.FieldPaid, invoice.FieldMemo:
			values[i] = new(sql.NullInt64)
		case invoice.FieldName, invoice.FieldAddress, invoice.FieldAmount, invoice.FieldCurrency, invoice.FieldComment, invoice.FieldShort:
			values[i] = new(sql.NullString)
		case invoice.ForeignKeys[0]: // user_invoices
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Invoice fields.
func (i *Invoice) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case invoice.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case invoice.FieldName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[j])
			} else if value.Valid {
				i.Name = value.String
			}
		case invoice.FieldAddress:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[j])
			} else if value.Valid {
				i.Address = value.String
			}
		case invoice.FieldAmount:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[j])
			} else if value.Valid {
				i.Amount = value.String
			}
		case invoice.FieldCurrency:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[j])
			} else if value.Valid {
				i.Currency = value.String
			}
		case invoice.FieldComment:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[j])
			} else if value.Valid {
				i.Comment = value.String
			}
		case invoice.FieldActive:
			if value, ok := values[j].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[j])
			} else if value.Valid {
				i.Active = value.Bool
			}
		case invoice.FieldRepeatability:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field repeatability", values[j])
			} else if value.Valid {
				i.Repeatability = int(value.Int64)
			}
		case invoice.FieldPaid:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field paid", values[j])
			} else if value.Valid {
				i.Paid = int(value.Int64)
			}
		case invoice.FieldShort:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field short", values[j])
			} else if value.Valid {
				i.Short = value.String
			}
		case invoice.FieldMemo:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field memo", values[j])
			} else if value.Valid {
				i.Memo = uint64(value.Int64)
			}
		case invoice.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_invoices", value)
			} else if value.Valid {
				i.user_invoices = new(int64)
				*i.user_invoices = int64(value.Int64)
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Invoice.
// This includes values selected through modifiers, order, etc.
func (i *Invoice) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Invoice entity.
func (i *Invoice) QueryOwner() *UserQuery {
	return NewInvoiceClient(i.config).QueryOwner(i)
}

// QueryPayments queries the "payments" edge of the Invoice entity.
func (i *Invoice) QueryPayments() *InvoicesPaymentsQuery {
	return NewInvoiceClient(i.config).QueryPayments(i)
}

// Update returns a builder for updating this Invoice.
// Note that you need to call Invoice.Unwrap() before calling this method if this Invoice
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Invoice) Update() *InvoiceUpdateOne {
	return NewInvoiceClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Invoice entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Invoice) Unwrap() *Invoice {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Invoice is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Invoice) String() string {
	var builder strings.Builder
	builder.WriteString("Invoice(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("name=")
	builder.WriteString(i.Name)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(i.Address)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(i.Amount)
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(i.Currency)
	builder.WriteString(", ")
	builder.WriteString("comment=")
	builder.WriteString(i.Comment)
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", i.Active))
	builder.WriteString(", ")
	builder.WriteString("repeatability=")
	builder.WriteString(fmt.Sprintf("%v", i.Repeatability))
	builder.WriteString(", ")
	builder.WriteString("paid=")
	builder.WriteString(fmt.Sprintf("%v", i.Paid))
	builder.WriteString(", ")
	builder.WriteString("short=")
	builder.WriteString(i.Short)
	builder.WriteString(", ")
	builder.WriteString("memo=")
	builder.WriteString(fmt.Sprintf("%v", i.Memo))
	builder.WriteByte(')')
	return builder.String()
}

// Invoices is a parsable slice of Invoice.
type Invoices []*Invoice
