// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Simplewallethq/tg-bot/ent/balances"
	"github.com/Simplewallethq/tg-bot/ent/user"
)

// BalancesCreate is the builder for creating a Balances entity.
type BalancesCreate struct {
	config
	mutation *BalancesMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetBalance sets the "balance" field.
func (bc *BalancesCreate) SetBalance(f float64) *BalancesCreate {
	bc.mutation.SetBalance(f)
	return bc
}

// SetHeight sets the "height" field.
func (bc *BalancesCreate) SetHeight(u uint64) *BalancesCreate {
	bc.mutation.SetHeight(u)
	return bc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (bc *BalancesCreate) SetOwnerID(id int64) *BalancesCreate {
	bc.mutation.SetOwnerID(id)
	return bc
}

// SetOwner sets the "owner" edge to the User entity.
func (bc *BalancesCreate) SetOwner(u *User) *BalancesCreate {
	return bc.SetOwnerID(u.ID)
}

// Mutation returns the BalancesMutation object of the builder.
func (bc *BalancesCreate) Mutation() *BalancesMutation {
	return bc.mutation
}

// Save creates the Balances in the database.
func (bc *BalancesCreate) Save(ctx context.Context) (*Balances, error) {
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BalancesCreate) SaveX(ctx context.Context) *Balances {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BalancesCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BalancesCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BalancesCreate) check() error {
	if _, ok := bc.mutation.Balance(); !ok {
		return &ValidationError{Name: "balance", err: errors.New(`ent: missing required field "Balances.balance"`)}
	}
	if _, ok := bc.mutation.Height(); !ok {
		return &ValidationError{Name: "height", err: errors.New(`ent: missing required field "Balances.height"`)}
	}
	if _, ok := bc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "Balances.owner"`)}
	}
	return nil
}

func (bc *BalancesCreate) sqlSave(ctx context.Context) (*Balances, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BalancesCreate) createSpec() (*Balances, *sqlgraph.CreateSpec) {
	var (
		_node = &Balances{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(balances.Table, sqlgraph.NewFieldSpec(balances.FieldID, field.TypeInt))
	)
	_spec.OnConflict = bc.conflict
	if value, ok := bc.mutation.Balance(); ok {
		_spec.SetField(balances.FieldBalance, field.TypeFloat64, value)
		_node.Balance = value
	}
	if value, ok := bc.mutation.Height(); ok {
		_spec.SetField(balances.FieldHeight, field.TypeUint64, value)
		_node.Height = value
	}
	if nodes := bc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   balances.OwnerTable,
			Columns: []string{balances.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_balance = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Balances.Create().
//		SetBalance(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BalancesUpsert) {
//			SetBalance(v+v).
//		}).
//		Exec(ctx)
func (bc *BalancesCreate) OnConflict(opts ...sql.ConflictOption) *BalancesUpsertOne {
	bc.conflict = opts
	return &BalancesUpsertOne{
		create: bc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Balances.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bc *BalancesCreate) OnConflictColumns(columns ...string) *BalancesUpsertOne {
	bc.conflict = append(bc.conflict, sql.ConflictColumns(columns...))
	return &BalancesUpsertOne{
		create: bc,
	}
}

type (
	// BalancesUpsertOne is the builder for "upsert"-ing
	//  one Balances node.
	BalancesUpsertOne struct {
		create *BalancesCreate
	}

	// BalancesUpsert is the "OnConflict" setter.
	BalancesUpsert struct {
		*sql.UpdateSet
	}
)

// SetBalance sets the "balance" field.
func (u *BalancesUpsert) SetBalance(v float64) *BalancesUpsert {
	u.Set(balances.FieldBalance, v)
	return u
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *BalancesUpsert) UpdateBalance() *BalancesUpsert {
	u.SetExcluded(balances.FieldBalance)
	return u
}

// AddBalance adds v to the "balance" field.
func (u *BalancesUpsert) AddBalance(v float64) *BalancesUpsert {
	u.Add(balances.FieldBalance, v)
	return u
}

// SetHeight sets the "height" field.
func (u *BalancesUpsert) SetHeight(v uint64) *BalancesUpsert {
	u.Set(balances.FieldHeight, v)
	return u
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *BalancesUpsert) UpdateHeight() *BalancesUpsert {
	u.SetExcluded(balances.FieldHeight)
	return u
}

// AddHeight adds v to the "height" field.
func (u *BalancesUpsert) AddHeight(v uint64) *BalancesUpsert {
	u.Add(balances.FieldHeight, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Balances.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BalancesUpsertOne) UpdateNewValues() *BalancesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Balances.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BalancesUpsertOne) Ignore() *BalancesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BalancesUpsertOne) DoNothing() *BalancesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BalancesCreate.OnConflict
// documentation for more info.
func (u *BalancesUpsertOne) Update(set func(*BalancesUpsert)) *BalancesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BalancesUpsert{UpdateSet: update})
	}))
	return u
}

// SetBalance sets the "balance" field.
func (u *BalancesUpsertOne) SetBalance(v float64) *BalancesUpsertOne {
	return u.Update(func(s *BalancesUpsert) {
		s.SetBalance(v)
	})
}

// AddBalance adds v to the "balance" field.
func (u *BalancesUpsertOne) AddBalance(v float64) *BalancesUpsertOne {
	return u.Update(func(s *BalancesUpsert) {
		s.AddBalance(v)
	})
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *BalancesUpsertOne) UpdateBalance() *BalancesUpsertOne {
	return u.Update(func(s *BalancesUpsert) {
		s.UpdateBalance()
	})
}

// SetHeight sets the "height" field.
func (u *BalancesUpsertOne) SetHeight(v uint64) *BalancesUpsertOne {
	return u.Update(func(s *BalancesUpsert) {
		s.SetHeight(v)
	})
}

// AddHeight adds v to the "height" field.
func (u *BalancesUpsertOne) AddHeight(v uint64) *BalancesUpsertOne {
	return u.Update(func(s *BalancesUpsert) {
		s.AddHeight(v)
	})
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *BalancesUpsertOne) UpdateHeight() *BalancesUpsertOne {
	return u.Update(func(s *BalancesUpsert) {
		s.UpdateHeight()
	})
}

// Exec executes the query.
func (u *BalancesUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BalancesCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BalancesUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BalancesUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BalancesUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BalancesCreateBulk is the builder for creating many Balances entities in bulk.
type BalancesCreateBulk struct {
	config
	builders []*BalancesCreate
	conflict []sql.ConflictOption
}

// Save creates the Balances entities in the database.
func (bcb *BalancesCreateBulk) Save(ctx context.Context) ([]*Balances, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Balances, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BalancesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BalancesCreateBulk) SaveX(ctx context.Context) []*Balances {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BalancesCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BalancesCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Balances.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BalancesUpsert) {
//			SetBalance(v+v).
//		}).
//		Exec(ctx)
func (bcb *BalancesCreateBulk) OnConflict(opts ...sql.ConflictOption) *BalancesUpsertBulk {
	bcb.conflict = opts
	return &BalancesUpsertBulk{
		create: bcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Balances.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bcb *BalancesCreateBulk) OnConflictColumns(columns ...string) *BalancesUpsertBulk {
	bcb.conflict = append(bcb.conflict, sql.ConflictColumns(columns...))
	return &BalancesUpsertBulk{
		create: bcb,
	}
}

// BalancesUpsertBulk is the builder for "upsert"-ing
// a bulk of Balances nodes.
type BalancesUpsertBulk struct {
	create *BalancesCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Balances.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BalancesUpsertBulk) UpdateNewValues() *BalancesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Balances.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BalancesUpsertBulk) Ignore() *BalancesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BalancesUpsertBulk) DoNothing() *BalancesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BalancesCreateBulk.OnConflict
// documentation for more info.
func (u *BalancesUpsertBulk) Update(set func(*BalancesUpsert)) *BalancesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BalancesUpsert{UpdateSet: update})
	}))
	return u
}

// SetBalance sets the "balance" field.
func (u *BalancesUpsertBulk) SetBalance(v float64) *BalancesUpsertBulk {
	return u.Update(func(s *BalancesUpsert) {
		s.SetBalance(v)
	})
}

// AddBalance adds v to the "balance" field.
func (u *BalancesUpsertBulk) AddBalance(v float64) *BalancesUpsertBulk {
	return u.Update(func(s *BalancesUpsert) {
		s.AddBalance(v)
	})
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *BalancesUpsertBulk) UpdateBalance() *BalancesUpsertBulk {
	return u.Update(func(s *BalancesUpsert) {
		s.UpdateBalance()
	})
}

// SetHeight sets the "height" field.
func (u *BalancesUpsertBulk) SetHeight(v uint64) *BalancesUpsertBulk {
	return u.Update(func(s *BalancesUpsert) {
		s.SetHeight(v)
	})
}

// AddHeight adds v to the "height" field.
func (u *BalancesUpsertBulk) AddHeight(v uint64) *BalancesUpsertBulk {
	return u.Update(func(s *BalancesUpsert) {
		s.AddHeight(v)
	})
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *BalancesUpsertBulk) UpdateHeight() *BalancesUpsertBulk {
	return u.Update(func(s *BalancesUpsert) {
		s.UpdateHeight()
	})
}

// Exec executes the query.
func (u *BalancesUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BalancesCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BalancesCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BalancesUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
