// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Simplewallethq/tg-bot/ent/predicate"
	"github.com/Simplewallethq/tg-bot/ent/privatekeys"
	"github.com/Simplewallethq/tg-bot/ent/user"
)

// PrivateKeysUpdate is the builder for updating PrivateKeys entities.
type PrivateKeysUpdate struct {
	config
	hooks    []Hook
	mutation *PrivateKeysMutation
}

// Where appends a list predicates to the PrivateKeysUpdate builder.
func (pku *PrivateKeysUpdate) Where(ps ...predicate.PrivateKeys) *PrivateKeysUpdate {
	pku.mutation.Where(ps...)
	return pku
}

// SetPrivateKey sets the "private_key" field.
func (pku *PrivateKeysUpdate) SetPrivateKey(b []byte) *PrivateKeysUpdate {
	pku.mutation.SetPrivateKey(b)
	return pku
}

// ClearPrivateKey clears the value of the "private_key" field.
func (pku *PrivateKeysUpdate) ClearPrivateKey() *PrivateKeysUpdate {
	pku.mutation.ClearPrivateKey()
	return pku
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (pku *PrivateKeysUpdate) SetOwnerID(id int64) *PrivateKeysUpdate {
	pku.mutation.SetOwnerID(id)
	return pku
}

// SetOwner sets the "owner" edge to the User entity.
func (pku *PrivateKeysUpdate) SetOwner(u *User) *PrivateKeysUpdate {
	return pku.SetOwnerID(u.ID)
}

// Mutation returns the PrivateKeysMutation object of the builder.
func (pku *PrivateKeysUpdate) Mutation() *PrivateKeysMutation {
	return pku.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (pku *PrivateKeysUpdate) ClearOwner() *PrivateKeysUpdate {
	pku.mutation.ClearOwner()
	return pku
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pku *PrivateKeysUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pku.sqlSave, pku.mutation, pku.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pku *PrivateKeysUpdate) SaveX(ctx context.Context) int {
	affected, err := pku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pku *PrivateKeysUpdate) Exec(ctx context.Context) error {
	_, err := pku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pku *PrivateKeysUpdate) ExecX(ctx context.Context) {
	if err := pku.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pku *PrivateKeysUpdate) check() error {
	if _, ok := pku.mutation.OwnerID(); pku.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PrivateKeys.owner"`)
	}
	return nil
}

func (pku *PrivateKeysUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pku.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(privatekeys.Table, privatekeys.Columns, sqlgraph.NewFieldSpec(privatekeys.FieldID, field.TypeInt))
	if ps := pku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pku.mutation.PrivateKey(); ok {
		_spec.SetField(privatekeys.FieldPrivateKey, field.TypeBytes, value)
	}
	if pku.mutation.PrivateKeyCleared() {
		_spec.ClearField(privatekeys.FieldPrivateKey, field.TypeBytes)
	}
	if pku.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   privatekeys.OwnerTable,
			Columns: []string{privatekeys.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pku.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   privatekeys.OwnerTable,
			Columns: []string{privatekeys.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{privatekeys.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pku.mutation.done = true
	return n, nil
}

// PrivateKeysUpdateOne is the builder for updating a single PrivateKeys entity.
type PrivateKeysUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PrivateKeysMutation
}

// SetPrivateKey sets the "private_key" field.
func (pkuo *PrivateKeysUpdateOne) SetPrivateKey(b []byte) *PrivateKeysUpdateOne {
	pkuo.mutation.SetPrivateKey(b)
	return pkuo
}

// ClearPrivateKey clears the value of the "private_key" field.
func (pkuo *PrivateKeysUpdateOne) ClearPrivateKey() *PrivateKeysUpdateOne {
	pkuo.mutation.ClearPrivateKey()
	return pkuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (pkuo *PrivateKeysUpdateOne) SetOwnerID(id int64) *PrivateKeysUpdateOne {
	pkuo.mutation.SetOwnerID(id)
	return pkuo
}

// SetOwner sets the "owner" edge to the User entity.
func (pkuo *PrivateKeysUpdateOne) SetOwner(u *User) *PrivateKeysUpdateOne {
	return pkuo.SetOwnerID(u.ID)
}

// Mutation returns the PrivateKeysMutation object of the builder.
func (pkuo *PrivateKeysUpdateOne) Mutation() *PrivateKeysMutation {
	return pkuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (pkuo *PrivateKeysUpdateOne) ClearOwner() *PrivateKeysUpdateOne {
	pkuo.mutation.ClearOwner()
	return pkuo
}

// Where appends a list predicates to the PrivateKeysUpdate builder.
func (pkuo *PrivateKeysUpdateOne) Where(ps ...predicate.PrivateKeys) *PrivateKeysUpdateOne {
	pkuo.mutation.Where(ps...)
	return pkuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pkuo *PrivateKeysUpdateOne) Select(field string, fields ...string) *PrivateKeysUpdateOne {
	pkuo.fields = append([]string{field}, fields...)
	return pkuo
}

// Save executes the query and returns the updated PrivateKeys entity.
func (pkuo *PrivateKeysUpdateOne) Save(ctx context.Context) (*PrivateKeys, error) {
	return withHooks(ctx, pkuo.sqlSave, pkuo.mutation, pkuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pkuo *PrivateKeysUpdateOne) SaveX(ctx context.Context) *PrivateKeys {
	node, err := pkuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pkuo *PrivateKeysUpdateOne) Exec(ctx context.Context) error {
	_, err := pkuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pkuo *PrivateKeysUpdateOne) ExecX(ctx context.Context) {
	if err := pkuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pkuo *PrivateKeysUpdateOne) check() error {
	if _, ok := pkuo.mutation.OwnerID(); pkuo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PrivateKeys.owner"`)
	}
	return nil
}

func (pkuo *PrivateKeysUpdateOne) sqlSave(ctx context.Context) (_node *PrivateKeys, err error) {
	if err := pkuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(privatekeys.Table, privatekeys.Columns, sqlgraph.NewFieldSpec(privatekeys.FieldID, field.TypeInt))
	id, ok := pkuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PrivateKeys.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pkuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, privatekeys.FieldID)
		for _, f := range fields {
			if !privatekeys.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != privatekeys.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pkuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pkuo.mutation.PrivateKey(); ok {
		_spec.SetField(privatekeys.FieldPrivateKey, field.TypeBytes, value)
	}
	if pkuo.mutation.PrivateKeyCleared() {
		_spec.ClearField(privatekeys.FieldPrivateKey, field.TypeBytes)
	}
	if pkuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   privatekeys.OwnerTable,
			Columns: []string{privatekeys.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pkuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   privatekeys.OwnerTable,
			Columns: []string{privatekeys.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PrivateKeys{config: pkuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pkuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{privatekeys.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pkuo.mutation.done = true
	return _node, nil
}
