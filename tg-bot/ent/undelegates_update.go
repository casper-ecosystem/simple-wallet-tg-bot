// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Simplewallethq/tg-bot/ent/predicate"
	"github.com/Simplewallethq/tg-bot/ent/undelegates"
	"github.com/Simplewallethq/tg-bot/ent/user"
)

// UndelegatesUpdate is the builder for updating Undelegates entities.
type UndelegatesUpdate struct {
	config
	hooks    []Hook
	mutation *UndelegatesMutation
}

// Where appends a list predicates to the UndelegatesUpdate builder.
func (uu *UndelegatesUpdate) Where(ps ...predicate.Undelegates) *UndelegatesUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetDelegator sets the "delegator" field.
func (uu *UndelegatesUpdate) SetDelegator(s string) *UndelegatesUpdate {
	uu.mutation.SetDelegator(s)
	return uu
}

// SetValidator sets the "validator" field.
func (uu *UndelegatesUpdate) SetValidator(s string) *UndelegatesUpdate {
	uu.mutation.SetValidator(s)
	return uu
}

// SetNillableValidator sets the "validator" field if the given value is not nil.
func (uu *UndelegatesUpdate) SetNillableValidator(s *string) *UndelegatesUpdate {
	if s != nil {
		uu.SetValidator(*s)
	}
	return uu
}

// ClearValidator clears the value of the "validator" field.
func (uu *UndelegatesUpdate) ClearValidator() *UndelegatesUpdate {
	uu.mutation.ClearValidator()
	return uu
}

// SetName sets the "name" field.
func (uu *UndelegatesUpdate) SetName(s string) *UndelegatesUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uu *UndelegatesUpdate) SetNillableName(s *string) *UndelegatesUpdate {
	if s != nil {
		uu.SetName(*s)
	}
	return uu
}

// ClearName clears the value of the "name" field.
func (uu *UndelegatesUpdate) ClearName() *UndelegatesUpdate {
	uu.mutation.ClearName()
	return uu
}

// SetStakedBalance sets the "staked_balance" field.
func (uu *UndelegatesUpdate) SetStakedBalance(s string) *UndelegatesUpdate {
	uu.mutation.SetStakedBalance(s)
	return uu
}

// SetNillableStakedBalance sets the "staked_balance" field if the given value is not nil.
func (uu *UndelegatesUpdate) SetNillableStakedBalance(s *string) *UndelegatesUpdate {
	if s != nil {
		uu.SetStakedBalance(*s)
	}
	return uu
}

// ClearStakedBalance clears the value of the "staked_balance" field.
func (uu *UndelegatesUpdate) ClearStakedBalance() *UndelegatesUpdate {
	uu.mutation.ClearStakedBalance()
	return uu
}

// SetAmount sets the "amount" field.
func (uu *UndelegatesUpdate) SetAmount(s string) *UndelegatesUpdate {
	uu.mutation.SetAmount(s)
	return uu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (uu *UndelegatesUpdate) SetNillableAmount(s *string) *UndelegatesUpdate {
	if s != nil {
		uu.SetAmount(*s)
	}
	return uu
}

// ClearAmount clears the value of the "amount" field.
func (uu *UndelegatesUpdate) ClearAmount() *UndelegatesUpdate {
	uu.mutation.ClearAmount()
	return uu
}

// SetCreatedAt sets the "created_at" field.
func (uu *UndelegatesUpdate) SetCreatedAt(t time.Time) *UndelegatesUpdate {
	uu.mutation.SetCreatedAt(t)
	return uu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uu *UndelegatesUpdate) SetNillableCreatedAt(t *time.Time) *UndelegatesUpdate {
	if t != nil {
		uu.SetCreatedAt(*t)
	}
	return uu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (uu *UndelegatesUpdate) ClearCreatedAt() *UndelegatesUpdate {
	uu.mutation.ClearCreatedAt()
	return uu
}

// SetStatus sets the "status" field.
func (uu *UndelegatesUpdate) SetStatus(s string) *UndelegatesUpdate {
	uu.mutation.SetStatus(s)
	return uu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uu *UndelegatesUpdate) SetNillableStatus(s *string) *UndelegatesUpdate {
	if s != nil {
		uu.SetStatus(*s)
	}
	return uu
}

// ClearStatus clears the value of the "status" field.
func (uu *UndelegatesUpdate) ClearStatus() *UndelegatesUpdate {
	uu.mutation.ClearStatus()
	return uu
}

// SetDeploy sets the "Deploy" field.
func (uu *UndelegatesUpdate) SetDeploy(s string) *UndelegatesUpdate {
	uu.mutation.SetDeploy(s)
	return uu
}

// SetNillableDeploy sets the "Deploy" field if the given value is not nil.
func (uu *UndelegatesUpdate) SetNillableDeploy(s *string) *UndelegatesUpdate {
	if s != nil {
		uu.SetDeploy(*s)
	}
	return uu
}

// ClearDeploy clears the value of the "Deploy" field.
func (uu *UndelegatesUpdate) ClearDeploy() *UndelegatesUpdate {
	uu.mutation.ClearDeploy()
	return uu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (uu *UndelegatesUpdate) SetOwnerID(id int64) *UndelegatesUpdate {
	uu.mutation.SetOwnerID(id)
	return uu
}

// SetOwner sets the "owner" edge to the User entity.
func (uu *UndelegatesUpdate) SetOwner(u *User) *UndelegatesUpdate {
	return uu.SetOwnerID(u.ID)
}

// Mutation returns the UndelegatesMutation object of the builder.
func (uu *UndelegatesUpdate) Mutation() *UndelegatesMutation {
	return uu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (uu *UndelegatesUpdate) ClearOwner() *UndelegatesUpdate {
	uu.mutation.ClearOwner()
	return uu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UndelegatesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UndelegatesUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UndelegatesUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UndelegatesUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UndelegatesUpdate) check() error {
	if _, ok := uu.mutation.OwnerID(); uu.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Undelegates.owner"`)
	}
	return nil
}

func (uu *UndelegatesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(undelegates.Table, undelegates.Columns, sqlgraph.NewFieldSpec(undelegates.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Delegator(); ok {
		_spec.SetField(undelegates.FieldDelegator, field.TypeString, value)
	}
	if value, ok := uu.mutation.Validator(); ok {
		_spec.SetField(undelegates.FieldValidator, field.TypeString, value)
	}
	if uu.mutation.ValidatorCleared() {
		_spec.ClearField(undelegates.FieldValidator, field.TypeString)
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(undelegates.FieldName, field.TypeString, value)
	}
	if uu.mutation.NameCleared() {
		_spec.ClearField(undelegates.FieldName, field.TypeString)
	}
	if value, ok := uu.mutation.StakedBalance(); ok {
		_spec.SetField(undelegates.FieldStakedBalance, field.TypeString, value)
	}
	if uu.mutation.StakedBalanceCleared() {
		_spec.ClearField(undelegates.FieldStakedBalance, field.TypeString)
	}
	if value, ok := uu.mutation.Amount(); ok {
		_spec.SetField(undelegates.FieldAmount, field.TypeString, value)
	}
	if uu.mutation.AmountCleared() {
		_spec.ClearField(undelegates.FieldAmount, field.TypeString)
	}
	if value, ok := uu.mutation.CreatedAt(); ok {
		_spec.SetField(undelegates.FieldCreatedAt, field.TypeTime, value)
	}
	if uu.mutation.CreatedAtCleared() {
		_spec.ClearField(undelegates.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.Status(); ok {
		_spec.SetField(undelegates.FieldStatus, field.TypeString, value)
	}
	if uu.mutation.StatusCleared() {
		_spec.ClearField(undelegates.FieldStatus, field.TypeString)
	}
	if value, ok := uu.mutation.Deploy(); ok {
		_spec.SetField(undelegates.FieldDeploy, field.TypeString, value)
	}
	if uu.mutation.DeployCleared() {
		_spec.ClearField(undelegates.FieldDeploy, field.TypeString)
	}
	if uu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   undelegates.OwnerTable,
			Columns: []string{undelegates.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   undelegates.OwnerTable,
			Columns: []string{undelegates.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{undelegates.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UndelegatesUpdateOne is the builder for updating a single Undelegates entity.
type UndelegatesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UndelegatesMutation
}

// SetDelegator sets the "delegator" field.
func (uuo *UndelegatesUpdateOne) SetDelegator(s string) *UndelegatesUpdateOne {
	uuo.mutation.SetDelegator(s)
	return uuo
}

// SetValidator sets the "validator" field.
func (uuo *UndelegatesUpdateOne) SetValidator(s string) *UndelegatesUpdateOne {
	uuo.mutation.SetValidator(s)
	return uuo
}

// SetNillableValidator sets the "validator" field if the given value is not nil.
func (uuo *UndelegatesUpdateOne) SetNillableValidator(s *string) *UndelegatesUpdateOne {
	if s != nil {
		uuo.SetValidator(*s)
	}
	return uuo
}

// ClearValidator clears the value of the "validator" field.
func (uuo *UndelegatesUpdateOne) ClearValidator() *UndelegatesUpdateOne {
	uuo.mutation.ClearValidator()
	return uuo
}

// SetName sets the "name" field.
func (uuo *UndelegatesUpdateOne) SetName(s string) *UndelegatesUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuo *UndelegatesUpdateOne) SetNillableName(s *string) *UndelegatesUpdateOne {
	if s != nil {
		uuo.SetName(*s)
	}
	return uuo
}

// ClearName clears the value of the "name" field.
func (uuo *UndelegatesUpdateOne) ClearName() *UndelegatesUpdateOne {
	uuo.mutation.ClearName()
	return uuo
}

// SetStakedBalance sets the "staked_balance" field.
func (uuo *UndelegatesUpdateOne) SetStakedBalance(s string) *UndelegatesUpdateOne {
	uuo.mutation.SetStakedBalance(s)
	return uuo
}

// SetNillableStakedBalance sets the "staked_balance" field if the given value is not nil.
func (uuo *UndelegatesUpdateOne) SetNillableStakedBalance(s *string) *UndelegatesUpdateOne {
	if s != nil {
		uuo.SetStakedBalance(*s)
	}
	return uuo
}

// ClearStakedBalance clears the value of the "staked_balance" field.
func (uuo *UndelegatesUpdateOne) ClearStakedBalance() *UndelegatesUpdateOne {
	uuo.mutation.ClearStakedBalance()
	return uuo
}

// SetAmount sets the "amount" field.
func (uuo *UndelegatesUpdateOne) SetAmount(s string) *UndelegatesUpdateOne {
	uuo.mutation.SetAmount(s)
	return uuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (uuo *UndelegatesUpdateOne) SetNillableAmount(s *string) *UndelegatesUpdateOne {
	if s != nil {
		uuo.SetAmount(*s)
	}
	return uuo
}

// ClearAmount clears the value of the "amount" field.
func (uuo *UndelegatesUpdateOne) ClearAmount() *UndelegatesUpdateOne {
	uuo.mutation.ClearAmount()
	return uuo
}

// SetCreatedAt sets the "created_at" field.
func (uuo *UndelegatesUpdateOne) SetCreatedAt(t time.Time) *UndelegatesUpdateOne {
	uuo.mutation.SetCreatedAt(t)
	return uuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uuo *UndelegatesUpdateOne) SetNillableCreatedAt(t *time.Time) *UndelegatesUpdateOne {
	if t != nil {
		uuo.SetCreatedAt(*t)
	}
	return uuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (uuo *UndelegatesUpdateOne) ClearCreatedAt() *UndelegatesUpdateOne {
	uuo.mutation.ClearCreatedAt()
	return uuo
}

// SetStatus sets the "status" field.
func (uuo *UndelegatesUpdateOne) SetStatus(s string) *UndelegatesUpdateOne {
	uuo.mutation.SetStatus(s)
	return uuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uuo *UndelegatesUpdateOne) SetNillableStatus(s *string) *UndelegatesUpdateOne {
	if s != nil {
		uuo.SetStatus(*s)
	}
	return uuo
}

// ClearStatus clears the value of the "status" field.
func (uuo *UndelegatesUpdateOne) ClearStatus() *UndelegatesUpdateOne {
	uuo.mutation.ClearStatus()
	return uuo
}

// SetDeploy sets the "Deploy" field.
func (uuo *UndelegatesUpdateOne) SetDeploy(s string) *UndelegatesUpdateOne {
	uuo.mutation.SetDeploy(s)
	return uuo
}

// SetNillableDeploy sets the "Deploy" field if the given value is not nil.
func (uuo *UndelegatesUpdateOne) SetNillableDeploy(s *string) *UndelegatesUpdateOne {
	if s != nil {
		uuo.SetDeploy(*s)
	}
	return uuo
}

// ClearDeploy clears the value of the "Deploy" field.
func (uuo *UndelegatesUpdateOne) ClearDeploy() *UndelegatesUpdateOne {
	uuo.mutation.ClearDeploy()
	return uuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (uuo *UndelegatesUpdateOne) SetOwnerID(id int64) *UndelegatesUpdateOne {
	uuo.mutation.SetOwnerID(id)
	return uuo
}

// SetOwner sets the "owner" edge to the User entity.
func (uuo *UndelegatesUpdateOne) SetOwner(u *User) *UndelegatesUpdateOne {
	return uuo.SetOwnerID(u.ID)
}

// Mutation returns the UndelegatesMutation object of the builder.
func (uuo *UndelegatesUpdateOne) Mutation() *UndelegatesMutation {
	return uuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (uuo *UndelegatesUpdateOne) ClearOwner() *UndelegatesUpdateOne {
	uuo.mutation.ClearOwner()
	return uuo
}

// Where appends a list predicates to the UndelegatesUpdate builder.
func (uuo *UndelegatesUpdateOne) Where(ps ...predicate.Undelegates) *UndelegatesUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UndelegatesUpdateOne) Select(field string, fields ...string) *UndelegatesUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated Undelegates entity.
func (uuo *UndelegatesUpdateOne) Save(ctx context.Context) (*Undelegates, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UndelegatesUpdateOne) SaveX(ctx context.Context) *Undelegates {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UndelegatesUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UndelegatesUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UndelegatesUpdateOne) check() error {
	if _, ok := uuo.mutation.OwnerID(); uuo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Undelegates.owner"`)
	}
	return nil
}

func (uuo *UndelegatesUpdateOne) sqlSave(ctx context.Context) (_node *Undelegates, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(undelegates.Table, undelegates.Columns, sqlgraph.NewFieldSpec(undelegates.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Undelegates.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, undelegates.FieldID)
		for _, f := range fields {
			if !undelegates.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != undelegates.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Delegator(); ok {
		_spec.SetField(undelegates.FieldDelegator, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Validator(); ok {
		_spec.SetField(undelegates.FieldValidator, field.TypeString, value)
	}
	if uuo.mutation.ValidatorCleared() {
		_spec.ClearField(undelegates.FieldValidator, field.TypeString)
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(undelegates.FieldName, field.TypeString, value)
	}
	if uuo.mutation.NameCleared() {
		_spec.ClearField(undelegates.FieldName, field.TypeString)
	}
	if value, ok := uuo.mutation.StakedBalance(); ok {
		_spec.SetField(undelegates.FieldStakedBalance, field.TypeString, value)
	}
	if uuo.mutation.StakedBalanceCleared() {
		_spec.ClearField(undelegates.FieldStakedBalance, field.TypeString)
	}
	if value, ok := uuo.mutation.Amount(); ok {
		_spec.SetField(undelegates.FieldAmount, field.TypeString, value)
	}
	if uuo.mutation.AmountCleared() {
		_spec.ClearField(undelegates.FieldAmount, field.TypeString)
	}
	if value, ok := uuo.mutation.CreatedAt(); ok {
		_spec.SetField(undelegates.FieldCreatedAt, field.TypeTime, value)
	}
	if uuo.mutation.CreatedAtCleared() {
		_spec.ClearField(undelegates.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.Status(); ok {
		_spec.SetField(undelegates.FieldStatus, field.TypeString, value)
	}
	if uuo.mutation.StatusCleared() {
		_spec.ClearField(undelegates.FieldStatus, field.TypeString)
	}
	if value, ok := uuo.mutation.Deploy(); ok {
		_spec.SetField(undelegates.FieldDeploy, field.TypeString, value)
	}
	if uuo.mutation.DeployCleared() {
		_spec.ClearField(undelegates.FieldDeploy, field.TypeString)
	}
	if uuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   undelegates.OwnerTable,
			Columns: []string{undelegates.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   undelegates.OwnerTable,
			Columns: []string{undelegates.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Undelegates{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{undelegates.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
