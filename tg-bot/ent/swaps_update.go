// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Simplewallethq/tg-bot/ent/predicate"
	"github.com/Simplewallethq/tg-bot/ent/swaps"
	"github.com/Simplewallethq/tg-bot/ent/user"
)

// SwapsUpdate is the builder for updating Swaps entities.
type SwapsUpdate struct {
	config
	hooks    []Hook
	mutation *SwapsMutation
}

// Where appends a list predicates to the SwapsUpdate builder.
func (su *SwapsUpdate) Where(ps ...predicate.Swaps) *SwapsUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetType sets the "type" field.
func (su *SwapsUpdate) SetType(s string) *SwapsUpdate {
	su.mutation.SetType(s)
	return su
}

// SetNillableType sets the "type" field if the given value is not nil.
func (su *SwapsUpdate) SetNillableType(s *string) *SwapsUpdate {
	if s != nil {
		su.SetType(*s)
	}
	return su
}

// ClearType clears the value of the "type" field.
func (su *SwapsUpdate) ClearType() *SwapsUpdate {
	su.mutation.ClearType()
	return su
}

// SetToAddress sets the "to_address" field.
func (su *SwapsUpdate) SetToAddress(s string) *SwapsUpdate {
	su.mutation.SetToAddress(s)
	return su
}

// SetNillableToAddress sets the "to_address" field if the given value is not nil.
func (su *SwapsUpdate) SetNillableToAddress(s *string) *SwapsUpdate {
	if s != nil {
		su.SetToAddress(*s)
	}
	return su
}

// ClearToAddress clears the value of the "to_address" field.
func (su *SwapsUpdate) ClearToAddress() *SwapsUpdate {
	su.mutation.ClearToAddress()
	return su
}

// SetFromCurrency sets the "from_currency" field.
func (su *SwapsUpdate) SetFromCurrency(s string) *SwapsUpdate {
	su.mutation.SetFromCurrency(s)
	return su
}

// SetNillableFromCurrency sets the "from_currency" field if the given value is not nil.
func (su *SwapsUpdate) SetNillableFromCurrency(s *string) *SwapsUpdate {
	if s != nil {
		su.SetFromCurrency(*s)
	}
	return su
}

// ClearFromCurrency clears the value of the "from_currency" field.
func (su *SwapsUpdate) ClearFromCurrency() *SwapsUpdate {
	su.mutation.ClearFromCurrency()
	return su
}

// SetToCurrency sets the "to_currency" field.
func (su *SwapsUpdate) SetToCurrency(s string) *SwapsUpdate {
	su.mutation.SetToCurrency(s)
	return su
}

// SetNillableToCurrency sets the "to_currency" field if the given value is not nil.
func (su *SwapsUpdate) SetNillableToCurrency(s *string) *SwapsUpdate {
	if s != nil {
		su.SetToCurrency(*s)
	}
	return su
}

// ClearToCurrency clears the value of the "to_currency" field.
func (su *SwapsUpdate) ClearToCurrency() *SwapsUpdate {
	su.mutation.ClearToCurrency()
	return su
}

// SetToNetwork sets the "to_network" field.
func (su *SwapsUpdate) SetToNetwork(s string) *SwapsUpdate {
	su.mutation.SetToNetwork(s)
	return su
}

// SetNillableToNetwork sets the "to_network" field if the given value is not nil.
func (su *SwapsUpdate) SetNillableToNetwork(s *string) *SwapsUpdate {
	if s != nil {
		su.SetToNetwork(*s)
	}
	return su
}

// ClearToNetwork clears the value of the "to_network" field.
func (su *SwapsUpdate) ClearToNetwork() *SwapsUpdate {
	su.mutation.ClearToNetwork()
	return su
}

// SetFromNetwork sets the "from_network" field.
func (su *SwapsUpdate) SetFromNetwork(s string) *SwapsUpdate {
	su.mutation.SetFromNetwork(s)
	return su
}

// SetNillableFromNetwork sets the "from_network" field if the given value is not nil.
func (su *SwapsUpdate) SetNillableFromNetwork(s *string) *SwapsUpdate {
	if s != nil {
		su.SetFromNetwork(*s)
	}
	return su
}

// ClearFromNetwork clears the value of the "from_network" field.
func (su *SwapsUpdate) ClearFromNetwork() *SwapsUpdate {
	su.mutation.ClearFromNetwork()
	return su
}

// SetAmount sets the "amount" field.
func (su *SwapsUpdate) SetAmount(s string) *SwapsUpdate {
	su.mutation.SetAmount(s)
	return su
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (su *SwapsUpdate) SetNillableAmount(s *string) *SwapsUpdate {
	if s != nil {
		su.SetAmount(*s)
	}
	return su
}

// ClearAmount clears the value of the "amount" field.
func (su *SwapsUpdate) ClearAmount() *SwapsUpdate {
	su.mutation.ClearAmount()
	return su
}

// SetAmountRecive sets the "amountRecive" field.
func (su *SwapsUpdate) SetAmountRecive(s string) *SwapsUpdate {
	su.mutation.SetAmountRecive(s)
	return su
}

// SetNillableAmountRecive sets the "amountRecive" field if the given value is not nil.
func (su *SwapsUpdate) SetNillableAmountRecive(s *string) *SwapsUpdate {
	if s != nil {
		su.SetAmountRecive(*s)
	}
	return su
}

// ClearAmountRecive clears the value of the "amountRecive" field.
func (su *SwapsUpdate) ClearAmountRecive() *SwapsUpdate {
	su.mutation.ClearAmountRecive()
	return su
}

// SetRefundAddress sets the "refund_address" field.
func (su *SwapsUpdate) SetRefundAddress(s string) *SwapsUpdate {
	su.mutation.SetRefundAddress(s)
	return su
}

// SetNillableRefundAddress sets the "refund_address" field if the given value is not nil.
func (su *SwapsUpdate) SetNillableRefundAddress(s *string) *SwapsUpdate {
	if s != nil {
		su.SetRefundAddress(*s)
	}
	return su
}

// ClearRefundAddress clears the value of the "refund_address" field.
func (su *SwapsUpdate) ClearRefundAddress() *SwapsUpdate {
	su.mutation.ClearRefundAddress()
	return su
}

// SetSwapID sets the "swap_id" field.
func (su *SwapsUpdate) SetSwapID(s string) *SwapsUpdate {
	su.mutation.SetSwapID(s)
	return su
}

// SetNillableSwapID sets the "swap_id" field if the given value is not nil.
func (su *SwapsUpdate) SetNillableSwapID(s *string) *SwapsUpdate {
	if s != nil {
		su.SetSwapID(*s)
	}
	return su
}

// ClearSwapID clears the value of the "swap_id" field.
func (su *SwapsUpdate) ClearSwapID() *SwapsUpdate {
	su.mutation.ClearSwapID()
	return su
}

// SetExtraID sets the "extra_id" field.
func (su *SwapsUpdate) SetExtraID(s string) *SwapsUpdate {
	su.mutation.SetExtraID(s)
	return su
}

// SetNillableExtraID sets the "extra_id" field if the given value is not nil.
func (su *SwapsUpdate) SetNillableExtraID(s *string) *SwapsUpdate {
	if s != nil {
		su.SetExtraID(*s)
	}
	return su
}

// ClearExtraID clears the value of the "extra_id" field.
func (su *SwapsUpdate) ClearExtraID() *SwapsUpdate {
	su.mutation.ClearExtraID()
	return su
}

// SetInvoiceID sets the "invoiceID" field.
func (su *SwapsUpdate) SetInvoiceID(i int64) *SwapsUpdate {
	su.mutation.ResetInvoiceID()
	su.mutation.SetInvoiceID(i)
	return su
}

// SetNillableInvoiceID sets the "invoiceID" field if the given value is not nil.
func (su *SwapsUpdate) SetNillableInvoiceID(i *int64) *SwapsUpdate {
	if i != nil {
		su.SetInvoiceID(*i)
	}
	return su
}

// AddInvoiceID adds i to the "invoiceID" field.
func (su *SwapsUpdate) AddInvoiceID(i int64) *SwapsUpdate {
	su.mutation.AddInvoiceID(i)
	return su
}

// ClearInvoiceID clears the value of the "invoiceID" field.
func (su *SwapsUpdate) ClearInvoiceID() *SwapsUpdate {
	su.mutation.ClearInvoiceID()
	return su
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (su *SwapsUpdate) SetOwnerID(id int64) *SwapsUpdate {
	su.mutation.SetOwnerID(id)
	return su
}

// SetOwner sets the "owner" edge to the User entity.
func (su *SwapsUpdate) SetOwner(u *User) *SwapsUpdate {
	return su.SetOwnerID(u.ID)
}

// Mutation returns the SwapsMutation object of the builder.
func (su *SwapsUpdate) Mutation() *SwapsMutation {
	return su.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (su *SwapsUpdate) ClearOwner() *SwapsUpdate {
	su.mutation.ClearOwner()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SwapsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SwapsUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SwapsUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SwapsUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SwapsUpdate) check() error {
	if _, ok := su.mutation.OwnerID(); su.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Swaps.owner"`)
	}
	return nil
}

func (su *SwapsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(swaps.Table, swaps.Columns, sqlgraph.NewFieldSpec(swaps.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.GetType(); ok {
		_spec.SetField(swaps.FieldType, field.TypeString, value)
	}
	if su.mutation.TypeCleared() {
		_spec.ClearField(swaps.FieldType, field.TypeString)
	}
	if value, ok := su.mutation.ToAddress(); ok {
		_spec.SetField(swaps.FieldToAddress, field.TypeString, value)
	}
	if su.mutation.ToAddressCleared() {
		_spec.ClearField(swaps.FieldToAddress, field.TypeString)
	}
	if value, ok := su.mutation.FromCurrency(); ok {
		_spec.SetField(swaps.FieldFromCurrency, field.TypeString, value)
	}
	if su.mutation.FromCurrencyCleared() {
		_spec.ClearField(swaps.FieldFromCurrency, field.TypeString)
	}
	if value, ok := su.mutation.ToCurrency(); ok {
		_spec.SetField(swaps.FieldToCurrency, field.TypeString, value)
	}
	if su.mutation.ToCurrencyCleared() {
		_spec.ClearField(swaps.FieldToCurrency, field.TypeString)
	}
	if value, ok := su.mutation.ToNetwork(); ok {
		_spec.SetField(swaps.FieldToNetwork, field.TypeString, value)
	}
	if su.mutation.ToNetworkCleared() {
		_spec.ClearField(swaps.FieldToNetwork, field.TypeString)
	}
	if value, ok := su.mutation.FromNetwork(); ok {
		_spec.SetField(swaps.FieldFromNetwork, field.TypeString, value)
	}
	if su.mutation.FromNetworkCleared() {
		_spec.ClearField(swaps.FieldFromNetwork, field.TypeString)
	}
	if value, ok := su.mutation.Amount(); ok {
		_spec.SetField(swaps.FieldAmount, field.TypeString, value)
	}
	if su.mutation.AmountCleared() {
		_spec.ClearField(swaps.FieldAmount, field.TypeString)
	}
	if value, ok := su.mutation.AmountRecive(); ok {
		_spec.SetField(swaps.FieldAmountRecive, field.TypeString, value)
	}
	if su.mutation.AmountReciveCleared() {
		_spec.ClearField(swaps.FieldAmountRecive, field.TypeString)
	}
	if value, ok := su.mutation.RefundAddress(); ok {
		_spec.SetField(swaps.FieldRefundAddress, field.TypeString, value)
	}
	if su.mutation.RefundAddressCleared() {
		_spec.ClearField(swaps.FieldRefundAddress, field.TypeString)
	}
	if value, ok := su.mutation.SwapID(); ok {
		_spec.SetField(swaps.FieldSwapID, field.TypeString, value)
	}
	if su.mutation.SwapIDCleared() {
		_spec.ClearField(swaps.FieldSwapID, field.TypeString)
	}
	if value, ok := su.mutation.ExtraID(); ok {
		_spec.SetField(swaps.FieldExtraID, field.TypeString, value)
	}
	if su.mutation.ExtraIDCleared() {
		_spec.ClearField(swaps.FieldExtraID, field.TypeString)
	}
	if value, ok := su.mutation.InvoiceID(); ok {
		_spec.SetField(swaps.FieldInvoiceID, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedInvoiceID(); ok {
		_spec.AddField(swaps.FieldInvoiceID, field.TypeInt64, value)
	}
	if su.mutation.InvoiceIDCleared() {
		_spec.ClearField(swaps.FieldInvoiceID, field.TypeInt64)
	}
	if su.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   swaps.OwnerTable,
			Columns: []string{swaps.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   swaps.OwnerTable,
			Columns: []string{swaps.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{swaps.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SwapsUpdateOne is the builder for updating a single Swaps entity.
type SwapsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SwapsMutation
}

// SetType sets the "type" field.
func (suo *SwapsUpdateOne) SetType(s string) *SwapsUpdateOne {
	suo.mutation.SetType(s)
	return suo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (suo *SwapsUpdateOne) SetNillableType(s *string) *SwapsUpdateOne {
	if s != nil {
		suo.SetType(*s)
	}
	return suo
}

// ClearType clears the value of the "type" field.
func (suo *SwapsUpdateOne) ClearType() *SwapsUpdateOne {
	suo.mutation.ClearType()
	return suo
}

// SetToAddress sets the "to_address" field.
func (suo *SwapsUpdateOne) SetToAddress(s string) *SwapsUpdateOne {
	suo.mutation.SetToAddress(s)
	return suo
}

// SetNillableToAddress sets the "to_address" field if the given value is not nil.
func (suo *SwapsUpdateOne) SetNillableToAddress(s *string) *SwapsUpdateOne {
	if s != nil {
		suo.SetToAddress(*s)
	}
	return suo
}

// ClearToAddress clears the value of the "to_address" field.
func (suo *SwapsUpdateOne) ClearToAddress() *SwapsUpdateOne {
	suo.mutation.ClearToAddress()
	return suo
}

// SetFromCurrency sets the "from_currency" field.
func (suo *SwapsUpdateOne) SetFromCurrency(s string) *SwapsUpdateOne {
	suo.mutation.SetFromCurrency(s)
	return suo
}

// SetNillableFromCurrency sets the "from_currency" field if the given value is not nil.
func (suo *SwapsUpdateOne) SetNillableFromCurrency(s *string) *SwapsUpdateOne {
	if s != nil {
		suo.SetFromCurrency(*s)
	}
	return suo
}

// ClearFromCurrency clears the value of the "from_currency" field.
func (suo *SwapsUpdateOne) ClearFromCurrency() *SwapsUpdateOne {
	suo.mutation.ClearFromCurrency()
	return suo
}

// SetToCurrency sets the "to_currency" field.
func (suo *SwapsUpdateOne) SetToCurrency(s string) *SwapsUpdateOne {
	suo.mutation.SetToCurrency(s)
	return suo
}

// SetNillableToCurrency sets the "to_currency" field if the given value is not nil.
func (suo *SwapsUpdateOne) SetNillableToCurrency(s *string) *SwapsUpdateOne {
	if s != nil {
		suo.SetToCurrency(*s)
	}
	return suo
}

// ClearToCurrency clears the value of the "to_currency" field.
func (suo *SwapsUpdateOne) ClearToCurrency() *SwapsUpdateOne {
	suo.mutation.ClearToCurrency()
	return suo
}

// SetToNetwork sets the "to_network" field.
func (suo *SwapsUpdateOne) SetToNetwork(s string) *SwapsUpdateOne {
	suo.mutation.SetToNetwork(s)
	return suo
}

// SetNillableToNetwork sets the "to_network" field if the given value is not nil.
func (suo *SwapsUpdateOne) SetNillableToNetwork(s *string) *SwapsUpdateOne {
	if s != nil {
		suo.SetToNetwork(*s)
	}
	return suo
}

// ClearToNetwork clears the value of the "to_network" field.
func (suo *SwapsUpdateOne) ClearToNetwork() *SwapsUpdateOne {
	suo.mutation.ClearToNetwork()
	return suo
}

// SetFromNetwork sets the "from_network" field.
func (suo *SwapsUpdateOne) SetFromNetwork(s string) *SwapsUpdateOne {
	suo.mutation.SetFromNetwork(s)
	return suo
}

// SetNillableFromNetwork sets the "from_network" field if the given value is not nil.
func (suo *SwapsUpdateOne) SetNillableFromNetwork(s *string) *SwapsUpdateOne {
	if s != nil {
		suo.SetFromNetwork(*s)
	}
	return suo
}

// ClearFromNetwork clears the value of the "from_network" field.
func (suo *SwapsUpdateOne) ClearFromNetwork() *SwapsUpdateOne {
	suo.mutation.ClearFromNetwork()
	return suo
}

// SetAmount sets the "amount" field.
func (suo *SwapsUpdateOne) SetAmount(s string) *SwapsUpdateOne {
	suo.mutation.SetAmount(s)
	return suo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (suo *SwapsUpdateOne) SetNillableAmount(s *string) *SwapsUpdateOne {
	if s != nil {
		suo.SetAmount(*s)
	}
	return suo
}

// ClearAmount clears the value of the "amount" field.
func (suo *SwapsUpdateOne) ClearAmount() *SwapsUpdateOne {
	suo.mutation.ClearAmount()
	return suo
}

// SetAmountRecive sets the "amountRecive" field.
func (suo *SwapsUpdateOne) SetAmountRecive(s string) *SwapsUpdateOne {
	suo.mutation.SetAmountRecive(s)
	return suo
}

// SetNillableAmountRecive sets the "amountRecive" field if the given value is not nil.
func (suo *SwapsUpdateOne) SetNillableAmountRecive(s *string) *SwapsUpdateOne {
	if s != nil {
		suo.SetAmountRecive(*s)
	}
	return suo
}

// ClearAmountRecive clears the value of the "amountRecive" field.
func (suo *SwapsUpdateOne) ClearAmountRecive() *SwapsUpdateOne {
	suo.mutation.ClearAmountRecive()
	return suo
}

// SetRefundAddress sets the "refund_address" field.
func (suo *SwapsUpdateOne) SetRefundAddress(s string) *SwapsUpdateOne {
	suo.mutation.SetRefundAddress(s)
	return suo
}

// SetNillableRefundAddress sets the "refund_address" field if the given value is not nil.
func (suo *SwapsUpdateOne) SetNillableRefundAddress(s *string) *SwapsUpdateOne {
	if s != nil {
		suo.SetRefundAddress(*s)
	}
	return suo
}

// ClearRefundAddress clears the value of the "refund_address" field.
func (suo *SwapsUpdateOne) ClearRefundAddress() *SwapsUpdateOne {
	suo.mutation.ClearRefundAddress()
	return suo
}

// SetSwapID sets the "swap_id" field.
func (suo *SwapsUpdateOne) SetSwapID(s string) *SwapsUpdateOne {
	suo.mutation.SetSwapID(s)
	return suo
}

// SetNillableSwapID sets the "swap_id" field if the given value is not nil.
func (suo *SwapsUpdateOne) SetNillableSwapID(s *string) *SwapsUpdateOne {
	if s != nil {
		suo.SetSwapID(*s)
	}
	return suo
}

// ClearSwapID clears the value of the "swap_id" field.
func (suo *SwapsUpdateOne) ClearSwapID() *SwapsUpdateOne {
	suo.mutation.ClearSwapID()
	return suo
}

// SetExtraID sets the "extra_id" field.
func (suo *SwapsUpdateOne) SetExtraID(s string) *SwapsUpdateOne {
	suo.mutation.SetExtraID(s)
	return suo
}

// SetNillableExtraID sets the "extra_id" field if the given value is not nil.
func (suo *SwapsUpdateOne) SetNillableExtraID(s *string) *SwapsUpdateOne {
	if s != nil {
		suo.SetExtraID(*s)
	}
	return suo
}

// ClearExtraID clears the value of the "extra_id" field.
func (suo *SwapsUpdateOne) ClearExtraID() *SwapsUpdateOne {
	suo.mutation.ClearExtraID()
	return suo
}

// SetInvoiceID sets the "invoiceID" field.
func (suo *SwapsUpdateOne) SetInvoiceID(i int64) *SwapsUpdateOne {
	suo.mutation.ResetInvoiceID()
	suo.mutation.SetInvoiceID(i)
	return suo
}

// SetNillableInvoiceID sets the "invoiceID" field if the given value is not nil.
func (suo *SwapsUpdateOne) SetNillableInvoiceID(i *int64) *SwapsUpdateOne {
	if i != nil {
		suo.SetInvoiceID(*i)
	}
	return suo
}

// AddInvoiceID adds i to the "invoiceID" field.
func (suo *SwapsUpdateOne) AddInvoiceID(i int64) *SwapsUpdateOne {
	suo.mutation.AddInvoiceID(i)
	return suo
}

// ClearInvoiceID clears the value of the "invoiceID" field.
func (suo *SwapsUpdateOne) ClearInvoiceID() *SwapsUpdateOne {
	suo.mutation.ClearInvoiceID()
	return suo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (suo *SwapsUpdateOne) SetOwnerID(id int64) *SwapsUpdateOne {
	suo.mutation.SetOwnerID(id)
	return suo
}

// SetOwner sets the "owner" edge to the User entity.
func (suo *SwapsUpdateOne) SetOwner(u *User) *SwapsUpdateOne {
	return suo.SetOwnerID(u.ID)
}

// Mutation returns the SwapsMutation object of the builder.
func (suo *SwapsUpdateOne) Mutation() *SwapsMutation {
	return suo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (suo *SwapsUpdateOne) ClearOwner() *SwapsUpdateOne {
	suo.mutation.ClearOwner()
	return suo
}

// Where appends a list predicates to the SwapsUpdate builder.
func (suo *SwapsUpdateOne) Where(ps ...predicate.Swaps) *SwapsUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SwapsUpdateOne) Select(field string, fields ...string) *SwapsUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Swaps entity.
func (suo *SwapsUpdateOne) Save(ctx context.Context) (*Swaps, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SwapsUpdateOne) SaveX(ctx context.Context) *Swaps {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SwapsUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SwapsUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SwapsUpdateOne) check() error {
	if _, ok := suo.mutation.OwnerID(); suo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Swaps.owner"`)
	}
	return nil
}

func (suo *SwapsUpdateOne) sqlSave(ctx context.Context) (_node *Swaps, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(swaps.Table, swaps.Columns, sqlgraph.NewFieldSpec(swaps.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Swaps.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, swaps.FieldID)
		for _, f := range fields {
			if !swaps.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != swaps.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.GetType(); ok {
		_spec.SetField(swaps.FieldType, field.TypeString, value)
	}
	if suo.mutation.TypeCleared() {
		_spec.ClearField(swaps.FieldType, field.TypeString)
	}
	if value, ok := suo.mutation.ToAddress(); ok {
		_spec.SetField(swaps.FieldToAddress, field.TypeString, value)
	}
	if suo.mutation.ToAddressCleared() {
		_spec.ClearField(swaps.FieldToAddress, field.TypeString)
	}
	if value, ok := suo.mutation.FromCurrency(); ok {
		_spec.SetField(swaps.FieldFromCurrency, field.TypeString, value)
	}
	if suo.mutation.FromCurrencyCleared() {
		_spec.ClearField(swaps.FieldFromCurrency, field.TypeString)
	}
	if value, ok := suo.mutation.ToCurrency(); ok {
		_spec.SetField(swaps.FieldToCurrency, field.TypeString, value)
	}
	if suo.mutation.ToCurrencyCleared() {
		_spec.ClearField(swaps.FieldToCurrency, field.TypeString)
	}
	if value, ok := suo.mutation.ToNetwork(); ok {
		_spec.SetField(swaps.FieldToNetwork, field.TypeString, value)
	}
	if suo.mutation.ToNetworkCleared() {
		_spec.ClearField(swaps.FieldToNetwork, field.TypeString)
	}
	if value, ok := suo.mutation.FromNetwork(); ok {
		_spec.SetField(swaps.FieldFromNetwork, field.TypeString, value)
	}
	if suo.mutation.FromNetworkCleared() {
		_spec.ClearField(swaps.FieldFromNetwork, field.TypeString)
	}
	if value, ok := suo.mutation.Amount(); ok {
		_spec.SetField(swaps.FieldAmount, field.TypeString, value)
	}
	if suo.mutation.AmountCleared() {
		_spec.ClearField(swaps.FieldAmount, field.TypeString)
	}
	if value, ok := suo.mutation.AmountRecive(); ok {
		_spec.SetField(swaps.FieldAmountRecive, field.TypeString, value)
	}
	if suo.mutation.AmountReciveCleared() {
		_spec.ClearField(swaps.FieldAmountRecive, field.TypeString)
	}
	if value, ok := suo.mutation.RefundAddress(); ok {
		_spec.SetField(swaps.FieldRefundAddress, field.TypeString, value)
	}
	if suo.mutation.RefundAddressCleared() {
		_spec.ClearField(swaps.FieldRefundAddress, field.TypeString)
	}
	if value, ok := suo.mutation.SwapID(); ok {
		_spec.SetField(swaps.FieldSwapID, field.TypeString, value)
	}
	if suo.mutation.SwapIDCleared() {
		_spec.ClearField(swaps.FieldSwapID, field.TypeString)
	}
	if value, ok := suo.mutation.ExtraID(); ok {
		_spec.SetField(swaps.FieldExtraID, field.TypeString, value)
	}
	if suo.mutation.ExtraIDCleared() {
		_spec.ClearField(swaps.FieldExtraID, field.TypeString)
	}
	if value, ok := suo.mutation.InvoiceID(); ok {
		_spec.SetField(swaps.FieldInvoiceID, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedInvoiceID(); ok {
		_spec.AddField(swaps.FieldInvoiceID, field.TypeInt64, value)
	}
	if suo.mutation.InvoiceIDCleared() {
		_spec.ClearField(swaps.FieldInvoiceID, field.TypeInt64)
	}
	if suo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   swaps.OwnerTable,
			Columns: []string{swaps.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   swaps.OwnerTable,
			Columns: []string{swaps.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Swaps{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{swaps.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
