// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Simplewallethq/tg-bot/ent/invoice"
	"github.com/Simplewallethq/tg-bot/ent/invoices_payments"
)

// Invoices_payments is the model entity for the Invoices_payments schema.
type Invoices_payments struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// From holds the value of the "from" field.
	From string `json:"from,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount string `json:"amount,omitempty"`
	// Correct holds the value of the "correct" field.
	Correct bool `json:"correct,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the Invoices_paymentsQuery when eager-loading is set.
	Edges            Invoices_paymentsEdges `json:"edges"`
	invoice_payments *int
	selectValues     sql.SelectValues
}

// Invoices_paymentsEdges holds the relations/edges for other nodes in the graph.
type Invoices_paymentsEdges struct {
	// Invoice holds the value of the invoice edge.
	Invoice *Invoice `json:"invoice,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// InvoiceOrErr returns the Invoice value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e Invoices_paymentsEdges) InvoiceOrErr() (*Invoice, error) {
	if e.loadedTypes[0] {
		if e.Invoice == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: invoice.Label}
		}
		return e.Invoice, nil
	}
	return nil, &NotLoadedError{edge: "invoice"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Invoices_payments) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case invoices_payments.FieldCorrect:
			values[i] = new(sql.NullBool)
		case invoices_payments.FieldID:
			values[i] = new(sql.NullInt64)
		case invoices_payments.FieldFrom, invoices_payments.FieldAmount:
			values[i] = new(sql.NullString)
		case invoices_payments.ForeignKeys[0]: // invoice_payments
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Invoices_payments fields.
func (ip *Invoices_payments) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case invoices_payments.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ip.ID = int(value.Int64)
		case invoices_payments.FieldFrom:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from", values[i])
			} else if value.Valid {
				ip.From = value.String
			}
		case invoices_payments.FieldAmount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				ip.Amount = value.String
			}
		case invoices_payments.FieldCorrect:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field correct", values[i])
			} else if value.Valid {
				ip.Correct = value.Bool
			}
		case invoices_payments.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field invoice_payments", value)
			} else if value.Valid {
				ip.invoice_payments = new(int)
				*ip.invoice_payments = int(value.Int64)
			}
		default:
			ip.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Invoices_payments.
// This includes values selected through modifiers, order, etc.
func (ip *Invoices_payments) Value(name string) (ent.Value, error) {
	return ip.selectValues.Get(name)
}

// QueryInvoice queries the "invoice" edge of the Invoices_payments entity.
func (ip *Invoices_payments) QueryInvoice() *InvoiceQuery {
	return NewInvoicesPaymentsClient(ip.config).QueryInvoice(ip)
}

// Update returns a builder for updating this Invoices_payments.
// Note that you need to call Invoices_payments.Unwrap() before calling this method if this Invoices_payments
// was returned from a transaction, and the transaction was committed or rolled back.
func (ip *Invoices_payments) Update() *InvoicesPaymentsUpdateOne {
	return NewInvoicesPaymentsClient(ip.config).UpdateOne(ip)
}

// Unwrap unwraps the Invoices_payments entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ip *Invoices_payments) Unwrap() *Invoices_payments {
	_tx, ok := ip.config.driver.(*txDriver)
	if !ok {
		panic("ent: Invoices_payments is not a transactional entity")
	}
	ip.config.driver = _tx.drv
	return ip
}

// String implements the fmt.Stringer.
func (ip *Invoices_payments) String() string {
	var builder strings.Builder
	builder.WriteString("Invoices_payments(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ip.ID))
	builder.WriteString("from=")
	builder.WriteString(ip.From)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(ip.Amount)
	builder.WriteString(", ")
	builder.WriteString("correct=")
	builder.WriteString(fmt.Sprintf("%v", ip.Correct))
	builder.WriteByte(')')
	return builder.String()
}

// Invoices_paymentsSlice is a parsable slice of Invoices_payments.
type Invoices_paymentsSlice []*Invoices_payments
