// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/predicate"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/transfers"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/user"
)

// TransfersUpdate is the builder for updating Transfers entities.
type TransfersUpdate struct {
	config
	hooks    []Hook
	mutation *TransfersMutation
}

// Where appends a list predicates to the TransfersUpdate builder.
func (tu *TransfersUpdate) Where(ps ...predicate.Transfers) *TransfersUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetFromPubkey sets the "from_pubkey" field.
func (tu *TransfersUpdate) SetFromPubkey(s string) *TransfersUpdate {
	tu.mutation.SetFromPubkey(s)
	return tu
}

// SetToPubkey sets the "to_pubkey" field.
func (tu *TransfersUpdate) SetToPubkey(s string) *TransfersUpdate {
	tu.mutation.SetToPubkey(s)
	return tu
}

// SetNillableToPubkey sets the "to_pubkey" field if the given value is not nil.
func (tu *TransfersUpdate) SetNillableToPubkey(s *string) *TransfersUpdate {
	if s != nil {
		tu.SetToPubkey(*s)
	}
	return tu
}

// ClearToPubkey clears the value of the "to_pubkey" field.
func (tu *TransfersUpdate) ClearToPubkey() *TransfersUpdate {
	tu.mutation.ClearToPubkey()
	return tu
}

// SetName sets the "name" field.
func (tu *TransfersUpdate) SetName(s string) *TransfersUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TransfersUpdate) SetNillableName(s *string) *TransfersUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// ClearName clears the value of the "name" field.
func (tu *TransfersUpdate) ClearName() *TransfersUpdate {
	tu.mutation.ClearName()
	return tu
}

// SetSenderBalance sets the "sender_balance" field.
func (tu *TransfersUpdate) SetSenderBalance(s string) *TransfersUpdate {
	tu.mutation.SetSenderBalance(s)
	return tu
}

// SetNillableSenderBalance sets the "sender_balance" field if the given value is not nil.
func (tu *TransfersUpdate) SetNillableSenderBalance(s *string) *TransfersUpdate {
	if s != nil {
		tu.SetSenderBalance(*s)
	}
	return tu
}

// ClearSenderBalance clears the value of the "sender_balance" field.
func (tu *TransfersUpdate) ClearSenderBalance() *TransfersUpdate {
	tu.mutation.ClearSenderBalance()
	return tu
}

// SetAmount sets the "amount" field.
func (tu *TransfersUpdate) SetAmount(s string) *TransfersUpdate {
	tu.mutation.SetAmount(s)
	return tu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tu *TransfersUpdate) SetNillableAmount(s *string) *TransfersUpdate {
	if s != nil {
		tu.SetAmount(*s)
	}
	return tu
}

// ClearAmount clears the value of the "amount" field.
func (tu *TransfersUpdate) ClearAmount() *TransfersUpdate {
	tu.mutation.ClearAmount()
	return tu
}

// SetMemoID sets the "memo_id" field.
func (tu *TransfersUpdate) SetMemoID(u uint64) *TransfersUpdate {
	tu.mutation.ResetMemoID()
	tu.mutation.SetMemoID(u)
	return tu
}

// SetNillableMemoID sets the "memo_id" field if the given value is not nil.
func (tu *TransfersUpdate) SetNillableMemoID(u *uint64) *TransfersUpdate {
	if u != nil {
		tu.SetMemoID(*u)
	}
	return tu
}

// AddMemoID adds u to the "memo_id" field.
func (tu *TransfersUpdate) AddMemoID(u int64) *TransfersUpdate {
	tu.mutation.AddMemoID(u)
	return tu
}

// ClearMemoID clears the value of the "memo_id" field.
func (tu *TransfersUpdate) ClearMemoID() *TransfersUpdate {
	tu.mutation.ClearMemoID()
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TransfersUpdate) SetCreatedAt(t time.Time) *TransfersUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TransfersUpdate) SetNillableCreatedAt(t *time.Time) *TransfersUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (tu *TransfersUpdate) ClearCreatedAt() *TransfersUpdate {
	tu.mutation.ClearCreatedAt()
	return tu
}

// SetStatus sets the "status" field.
func (tu *TransfersUpdate) SetStatus(s string) *TransfersUpdate {
	tu.mutation.SetStatus(s)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TransfersUpdate) SetNillableStatus(s *string) *TransfersUpdate {
	if s != nil {
		tu.SetStatus(*s)
	}
	return tu
}

// ClearStatus clears the value of the "status" field.
func (tu *TransfersUpdate) ClearStatus() *TransfersUpdate {
	tu.mutation.ClearStatus()
	return tu
}

// SetDeploy sets the "Deploy" field.
func (tu *TransfersUpdate) SetDeploy(s string) *TransfersUpdate {
	tu.mutation.SetDeploy(s)
	return tu
}

// SetNillableDeploy sets the "Deploy" field if the given value is not nil.
func (tu *TransfersUpdate) SetNillableDeploy(s *string) *TransfersUpdate {
	if s != nil {
		tu.SetDeploy(*s)
	}
	return tu
}

// ClearDeploy clears the value of the "Deploy" field.
func (tu *TransfersUpdate) ClearDeploy() *TransfersUpdate {
	tu.mutation.ClearDeploy()
	return tu
}

// SetAdditionalType sets the "AdditionalType" field.
func (tu *TransfersUpdate) SetAdditionalType(s string) *TransfersUpdate {
	tu.mutation.SetAdditionalType(s)
	return tu
}

// SetNillableAdditionalType sets the "AdditionalType" field if the given value is not nil.
func (tu *TransfersUpdate) SetNillableAdditionalType(s *string) *TransfersUpdate {
	if s != nil {
		tu.SetAdditionalType(*s)
	}
	return tu
}

// ClearAdditionalType clears the value of the "AdditionalType" field.
func (tu *TransfersUpdate) ClearAdditionalType() *TransfersUpdate {
	tu.mutation.ClearAdditionalType()
	return tu
}

// SetInvoiceID sets the "invoiceID" field.
func (tu *TransfersUpdate) SetInvoiceID(i int64) *TransfersUpdate {
	tu.mutation.ResetInvoiceID()
	tu.mutation.SetInvoiceID(i)
	return tu
}

// SetNillableInvoiceID sets the "invoiceID" field if the given value is not nil.
func (tu *TransfersUpdate) SetNillableInvoiceID(i *int64) *TransfersUpdate {
	if i != nil {
		tu.SetInvoiceID(*i)
	}
	return tu
}

// AddInvoiceID adds i to the "invoiceID" field.
func (tu *TransfersUpdate) AddInvoiceID(i int64) *TransfersUpdate {
	tu.mutation.AddInvoiceID(i)
	return tu
}

// ClearInvoiceID clears the value of the "invoiceID" field.
func (tu *TransfersUpdate) ClearInvoiceID() *TransfersUpdate {
	tu.mutation.ClearInvoiceID()
	return tu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (tu *TransfersUpdate) SetOwnerID(id int64) *TransfersUpdate {
	tu.mutation.SetOwnerID(id)
	return tu
}

// SetOwner sets the "owner" edge to the User entity.
func (tu *TransfersUpdate) SetOwner(u *User) *TransfersUpdate {
	return tu.SetOwnerID(u.ID)
}

// Mutation returns the TransfersMutation object of the builder.
func (tu *TransfersUpdate) Mutation() *TransfersMutation {
	return tu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (tu *TransfersUpdate) ClearOwner() *TransfersUpdate {
	tu.mutation.ClearOwner()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TransfersUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TransfersUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TransfersUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TransfersUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TransfersUpdate) check() error {
	if _, ok := tu.mutation.OwnerID(); tu.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Transfers.owner"`)
	}
	return nil
}

func (tu *TransfersUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(transfers.Table, transfers.Columns, sqlgraph.NewFieldSpec(transfers.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.FromPubkey(); ok {
		_spec.SetField(transfers.FieldFromPubkey, field.TypeString, value)
	}
	if value, ok := tu.mutation.ToPubkey(); ok {
		_spec.SetField(transfers.FieldToPubkey, field.TypeString, value)
	}
	if tu.mutation.ToPubkeyCleared() {
		_spec.ClearField(transfers.FieldToPubkey, field.TypeString)
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(transfers.FieldName, field.TypeString, value)
	}
	if tu.mutation.NameCleared() {
		_spec.ClearField(transfers.FieldName, field.TypeString)
	}
	if value, ok := tu.mutation.SenderBalance(); ok {
		_spec.SetField(transfers.FieldSenderBalance, field.TypeString, value)
	}
	if tu.mutation.SenderBalanceCleared() {
		_spec.ClearField(transfers.FieldSenderBalance, field.TypeString)
	}
	if value, ok := tu.mutation.Amount(); ok {
		_spec.SetField(transfers.FieldAmount, field.TypeString, value)
	}
	if tu.mutation.AmountCleared() {
		_spec.ClearField(transfers.FieldAmount, field.TypeString)
	}
	if value, ok := tu.mutation.MemoID(); ok {
		_spec.SetField(transfers.FieldMemoID, field.TypeUint64, value)
	}
	if value, ok := tu.mutation.AddedMemoID(); ok {
		_spec.AddField(transfers.FieldMemoID, field.TypeUint64, value)
	}
	if tu.mutation.MemoIDCleared() {
		_spec.ClearField(transfers.FieldMemoID, field.TypeUint64)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(transfers.FieldCreatedAt, field.TypeTime, value)
	}
	if tu.mutation.CreatedAtCleared() {
		_spec.ClearField(transfers.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(transfers.FieldStatus, field.TypeString, value)
	}
	if tu.mutation.StatusCleared() {
		_spec.ClearField(transfers.FieldStatus, field.TypeString)
	}
	if value, ok := tu.mutation.Deploy(); ok {
		_spec.SetField(transfers.FieldDeploy, field.TypeString, value)
	}
	if tu.mutation.DeployCleared() {
		_spec.ClearField(transfers.FieldDeploy, field.TypeString)
	}
	if value, ok := tu.mutation.AdditionalType(); ok {
		_spec.SetField(transfers.FieldAdditionalType, field.TypeString, value)
	}
	if tu.mutation.AdditionalTypeCleared() {
		_spec.ClearField(transfers.FieldAdditionalType, field.TypeString)
	}
	if value, ok := tu.mutation.InvoiceID(); ok {
		_spec.SetField(transfers.FieldInvoiceID, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedInvoiceID(); ok {
		_spec.AddField(transfers.FieldInvoiceID, field.TypeInt64, value)
	}
	if tu.mutation.InvoiceIDCleared() {
		_spec.ClearField(transfers.FieldInvoiceID, field.TypeInt64)
	}
	if tu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transfers.OwnerTable,
			Columns: []string{transfers.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transfers.OwnerTable,
			Columns: []string{transfers.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transfers.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TransfersUpdateOne is the builder for updating a single Transfers entity.
type TransfersUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TransfersMutation
}

// SetFromPubkey sets the "from_pubkey" field.
func (tuo *TransfersUpdateOne) SetFromPubkey(s string) *TransfersUpdateOne {
	tuo.mutation.SetFromPubkey(s)
	return tuo
}

// SetToPubkey sets the "to_pubkey" field.
func (tuo *TransfersUpdateOne) SetToPubkey(s string) *TransfersUpdateOne {
	tuo.mutation.SetToPubkey(s)
	return tuo
}

// SetNillableToPubkey sets the "to_pubkey" field if the given value is not nil.
func (tuo *TransfersUpdateOne) SetNillableToPubkey(s *string) *TransfersUpdateOne {
	if s != nil {
		tuo.SetToPubkey(*s)
	}
	return tuo
}

// ClearToPubkey clears the value of the "to_pubkey" field.
func (tuo *TransfersUpdateOne) ClearToPubkey() *TransfersUpdateOne {
	tuo.mutation.ClearToPubkey()
	return tuo
}

// SetName sets the "name" field.
func (tuo *TransfersUpdateOne) SetName(s string) *TransfersUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TransfersUpdateOne) SetNillableName(s *string) *TransfersUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// ClearName clears the value of the "name" field.
func (tuo *TransfersUpdateOne) ClearName() *TransfersUpdateOne {
	tuo.mutation.ClearName()
	return tuo
}

// SetSenderBalance sets the "sender_balance" field.
func (tuo *TransfersUpdateOne) SetSenderBalance(s string) *TransfersUpdateOne {
	tuo.mutation.SetSenderBalance(s)
	return tuo
}

// SetNillableSenderBalance sets the "sender_balance" field if the given value is not nil.
func (tuo *TransfersUpdateOne) SetNillableSenderBalance(s *string) *TransfersUpdateOne {
	if s != nil {
		tuo.SetSenderBalance(*s)
	}
	return tuo
}

// ClearSenderBalance clears the value of the "sender_balance" field.
func (tuo *TransfersUpdateOne) ClearSenderBalance() *TransfersUpdateOne {
	tuo.mutation.ClearSenderBalance()
	return tuo
}

// SetAmount sets the "amount" field.
func (tuo *TransfersUpdateOne) SetAmount(s string) *TransfersUpdateOne {
	tuo.mutation.SetAmount(s)
	return tuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tuo *TransfersUpdateOne) SetNillableAmount(s *string) *TransfersUpdateOne {
	if s != nil {
		tuo.SetAmount(*s)
	}
	return tuo
}

// ClearAmount clears the value of the "amount" field.
func (tuo *TransfersUpdateOne) ClearAmount() *TransfersUpdateOne {
	tuo.mutation.ClearAmount()
	return tuo
}

// SetMemoID sets the "memo_id" field.
func (tuo *TransfersUpdateOne) SetMemoID(u uint64) *TransfersUpdateOne {
	tuo.mutation.ResetMemoID()
	tuo.mutation.SetMemoID(u)
	return tuo
}

// SetNillableMemoID sets the "memo_id" field if the given value is not nil.
func (tuo *TransfersUpdateOne) SetNillableMemoID(u *uint64) *TransfersUpdateOne {
	if u != nil {
		tuo.SetMemoID(*u)
	}
	return tuo
}

// AddMemoID adds u to the "memo_id" field.
func (tuo *TransfersUpdateOne) AddMemoID(u int64) *TransfersUpdateOne {
	tuo.mutation.AddMemoID(u)
	return tuo
}

// ClearMemoID clears the value of the "memo_id" field.
func (tuo *TransfersUpdateOne) ClearMemoID() *TransfersUpdateOne {
	tuo.mutation.ClearMemoID()
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TransfersUpdateOne) SetCreatedAt(t time.Time) *TransfersUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TransfersUpdateOne) SetNillableCreatedAt(t *time.Time) *TransfersUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (tuo *TransfersUpdateOne) ClearCreatedAt() *TransfersUpdateOne {
	tuo.mutation.ClearCreatedAt()
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TransfersUpdateOne) SetStatus(s string) *TransfersUpdateOne {
	tuo.mutation.SetStatus(s)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TransfersUpdateOne) SetNillableStatus(s *string) *TransfersUpdateOne {
	if s != nil {
		tuo.SetStatus(*s)
	}
	return tuo
}

// ClearStatus clears the value of the "status" field.
func (tuo *TransfersUpdateOne) ClearStatus() *TransfersUpdateOne {
	tuo.mutation.ClearStatus()
	return tuo
}

// SetDeploy sets the "Deploy" field.
func (tuo *TransfersUpdateOne) SetDeploy(s string) *TransfersUpdateOne {
	tuo.mutation.SetDeploy(s)
	return tuo
}

// SetNillableDeploy sets the "Deploy" field if the given value is not nil.
func (tuo *TransfersUpdateOne) SetNillableDeploy(s *string) *TransfersUpdateOne {
	if s != nil {
		tuo.SetDeploy(*s)
	}
	return tuo
}

// ClearDeploy clears the value of the "Deploy" field.
func (tuo *TransfersUpdateOne) ClearDeploy() *TransfersUpdateOne {
	tuo.mutation.ClearDeploy()
	return tuo
}

// SetAdditionalType sets the "AdditionalType" field.
func (tuo *TransfersUpdateOne) SetAdditionalType(s string) *TransfersUpdateOne {
	tuo.mutation.SetAdditionalType(s)
	return tuo
}

// SetNillableAdditionalType sets the "AdditionalType" field if the given value is not nil.
func (tuo *TransfersUpdateOne) SetNillableAdditionalType(s *string) *TransfersUpdateOne {
	if s != nil {
		tuo.SetAdditionalType(*s)
	}
	return tuo
}

// ClearAdditionalType clears the value of the "AdditionalType" field.
func (tuo *TransfersUpdateOne) ClearAdditionalType() *TransfersUpdateOne {
	tuo.mutation.ClearAdditionalType()
	return tuo
}

// SetInvoiceID sets the "invoiceID" field.
func (tuo *TransfersUpdateOne) SetInvoiceID(i int64) *TransfersUpdateOne {
	tuo.mutation.ResetInvoiceID()
	tuo.mutation.SetInvoiceID(i)
	return tuo
}

// SetNillableInvoiceID sets the "invoiceID" field if the given value is not nil.
func (tuo *TransfersUpdateOne) SetNillableInvoiceID(i *int64) *TransfersUpdateOne {
	if i != nil {
		tuo.SetInvoiceID(*i)
	}
	return tuo
}

// AddInvoiceID adds i to the "invoiceID" field.
func (tuo *TransfersUpdateOne) AddInvoiceID(i int64) *TransfersUpdateOne {
	tuo.mutation.AddInvoiceID(i)
	return tuo
}

// ClearInvoiceID clears the value of the "invoiceID" field.
func (tuo *TransfersUpdateOne) ClearInvoiceID() *TransfersUpdateOne {
	tuo.mutation.ClearInvoiceID()
	return tuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (tuo *TransfersUpdateOne) SetOwnerID(id int64) *TransfersUpdateOne {
	tuo.mutation.SetOwnerID(id)
	return tuo
}

// SetOwner sets the "owner" edge to the User entity.
func (tuo *TransfersUpdateOne) SetOwner(u *User) *TransfersUpdateOne {
	return tuo.SetOwnerID(u.ID)
}

// Mutation returns the TransfersMutation object of the builder.
func (tuo *TransfersUpdateOne) Mutation() *TransfersMutation {
	return tuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (tuo *TransfersUpdateOne) ClearOwner() *TransfersUpdateOne {
	tuo.mutation.ClearOwner()
	return tuo
}

// Where appends a list predicates to the TransfersUpdate builder.
func (tuo *TransfersUpdateOne) Where(ps ...predicate.Transfers) *TransfersUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TransfersUpdateOne) Select(field string, fields ...string) *TransfersUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Transfers entity.
func (tuo *TransfersUpdateOne) Save(ctx context.Context) (*Transfers, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TransfersUpdateOne) SaveX(ctx context.Context) *Transfers {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TransfersUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TransfersUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TransfersUpdateOne) check() error {
	if _, ok := tuo.mutation.OwnerID(); tuo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Transfers.owner"`)
	}
	return nil
}

func (tuo *TransfersUpdateOne) sqlSave(ctx context.Context) (_node *Transfers, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(transfers.Table, transfers.Columns, sqlgraph.NewFieldSpec(transfers.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Transfers.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transfers.FieldID)
		for _, f := range fields {
			if !transfers.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transfers.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.FromPubkey(); ok {
		_spec.SetField(transfers.FieldFromPubkey, field.TypeString, value)
	}
	if value, ok := tuo.mutation.ToPubkey(); ok {
		_spec.SetField(transfers.FieldToPubkey, field.TypeString, value)
	}
	if tuo.mutation.ToPubkeyCleared() {
		_spec.ClearField(transfers.FieldToPubkey, field.TypeString)
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(transfers.FieldName, field.TypeString, value)
	}
	if tuo.mutation.NameCleared() {
		_spec.ClearField(transfers.FieldName, field.TypeString)
	}
	if value, ok := tuo.mutation.SenderBalance(); ok {
		_spec.SetField(transfers.FieldSenderBalance, field.TypeString, value)
	}
	if tuo.mutation.SenderBalanceCleared() {
		_spec.ClearField(transfers.FieldSenderBalance, field.TypeString)
	}
	if value, ok := tuo.mutation.Amount(); ok {
		_spec.SetField(transfers.FieldAmount, field.TypeString, value)
	}
	if tuo.mutation.AmountCleared() {
		_spec.ClearField(transfers.FieldAmount, field.TypeString)
	}
	if value, ok := tuo.mutation.MemoID(); ok {
		_spec.SetField(transfers.FieldMemoID, field.TypeUint64, value)
	}
	if value, ok := tuo.mutation.AddedMemoID(); ok {
		_spec.AddField(transfers.FieldMemoID, field.TypeUint64, value)
	}
	if tuo.mutation.MemoIDCleared() {
		_spec.ClearField(transfers.FieldMemoID, field.TypeUint64)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(transfers.FieldCreatedAt, field.TypeTime, value)
	}
	if tuo.mutation.CreatedAtCleared() {
		_spec.ClearField(transfers.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(transfers.FieldStatus, field.TypeString, value)
	}
	if tuo.mutation.StatusCleared() {
		_spec.ClearField(transfers.FieldStatus, field.TypeString)
	}
	if value, ok := tuo.mutation.Deploy(); ok {
		_spec.SetField(transfers.FieldDeploy, field.TypeString, value)
	}
	if tuo.mutation.DeployCleared() {
		_spec.ClearField(transfers.FieldDeploy, field.TypeString)
	}
	if value, ok := tuo.mutation.AdditionalType(); ok {
		_spec.SetField(transfers.FieldAdditionalType, field.TypeString, value)
	}
	if tuo.mutation.AdditionalTypeCleared() {
		_spec.ClearField(transfers.FieldAdditionalType, field.TypeString)
	}
	if value, ok := tuo.mutation.InvoiceID(); ok {
		_spec.SetField(transfers.FieldInvoiceID, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedInvoiceID(); ok {
		_spec.AddField(transfers.FieldInvoiceID, field.TypeInt64, value)
	}
	if tuo.mutation.InvoiceIDCleared() {
		_spec.ClearField(transfers.FieldInvoiceID, field.TypeInt64)
	}
	if tuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transfers.OwnerTable,
			Columns: []string{transfers.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transfers.OwnerTable,
			Columns: []string{transfers.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Transfers{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transfers.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
