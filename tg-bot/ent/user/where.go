// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Simplewallethq/tg-bot/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// PublicKey applies equality check predicate on the "public_key" field. It's identical to PublicKeyEQ.
func PublicKey(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPublicKey, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// LoggedIn applies equality check predicate on the "logged_in" field. It's identical to LoggedInEQ.
func LoggedIn(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLoggedIn, v))
}

// LastAccess applies equality check predicate on the "last_access" field. It's identical to LastAccessEQ.
func LastAccess(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastAccess, v))
}

// LockTimeout applies equality check predicate on the "lock_timeout" field. It's identical to LockTimeoutEQ.
func LockTimeout(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLockTimeout, v))
}

// LockedManual applies equality check predicate on the "locked_manual" field. It's identical to LockedManualEQ.
func LockedManual(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLockedManual, v))
}

// Notify applies equality check predicate on the "notify" field. It's identical to NotifyEQ.
func Notify(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNotify, v))
}

// NotifyTime applies equality check predicate on the "notify_time" field. It's identical to NotifyTimeEQ.
func NotifyTime(v int8) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNotifyTime, v))
}

// NotifyLastTime applies equality check predicate on the "notify_last_time" field. It's identical to NotifyLastTimeEQ.
func NotifyLastTime(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNotifyLastTime, v))
}

// StorePrivatKey applies equality check predicate on the "store_privat_key" field. It's identical to StorePrivatKeyEQ.
func StorePrivatKey(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldStorePrivatKey, v))
}

// EnableLogging applies equality check predicate on the "enable_logging" field. It's identical to EnableLoggingEQ.
func EnableLogging(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEnableLogging, v))
}

// Registered applies equality check predicate on the "registered" field. It's identical to RegisteredEQ.
func Registered(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRegistered, v))
}

// PublicKeyEQ applies the EQ predicate on the "public_key" field.
func PublicKeyEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPublicKey, v))
}

// PublicKeyNEQ applies the NEQ predicate on the "public_key" field.
func PublicKeyNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPublicKey, v))
}

// PublicKeyIn applies the In predicate on the "public_key" field.
func PublicKeyIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPublicKey, vs...))
}

// PublicKeyNotIn applies the NotIn predicate on the "public_key" field.
func PublicKeyNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPublicKey, vs...))
}

// PublicKeyGT applies the GT predicate on the "public_key" field.
func PublicKeyGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPublicKey, v))
}

// PublicKeyGTE applies the GTE predicate on the "public_key" field.
func PublicKeyGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPublicKey, v))
}

// PublicKeyLT applies the LT predicate on the "public_key" field.
func PublicKeyLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPublicKey, v))
}

// PublicKeyLTE applies the LTE predicate on the "public_key" field.
func PublicKeyLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPublicKey, v))
}

// PublicKeyContains applies the Contains predicate on the "public_key" field.
func PublicKeyContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPublicKey, v))
}

// PublicKeyHasPrefix applies the HasPrefix predicate on the "public_key" field.
func PublicKeyHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPublicKey, v))
}

// PublicKeyHasSuffix applies the HasSuffix predicate on the "public_key" field.
func PublicKeyHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPublicKey, v))
}

// PublicKeyIsNil applies the IsNil predicate on the "public_key" field.
func PublicKeyIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldPublicKey))
}

// PublicKeyNotNil applies the NotNil predicate on the "public_key" field.
func PublicKeyNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldPublicKey))
}

// PublicKeyEqualFold applies the EqualFold predicate on the "public_key" field.
func PublicKeyEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPublicKey, v))
}

// PublicKeyContainsFold applies the ContainsFold predicate on the "public_key" field.
func PublicKeyContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPublicKey, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordIsNil applies the IsNil predicate on the "password" field.
func PasswordIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldPassword))
}

// PasswordNotNil applies the NotNil predicate on the "password" field.
func PasswordNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldPassword))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPassword, v))
}

// LoggedInEQ applies the EQ predicate on the "logged_in" field.
func LoggedInEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLoggedIn, v))
}

// LoggedInNEQ applies the NEQ predicate on the "logged_in" field.
func LoggedInNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLoggedIn, v))
}

// LastAccessEQ applies the EQ predicate on the "last_access" field.
func LastAccessEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastAccess, v))
}

// LastAccessNEQ applies the NEQ predicate on the "last_access" field.
func LastAccessNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLastAccess, v))
}

// LastAccessIn applies the In predicate on the "last_access" field.
func LastAccessIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldLastAccess, vs...))
}

// LastAccessNotIn applies the NotIn predicate on the "last_access" field.
func LastAccessNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLastAccess, vs...))
}

// LastAccessGT applies the GT predicate on the "last_access" field.
func LastAccessGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldLastAccess, v))
}

// LastAccessGTE applies the GTE predicate on the "last_access" field.
func LastAccessGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLastAccess, v))
}

// LastAccessLT applies the LT predicate on the "last_access" field.
func LastAccessLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldLastAccess, v))
}

// LastAccessLTE applies the LTE predicate on the "last_access" field.
func LastAccessLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLastAccess, v))
}

// LastAccessIsNil applies the IsNil predicate on the "last_access" field.
func LastAccessIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLastAccess))
}

// LastAccessNotNil applies the NotNil predicate on the "last_access" field.
func LastAccessNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLastAccess))
}

// LockTimeoutEQ applies the EQ predicate on the "lock_timeout" field.
func LockTimeoutEQ(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLockTimeout, v))
}

// LockTimeoutNEQ applies the NEQ predicate on the "lock_timeout" field.
func LockTimeoutNEQ(v int64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLockTimeout, v))
}

// LockTimeoutIn applies the In predicate on the "lock_timeout" field.
func LockTimeoutIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldIn(FieldLockTimeout, vs...))
}

// LockTimeoutNotIn applies the NotIn predicate on the "lock_timeout" field.
func LockTimeoutNotIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLockTimeout, vs...))
}

// LockTimeoutGT applies the GT predicate on the "lock_timeout" field.
func LockTimeoutGT(v int64) predicate.User {
	return predicate.User(sql.FieldGT(FieldLockTimeout, v))
}

// LockTimeoutGTE applies the GTE predicate on the "lock_timeout" field.
func LockTimeoutGTE(v int64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLockTimeout, v))
}

// LockTimeoutLT applies the LT predicate on the "lock_timeout" field.
func LockTimeoutLT(v int64) predicate.User {
	return predicate.User(sql.FieldLT(FieldLockTimeout, v))
}

// LockTimeoutLTE applies the LTE predicate on the "lock_timeout" field.
func LockTimeoutLTE(v int64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLockTimeout, v))
}

// LockTimeoutIsNil applies the IsNil predicate on the "lock_timeout" field.
func LockTimeoutIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLockTimeout))
}

// LockTimeoutNotNil applies the NotNil predicate on the "lock_timeout" field.
func LockTimeoutNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLockTimeout))
}

// LockedManualEQ applies the EQ predicate on the "locked_manual" field.
func LockedManualEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLockedManual, v))
}

// LockedManualNEQ applies the NEQ predicate on the "locked_manual" field.
func LockedManualNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLockedManual, v))
}

// LockedManualIsNil applies the IsNil predicate on the "locked_manual" field.
func LockedManualIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLockedManual))
}

// LockedManualNotNil applies the NotNil predicate on the "locked_manual" field.
func LockedManualNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLockedManual))
}

// NotifyEQ applies the EQ predicate on the "notify" field.
func NotifyEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNotify, v))
}

// NotifyNEQ applies the NEQ predicate on the "notify" field.
func NotifyNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldNotify, v))
}

// NotifyTimeEQ applies the EQ predicate on the "notify_time" field.
func NotifyTimeEQ(v int8) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNotifyTime, v))
}

// NotifyTimeNEQ applies the NEQ predicate on the "notify_time" field.
func NotifyTimeNEQ(v int8) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldNotifyTime, v))
}

// NotifyTimeIn applies the In predicate on the "notify_time" field.
func NotifyTimeIn(vs ...int8) predicate.User {
	return predicate.User(sql.FieldIn(FieldNotifyTime, vs...))
}

// NotifyTimeNotIn applies the NotIn predicate on the "notify_time" field.
func NotifyTimeNotIn(vs ...int8) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldNotifyTime, vs...))
}

// NotifyTimeGT applies the GT predicate on the "notify_time" field.
func NotifyTimeGT(v int8) predicate.User {
	return predicate.User(sql.FieldGT(FieldNotifyTime, v))
}

// NotifyTimeGTE applies the GTE predicate on the "notify_time" field.
func NotifyTimeGTE(v int8) predicate.User {
	return predicate.User(sql.FieldGTE(FieldNotifyTime, v))
}

// NotifyTimeLT applies the LT predicate on the "notify_time" field.
func NotifyTimeLT(v int8) predicate.User {
	return predicate.User(sql.FieldLT(FieldNotifyTime, v))
}

// NotifyTimeLTE applies the LTE predicate on the "notify_time" field.
func NotifyTimeLTE(v int8) predicate.User {
	return predicate.User(sql.FieldLTE(FieldNotifyTime, v))
}

// NotifyLastTimeEQ applies the EQ predicate on the "notify_last_time" field.
func NotifyLastTimeEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNotifyLastTime, v))
}

// NotifyLastTimeNEQ applies the NEQ predicate on the "notify_last_time" field.
func NotifyLastTimeNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldNotifyLastTime, v))
}

// NotifyLastTimeIn applies the In predicate on the "notify_last_time" field.
func NotifyLastTimeIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldNotifyLastTime, vs...))
}

// NotifyLastTimeNotIn applies the NotIn predicate on the "notify_last_time" field.
func NotifyLastTimeNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldNotifyLastTime, vs...))
}

// NotifyLastTimeGT applies the GT predicate on the "notify_last_time" field.
func NotifyLastTimeGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldNotifyLastTime, v))
}

// NotifyLastTimeGTE applies the GTE predicate on the "notify_last_time" field.
func NotifyLastTimeGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldNotifyLastTime, v))
}

// NotifyLastTimeLT applies the LT predicate on the "notify_last_time" field.
func NotifyLastTimeLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldNotifyLastTime, v))
}

// NotifyLastTimeLTE applies the LTE predicate on the "notify_last_time" field.
func NotifyLastTimeLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldNotifyLastTime, v))
}

// StorePrivatKeyEQ applies the EQ predicate on the "store_privat_key" field.
func StorePrivatKeyEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldStorePrivatKey, v))
}

// StorePrivatKeyNEQ applies the NEQ predicate on the "store_privat_key" field.
func StorePrivatKeyNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldStorePrivatKey, v))
}

// EnableLoggingEQ applies the EQ predicate on the "enable_logging" field.
func EnableLoggingEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEnableLogging, v))
}

// EnableLoggingNEQ applies the NEQ predicate on the "enable_logging" field.
func EnableLoggingNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEnableLogging, v))
}

// RegisteredEQ applies the EQ predicate on the "registered" field.
func RegisteredEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRegistered, v))
}

// RegisteredNEQ applies the NEQ predicate on the "registered" field.
func RegisteredNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldRegistered, v))
}

// HasBalance applies the HasEdge predicate on the "balance" edge.
func HasBalance() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, BalanceTable, BalanceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBalanceWith applies the HasEdge predicate on the "balance" edge with a given conditions (other predicates).
func HasBalanceWith(preds ...predicate.Balances) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newBalanceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAddressBook applies the HasEdge predicate on the "address_book" edge.
func HasAddressBook() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AddressBookTable, AddressBookColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAddressBookWith applies the HasEdge predicate on the "address_book" edge with a given conditions (other predicates).
func HasAddressBookWith(preds ...predicate.AdressBook) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newAddressBookStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasState applies the HasEdge predicate on the "state" edge.
func HasState() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, StateTable, StateColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStateWith applies the HasEdge predicate on the "state" edge with a given conditions (other predicates).
func HasStateWith(preds ...predicate.UserState) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newStateStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRewardsData applies the HasEdge predicate on the "rewards_data" edge.
func HasRewardsData() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RewardsDataTable, RewardsDataColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRewardsDataWith applies the HasEdge predicate on the "rewards_data" edge with a given conditions (other predicates).
func HasRewardsDataWith(preds ...predicate.RewardsData) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newRewardsDataStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPrivateKey applies the HasEdge predicate on the "PrivateKey" edge.
func HasPrivateKey() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, PrivateKeyTable, PrivateKeyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPrivateKeyWith applies the HasEdge predicate on the "PrivateKey" edge with a given conditions (other predicates).
func HasPrivateKeyWith(preds ...predicate.PrivateKeys) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newPrivateKeyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTransfers applies the HasEdge predicate on the "transfers" edge.
func HasTransfers() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TransfersTable, TransfersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTransfersWith applies the HasEdge predicate on the "transfers" edge with a given conditions (other predicates).
func HasTransfersWith(preds ...predicate.Transfers) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newTransfersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDelegates applies the HasEdge predicate on the "delegates" edge.
func HasDelegates() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DelegatesTable, DelegatesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDelegatesWith applies the HasEdge predicate on the "delegates" edge with a given conditions (other predicates).
func HasDelegatesWith(preds ...predicate.Delegates) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newDelegatesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUndelegates applies the HasEdge predicate on the "undelegates" edge.
func HasUndelegates() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UndelegatesTable, UndelegatesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUndelegatesWith applies the HasEdge predicate on the "undelegates" edge with a given conditions (other predicates).
func HasUndelegatesWith(preds ...predicate.Undelegates) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newUndelegatesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSwaps applies the HasEdge predicate on the "swaps" edge.
func HasSwaps() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SwapsTable, SwapsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSwapsWith applies the HasEdge predicate on the "swaps" edge with a given conditions (other predicates).
func HasSwapsWith(preds ...predicate.Swaps) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newSwapsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInvoices applies the HasEdge predicate on the "invoices" edge.
func HasInvoices() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InvoicesTable, InvoicesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInvoicesWith applies the HasEdge predicate on the "invoices" edge with a given conditions (other predicates).
func HasInvoicesWith(preds ...predicate.Invoice) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newInvoicesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRecentInvoices applies the HasEdge predicate on the "recentInvoices" edge.
func HasRecentInvoices() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RecentInvoicesTable, RecentInvoicesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRecentInvoicesWith applies the HasEdge predicate on the "recentInvoices" edge with a given conditions (other predicates).
func HasRecentInvoicesWith(preds ...predicate.RecentInvoices) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newRecentInvoicesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		p(s.Not())
	})
}
