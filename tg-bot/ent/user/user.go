// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPublicKey holds the string denoting the public_key field in the database.
	FieldPublicKey = "public_key"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldLoggedIn holds the string denoting the logged_in field in the database.
	FieldLoggedIn = "logged_in"
	// FieldLastAccess holds the string denoting the last_access field in the database.
	FieldLastAccess = "last_access"
	// FieldLockTimeout holds the string denoting the lock_timeout field in the database.
	FieldLockTimeout = "lock_timeout"
	// FieldLockedManual holds the string denoting the locked_manual field in the database.
	FieldLockedManual = "locked_manual"
	// FieldNotify holds the string denoting the notify field in the database.
	FieldNotify = "notify"
	// FieldNotifyTime holds the string denoting the notify_time field in the database.
	FieldNotifyTime = "notify_time"
	// FieldNotifyLastTime holds the string denoting the notify_last_time field in the database.
	FieldNotifyLastTime = "notify_last_time"
	// FieldStorePrivatKey holds the string denoting the store_privat_key field in the database.
	FieldStorePrivatKey = "store_privat_key"
	// FieldEnableLogging holds the string denoting the enable_logging field in the database.
	FieldEnableLogging = "enable_logging"
	// FieldRegistered holds the string denoting the registered field in the database.
	FieldRegistered = "registered"
	// EdgeBalance holds the string denoting the balance edge name in mutations.
	EdgeBalance = "balance"
	// EdgeAddressBook holds the string denoting the address_book edge name in mutations.
	EdgeAddressBook = "address_book"
	// EdgeState holds the string denoting the state edge name in mutations.
	EdgeState = "state"
	// EdgeRewardsData holds the string denoting the rewards_data edge name in mutations.
	EdgeRewardsData = "rewards_data"
	// EdgePrivateKey holds the string denoting the privatekey edge name in mutations.
	EdgePrivateKey = "PrivateKey"
	// EdgeTransfers holds the string denoting the transfers edge name in mutations.
	EdgeTransfers = "transfers"
	// EdgeDelegates holds the string denoting the delegates edge name in mutations.
	EdgeDelegates = "delegates"
	// EdgeUndelegates holds the string denoting the undelegates edge name in mutations.
	EdgeUndelegates = "undelegates"
	// EdgeSwaps holds the string denoting the swaps edge name in mutations.
	EdgeSwaps = "swaps"
	// EdgeInvoices holds the string denoting the invoices edge name in mutations.
	EdgeInvoices = "invoices"
	// EdgeRecentInvoices holds the string denoting the recentinvoices edge name in mutations.
	EdgeRecentInvoices = "recentInvoices"
	// Table holds the table name of the user in the database.
	Table = "users"
	// BalanceTable is the table that holds the balance relation/edge.
	BalanceTable = "balances"
	// BalanceInverseTable is the table name for the Balances entity.
	// It exists in this package in order to avoid circular dependency with the "balances" package.
	BalanceInverseTable = "balances"
	// BalanceColumn is the table column denoting the balance relation/edge.
	BalanceColumn = "user_balance"
	// AddressBookTable is the table that holds the address_book relation/edge.
	AddressBookTable = "adress_books"
	// AddressBookInverseTable is the table name for the AdressBook entity.
	// It exists in this package in order to avoid circular dependency with the "adressbook" package.
	AddressBookInverseTable = "adress_books"
	// AddressBookColumn is the table column denoting the address_book relation/edge.
	AddressBookColumn = "user_address_book"
	// StateTable is the table that holds the state relation/edge.
	StateTable = "user_states"
	// StateInverseTable is the table name for the UserState entity.
	// It exists in this package in order to avoid circular dependency with the "userstate" package.
	StateInverseTable = "user_states"
	// StateColumn is the table column denoting the state relation/edge.
	StateColumn = "user_state"
	// RewardsDataTable is the table that holds the rewards_data relation/edge.
	RewardsDataTable = "rewards_data"
	// RewardsDataInverseTable is the table name for the RewardsData entity.
	// It exists in this package in order to avoid circular dependency with the "rewardsdata" package.
	RewardsDataInverseTable = "rewards_data"
	// RewardsDataColumn is the table column denoting the rewards_data relation/edge.
	RewardsDataColumn = "user_rewards_data"
	// PrivateKeyTable is the table that holds the PrivateKey relation/edge.
	PrivateKeyTable = "private_keys"
	// PrivateKeyInverseTable is the table name for the PrivateKeys entity.
	// It exists in this package in order to avoid circular dependency with the "privatekeys" package.
	PrivateKeyInverseTable = "private_keys"
	// PrivateKeyColumn is the table column denoting the PrivateKey relation/edge.
	PrivateKeyColumn = "user_private_key"
	// TransfersTable is the table that holds the transfers relation/edge.
	TransfersTable = "transfers"
	// TransfersInverseTable is the table name for the Transfers entity.
	// It exists in this package in order to avoid circular dependency with the "transfers" package.
	TransfersInverseTable = "transfers"
	// TransfersColumn is the table column denoting the transfers relation/edge.
	TransfersColumn = "user_transfers"
	// DelegatesTable is the table that holds the delegates relation/edge.
	DelegatesTable = "delegates"
	// DelegatesInverseTable is the table name for the Delegates entity.
	// It exists in this package in order to avoid circular dependency with the "delegates" package.
	DelegatesInverseTable = "delegates"
	// DelegatesColumn is the table column denoting the delegates relation/edge.
	DelegatesColumn = "user_delegates"
	// UndelegatesTable is the table that holds the undelegates relation/edge.
	UndelegatesTable = "undelegates"
	// UndelegatesInverseTable is the table name for the Undelegates entity.
	// It exists in this package in order to avoid circular dependency with the "undelegates" package.
	UndelegatesInverseTable = "undelegates"
	// UndelegatesColumn is the table column denoting the undelegates relation/edge.
	UndelegatesColumn = "user_undelegates"
	// SwapsTable is the table that holds the swaps relation/edge.
	SwapsTable = "swaps"
	// SwapsInverseTable is the table name for the Swaps entity.
	// It exists in this package in order to avoid circular dependency with the "swaps" package.
	SwapsInverseTable = "swaps"
	// SwapsColumn is the table column denoting the swaps relation/edge.
	SwapsColumn = "user_swaps"
	// InvoicesTable is the table that holds the invoices relation/edge.
	InvoicesTable = "invoices"
	// InvoicesInverseTable is the table name for the Invoice entity.
	// It exists in this package in order to avoid circular dependency with the "invoice" package.
	InvoicesInverseTable = "invoices"
	// InvoicesColumn is the table column denoting the invoices relation/edge.
	InvoicesColumn = "user_invoices"
	// RecentInvoicesTable is the table that holds the recentInvoices relation/edge.
	RecentInvoicesTable = "recent_invoices"
	// RecentInvoicesInverseTable is the table name for the RecentInvoices entity.
	// It exists in this package in order to avoid circular dependency with the "recentinvoices" package.
	RecentInvoicesInverseTable = "recent_invoices"
	// RecentInvoicesColumn is the table column denoting the recentInvoices relation/edge.
	RecentInvoicesColumn = "user_recent_invoices"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldPublicKey,
	FieldPassword,
	FieldLoggedIn,
	FieldLastAccess,
	FieldLockTimeout,
	FieldLockedManual,
	FieldNotify,
	FieldNotifyTime,
	FieldNotifyLastTime,
	FieldStorePrivatKey,
	FieldEnableLogging,
	FieldRegistered,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultLoggedIn holds the default value on creation for the "logged_in" field.
	DefaultLoggedIn bool
	// DefaultNotify holds the default value on creation for the "notify" field.
	DefaultNotify bool
	// DefaultNotifyTime holds the default value on creation for the "notify_time" field.
	DefaultNotifyTime int8
	// DefaultNotifyLastTime holds the default value on creation for the "notify_last_time" field.
	DefaultNotifyLastTime time.Time
	// DefaultStorePrivatKey holds the default value on creation for the "store_privat_key" field.
	DefaultStorePrivatKey bool
	// DefaultEnableLogging holds the default value on creation for the "enable_logging" field.
	DefaultEnableLogging bool
	// DefaultRegistered holds the default value on creation for the "registered" field.
	DefaultRegistered bool
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPublicKey orders the results by the public_key field.
func ByPublicKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublicKey, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByLoggedIn orders the results by the logged_in field.
func ByLoggedIn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLoggedIn, opts...).ToFunc()
}

// ByLastAccess orders the results by the last_access field.
func ByLastAccess(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastAccess, opts...).ToFunc()
}

// ByLockTimeout orders the results by the lock_timeout field.
func ByLockTimeout(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLockTimeout, opts...).ToFunc()
}

// ByLockedManual orders the results by the locked_manual field.
func ByLockedManual(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLockedManual, opts...).ToFunc()
}

// ByNotify orders the results by the notify field.
func ByNotify(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotify, opts...).ToFunc()
}

// ByNotifyTime orders the results by the notify_time field.
func ByNotifyTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotifyTime, opts...).ToFunc()
}

// ByNotifyLastTime orders the results by the notify_last_time field.
func ByNotifyLastTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotifyLastTime, opts...).ToFunc()
}

// ByStorePrivatKey orders the results by the store_privat_key field.
func ByStorePrivatKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStorePrivatKey, opts...).ToFunc()
}

// ByEnableLogging orders the results by the enable_logging field.
func ByEnableLogging(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnableLogging, opts...).ToFunc()
}

// ByRegistered orders the results by the registered field.
func ByRegistered(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegistered, opts...).ToFunc()
}

// ByBalanceField orders the results by balance field.
func ByBalanceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBalanceStep(), sql.OrderByField(field, opts...))
	}
}

// ByAddressBookCount orders the results by address_book count.
func ByAddressBookCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAddressBookStep(), opts...)
	}
}

// ByAddressBook orders the results by address_book terms.
func ByAddressBook(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAddressBookStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByStateField orders the results by state field.
func ByStateField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStateStep(), sql.OrderByField(field, opts...))
	}
}

// ByRewardsDataCount orders the results by rewards_data count.
func ByRewardsDataCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRewardsDataStep(), opts...)
	}
}

// ByRewardsData orders the results by rewards_data terms.
func ByRewardsData(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRewardsDataStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPrivateKeyField orders the results by PrivateKey field.
func ByPrivateKeyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPrivateKeyStep(), sql.OrderByField(field, opts...))
	}
}

// ByTransfersCount orders the results by transfers count.
func ByTransfersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTransfersStep(), opts...)
	}
}

// ByTransfers orders the results by transfers terms.
func ByTransfers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTransfersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDelegatesCount orders the results by delegates count.
func ByDelegatesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDelegatesStep(), opts...)
	}
}

// ByDelegates orders the results by delegates terms.
func ByDelegates(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDelegatesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUndelegatesCount orders the results by undelegates count.
func ByUndelegatesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUndelegatesStep(), opts...)
	}
}

// ByUndelegates orders the results by undelegates terms.
func ByUndelegates(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUndelegatesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySwapsCount orders the results by swaps count.
func BySwapsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSwapsStep(), opts...)
	}
}

// BySwaps orders the results by swaps terms.
func BySwaps(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSwapsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInvoicesCount orders the results by invoices count.
func ByInvoicesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInvoicesStep(), opts...)
	}
}

// ByInvoices orders the results by invoices terms.
func ByInvoices(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInvoicesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRecentInvoicesCount orders the results by recentInvoices count.
func ByRecentInvoicesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRecentInvoicesStep(), opts...)
	}
}

// ByRecentInvoices orders the results by recentInvoices terms.
func ByRecentInvoices(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRecentInvoicesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBalanceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BalanceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, BalanceTable, BalanceColumn),
	)
}
func newAddressBookStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AddressBookInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AddressBookTable, AddressBookColumn),
	)
}
func newStateStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StateInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, StateTable, StateColumn),
	)
}
func newRewardsDataStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RewardsDataInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RewardsDataTable, RewardsDataColumn),
	)
}
func newPrivateKeyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PrivateKeyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, PrivateKeyTable, PrivateKeyColumn),
	)
}
func newTransfersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TransfersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TransfersTable, TransfersColumn),
	)
}
func newDelegatesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DelegatesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DelegatesTable, DelegatesColumn),
	)
}
func newUndelegatesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UndelegatesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UndelegatesTable, UndelegatesColumn),
	)
}
func newSwapsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SwapsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SwapsTable, SwapsColumn),
	)
}
func newInvoicesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InvoicesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, InvoicesTable, InvoicesColumn),
	)
}
func newRecentInvoicesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RecentInvoicesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RecentInvoicesTable, RecentInvoicesColumn),
	)
}
