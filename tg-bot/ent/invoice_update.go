// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/invoice"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/invoices_payments"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/predicate"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/user"
)

// InvoiceUpdate is the builder for updating Invoice entities.
type InvoiceUpdate struct {
	config
	hooks    []Hook
	mutation *InvoiceMutation
}

// Where appends a list predicates to the InvoiceUpdate builder.
func (iu *InvoiceUpdate) Where(ps ...predicate.Invoice) *InvoiceUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetName sets the "name" field.
func (iu *InvoiceUpdate) SetName(s string) *InvoiceUpdate {
	iu.mutation.SetName(s)
	return iu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableName(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetName(*s)
	}
	return iu
}

// ClearName clears the value of the "name" field.
func (iu *InvoiceUpdate) ClearName() *InvoiceUpdate {
	iu.mutation.ClearName()
	return iu
}

// SetAddress sets the "address" field.
func (iu *InvoiceUpdate) SetAddress(s string) *InvoiceUpdate {
	iu.mutation.SetAddress(s)
	return iu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableAddress(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetAddress(*s)
	}
	return iu
}

// ClearAddress clears the value of the "address" field.
func (iu *InvoiceUpdate) ClearAddress() *InvoiceUpdate {
	iu.mutation.ClearAddress()
	return iu
}

// SetAmount sets the "amount" field.
func (iu *InvoiceUpdate) SetAmount(s string) *InvoiceUpdate {
	iu.mutation.SetAmount(s)
	return iu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableAmount(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetAmount(*s)
	}
	return iu
}

// ClearAmount clears the value of the "amount" field.
func (iu *InvoiceUpdate) ClearAmount() *InvoiceUpdate {
	iu.mutation.ClearAmount()
	return iu
}

// SetCurrency sets the "currency" field.
func (iu *InvoiceUpdate) SetCurrency(s string) *InvoiceUpdate {
	iu.mutation.SetCurrency(s)
	return iu
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableCurrency(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetCurrency(*s)
	}
	return iu
}

// ClearCurrency clears the value of the "currency" field.
func (iu *InvoiceUpdate) ClearCurrency() *InvoiceUpdate {
	iu.mutation.ClearCurrency()
	return iu
}

// SetComment sets the "comment" field.
func (iu *InvoiceUpdate) SetComment(s string) *InvoiceUpdate {
	iu.mutation.SetComment(s)
	return iu
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableComment(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetComment(*s)
	}
	return iu
}

// ClearComment clears the value of the "comment" field.
func (iu *InvoiceUpdate) ClearComment() *InvoiceUpdate {
	iu.mutation.ClearComment()
	return iu
}

// SetActive sets the "active" field.
func (iu *InvoiceUpdate) SetActive(b bool) *InvoiceUpdate {
	iu.mutation.SetActive(b)
	return iu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableActive(b *bool) *InvoiceUpdate {
	if b != nil {
		iu.SetActive(*b)
	}
	return iu
}

// ClearActive clears the value of the "active" field.
func (iu *InvoiceUpdate) ClearActive() *InvoiceUpdate {
	iu.mutation.ClearActive()
	return iu
}

// SetRepeatability sets the "repeatability" field.
func (iu *InvoiceUpdate) SetRepeatability(i int) *InvoiceUpdate {
	iu.mutation.ResetRepeatability()
	iu.mutation.SetRepeatability(i)
	return iu
}

// SetNillableRepeatability sets the "repeatability" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableRepeatability(i *int) *InvoiceUpdate {
	if i != nil {
		iu.SetRepeatability(*i)
	}
	return iu
}

// AddRepeatability adds i to the "repeatability" field.
func (iu *InvoiceUpdate) AddRepeatability(i int) *InvoiceUpdate {
	iu.mutation.AddRepeatability(i)
	return iu
}

// ClearRepeatability clears the value of the "repeatability" field.
func (iu *InvoiceUpdate) ClearRepeatability() *InvoiceUpdate {
	iu.mutation.ClearRepeatability()
	return iu
}

// SetPaid sets the "paid" field.
func (iu *InvoiceUpdate) SetPaid(i int) *InvoiceUpdate {
	iu.mutation.ResetPaid()
	iu.mutation.SetPaid(i)
	return iu
}

// SetNillablePaid sets the "paid" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillablePaid(i *int) *InvoiceUpdate {
	if i != nil {
		iu.SetPaid(*i)
	}
	return iu
}

// AddPaid adds i to the "paid" field.
func (iu *InvoiceUpdate) AddPaid(i int) *InvoiceUpdate {
	iu.mutation.AddPaid(i)
	return iu
}

// ClearPaid clears the value of the "paid" field.
func (iu *InvoiceUpdate) ClearPaid() *InvoiceUpdate {
	iu.mutation.ClearPaid()
	return iu
}

// SetShort sets the "short" field.
func (iu *InvoiceUpdate) SetShort(s string) *InvoiceUpdate {
	iu.mutation.SetShort(s)
	return iu
}

// SetNillableShort sets the "short" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableShort(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetShort(*s)
	}
	return iu
}

// ClearShort clears the value of the "short" field.
func (iu *InvoiceUpdate) ClearShort() *InvoiceUpdate {
	iu.mutation.ClearShort()
	return iu
}

// SetMemo sets the "memo" field.
func (iu *InvoiceUpdate) SetMemo(u uint64) *InvoiceUpdate {
	iu.mutation.ResetMemo()
	iu.mutation.SetMemo(u)
	return iu
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableMemo(u *uint64) *InvoiceUpdate {
	if u != nil {
		iu.SetMemo(*u)
	}
	return iu
}

// AddMemo adds u to the "memo" field.
func (iu *InvoiceUpdate) AddMemo(u int64) *InvoiceUpdate {
	iu.mutation.AddMemo(u)
	return iu
}

// ClearMemo clears the value of the "memo" field.
func (iu *InvoiceUpdate) ClearMemo() *InvoiceUpdate {
	iu.mutation.ClearMemo()
	return iu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (iu *InvoiceUpdate) SetOwnerID(id int64) *InvoiceUpdate {
	iu.mutation.SetOwnerID(id)
	return iu
}

// SetOwner sets the "owner" edge to the User entity.
func (iu *InvoiceUpdate) SetOwner(u *User) *InvoiceUpdate {
	return iu.SetOwnerID(u.ID)
}

// AddPaymentIDs adds the "payments" edge to the Invoices_payments entity by IDs.
func (iu *InvoiceUpdate) AddPaymentIDs(ids ...int) *InvoiceUpdate {
	iu.mutation.AddPaymentIDs(ids...)
	return iu
}

// AddPayments adds the "payments" edges to the Invoices_payments entity.
func (iu *InvoiceUpdate) AddPayments(i ...*Invoices_payments) *InvoiceUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.AddPaymentIDs(ids...)
}

// Mutation returns the InvoiceMutation object of the builder.
func (iu *InvoiceUpdate) Mutation() *InvoiceMutation {
	return iu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (iu *InvoiceUpdate) ClearOwner() *InvoiceUpdate {
	iu.mutation.ClearOwner()
	return iu
}

// ClearPayments clears all "payments" edges to the Invoices_payments entity.
func (iu *InvoiceUpdate) ClearPayments() *InvoiceUpdate {
	iu.mutation.ClearPayments()
	return iu
}

// RemovePaymentIDs removes the "payments" edge to Invoices_payments entities by IDs.
func (iu *InvoiceUpdate) RemovePaymentIDs(ids ...int) *InvoiceUpdate {
	iu.mutation.RemovePaymentIDs(ids...)
	return iu
}

// RemovePayments removes "payments" edges to Invoices_payments entities.
func (iu *InvoiceUpdate) RemovePayments(i ...*Invoices_payments) *InvoiceUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.RemovePaymentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InvoiceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InvoiceUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InvoiceUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InvoiceUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *InvoiceUpdate) check() error {
	if _, ok := iu.mutation.OwnerID(); iu.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Invoice.owner"`)
	}
	return nil
}

func (iu *InvoiceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(invoice.Table, invoice.Columns, sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Name(); ok {
		_spec.SetField(invoice.FieldName, field.TypeString, value)
	}
	if iu.mutation.NameCleared() {
		_spec.ClearField(invoice.FieldName, field.TypeString)
	}
	if value, ok := iu.mutation.Address(); ok {
		_spec.SetField(invoice.FieldAddress, field.TypeString, value)
	}
	if iu.mutation.AddressCleared() {
		_spec.ClearField(invoice.FieldAddress, field.TypeString)
	}
	if value, ok := iu.mutation.Amount(); ok {
		_spec.SetField(invoice.FieldAmount, field.TypeString, value)
	}
	if iu.mutation.AmountCleared() {
		_spec.ClearField(invoice.FieldAmount, field.TypeString)
	}
	if value, ok := iu.mutation.Currency(); ok {
		_spec.SetField(invoice.FieldCurrency, field.TypeString, value)
	}
	if iu.mutation.CurrencyCleared() {
		_spec.ClearField(invoice.FieldCurrency, field.TypeString)
	}
	if value, ok := iu.mutation.Comment(); ok {
		_spec.SetField(invoice.FieldComment, field.TypeString, value)
	}
	if iu.mutation.CommentCleared() {
		_spec.ClearField(invoice.FieldComment, field.TypeString)
	}
	if value, ok := iu.mutation.Active(); ok {
		_spec.SetField(invoice.FieldActive, field.TypeBool, value)
	}
	if iu.mutation.ActiveCleared() {
		_spec.ClearField(invoice.FieldActive, field.TypeBool)
	}
	if value, ok := iu.mutation.Repeatability(); ok {
		_spec.SetField(invoice.FieldRepeatability, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedRepeatability(); ok {
		_spec.AddField(invoice.FieldRepeatability, field.TypeInt, value)
	}
	if iu.mutation.RepeatabilityCleared() {
		_spec.ClearField(invoice.FieldRepeatability, field.TypeInt)
	}
	if value, ok := iu.mutation.Paid(); ok {
		_spec.SetField(invoice.FieldPaid, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedPaid(); ok {
		_spec.AddField(invoice.FieldPaid, field.TypeInt, value)
	}
	if iu.mutation.PaidCleared() {
		_spec.ClearField(invoice.FieldPaid, field.TypeInt)
	}
	if value, ok := iu.mutation.Short(); ok {
		_spec.SetField(invoice.FieldShort, field.TypeString, value)
	}
	if iu.mutation.ShortCleared() {
		_spec.ClearField(invoice.FieldShort, field.TypeString)
	}
	if value, ok := iu.mutation.Memo(); ok {
		_spec.SetField(invoice.FieldMemo, field.TypeUint64, value)
	}
	if value, ok := iu.mutation.AddedMemo(); ok {
		_spec.AddField(invoice.FieldMemo, field.TypeUint64, value)
	}
	if iu.mutation.MemoCleared() {
		_spec.ClearField(invoice.FieldMemo, field.TypeUint64)
	}
	if iu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.OwnerTable,
			Columns: []string{invoice.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.OwnerTable,
			Columns: []string{invoice.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.PaymentsTable,
			Columns: []string{invoice.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoices_payments.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedPaymentsIDs(); len(nodes) > 0 && !iu.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.PaymentsTable,
			Columns: []string{invoice.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoices_payments.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.PaymentsTable,
			Columns: []string{invoice.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoices_payments.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invoice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// InvoiceUpdateOne is the builder for updating a single Invoice entity.
type InvoiceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InvoiceMutation
}

// SetName sets the "name" field.
func (iuo *InvoiceUpdateOne) SetName(s string) *InvoiceUpdateOne {
	iuo.mutation.SetName(s)
	return iuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableName(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetName(*s)
	}
	return iuo
}

// ClearName clears the value of the "name" field.
func (iuo *InvoiceUpdateOne) ClearName() *InvoiceUpdateOne {
	iuo.mutation.ClearName()
	return iuo
}

// SetAddress sets the "address" field.
func (iuo *InvoiceUpdateOne) SetAddress(s string) *InvoiceUpdateOne {
	iuo.mutation.SetAddress(s)
	return iuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableAddress(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetAddress(*s)
	}
	return iuo
}

// ClearAddress clears the value of the "address" field.
func (iuo *InvoiceUpdateOne) ClearAddress() *InvoiceUpdateOne {
	iuo.mutation.ClearAddress()
	return iuo
}

// SetAmount sets the "amount" field.
func (iuo *InvoiceUpdateOne) SetAmount(s string) *InvoiceUpdateOne {
	iuo.mutation.SetAmount(s)
	return iuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableAmount(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetAmount(*s)
	}
	return iuo
}

// ClearAmount clears the value of the "amount" field.
func (iuo *InvoiceUpdateOne) ClearAmount() *InvoiceUpdateOne {
	iuo.mutation.ClearAmount()
	return iuo
}

// SetCurrency sets the "currency" field.
func (iuo *InvoiceUpdateOne) SetCurrency(s string) *InvoiceUpdateOne {
	iuo.mutation.SetCurrency(s)
	return iuo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableCurrency(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetCurrency(*s)
	}
	return iuo
}

// ClearCurrency clears the value of the "currency" field.
func (iuo *InvoiceUpdateOne) ClearCurrency() *InvoiceUpdateOne {
	iuo.mutation.ClearCurrency()
	return iuo
}

// SetComment sets the "comment" field.
func (iuo *InvoiceUpdateOne) SetComment(s string) *InvoiceUpdateOne {
	iuo.mutation.SetComment(s)
	return iuo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableComment(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetComment(*s)
	}
	return iuo
}

// ClearComment clears the value of the "comment" field.
func (iuo *InvoiceUpdateOne) ClearComment() *InvoiceUpdateOne {
	iuo.mutation.ClearComment()
	return iuo
}

// SetActive sets the "active" field.
func (iuo *InvoiceUpdateOne) SetActive(b bool) *InvoiceUpdateOne {
	iuo.mutation.SetActive(b)
	return iuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableActive(b *bool) *InvoiceUpdateOne {
	if b != nil {
		iuo.SetActive(*b)
	}
	return iuo
}

// ClearActive clears the value of the "active" field.
func (iuo *InvoiceUpdateOne) ClearActive() *InvoiceUpdateOne {
	iuo.mutation.ClearActive()
	return iuo
}

// SetRepeatability sets the "repeatability" field.
func (iuo *InvoiceUpdateOne) SetRepeatability(i int) *InvoiceUpdateOne {
	iuo.mutation.ResetRepeatability()
	iuo.mutation.SetRepeatability(i)
	return iuo
}

// SetNillableRepeatability sets the "repeatability" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableRepeatability(i *int) *InvoiceUpdateOne {
	if i != nil {
		iuo.SetRepeatability(*i)
	}
	return iuo
}

// AddRepeatability adds i to the "repeatability" field.
func (iuo *InvoiceUpdateOne) AddRepeatability(i int) *InvoiceUpdateOne {
	iuo.mutation.AddRepeatability(i)
	return iuo
}

// ClearRepeatability clears the value of the "repeatability" field.
func (iuo *InvoiceUpdateOne) ClearRepeatability() *InvoiceUpdateOne {
	iuo.mutation.ClearRepeatability()
	return iuo
}

// SetPaid sets the "paid" field.
func (iuo *InvoiceUpdateOne) SetPaid(i int) *InvoiceUpdateOne {
	iuo.mutation.ResetPaid()
	iuo.mutation.SetPaid(i)
	return iuo
}

// SetNillablePaid sets the "paid" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillablePaid(i *int) *InvoiceUpdateOne {
	if i != nil {
		iuo.SetPaid(*i)
	}
	return iuo
}

// AddPaid adds i to the "paid" field.
func (iuo *InvoiceUpdateOne) AddPaid(i int) *InvoiceUpdateOne {
	iuo.mutation.AddPaid(i)
	return iuo
}

// ClearPaid clears the value of the "paid" field.
func (iuo *InvoiceUpdateOne) ClearPaid() *InvoiceUpdateOne {
	iuo.mutation.ClearPaid()
	return iuo
}

// SetShort sets the "short" field.
func (iuo *InvoiceUpdateOne) SetShort(s string) *InvoiceUpdateOne {
	iuo.mutation.SetShort(s)
	return iuo
}

// SetNillableShort sets the "short" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableShort(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetShort(*s)
	}
	return iuo
}

// ClearShort clears the value of the "short" field.
func (iuo *InvoiceUpdateOne) ClearShort() *InvoiceUpdateOne {
	iuo.mutation.ClearShort()
	return iuo
}

// SetMemo sets the "memo" field.
func (iuo *InvoiceUpdateOne) SetMemo(u uint64) *InvoiceUpdateOne {
	iuo.mutation.ResetMemo()
	iuo.mutation.SetMemo(u)
	return iuo
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableMemo(u *uint64) *InvoiceUpdateOne {
	if u != nil {
		iuo.SetMemo(*u)
	}
	return iuo
}

// AddMemo adds u to the "memo" field.
func (iuo *InvoiceUpdateOne) AddMemo(u int64) *InvoiceUpdateOne {
	iuo.mutation.AddMemo(u)
	return iuo
}

// ClearMemo clears the value of the "memo" field.
func (iuo *InvoiceUpdateOne) ClearMemo() *InvoiceUpdateOne {
	iuo.mutation.ClearMemo()
	return iuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (iuo *InvoiceUpdateOne) SetOwnerID(id int64) *InvoiceUpdateOne {
	iuo.mutation.SetOwnerID(id)
	return iuo
}

// SetOwner sets the "owner" edge to the User entity.
func (iuo *InvoiceUpdateOne) SetOwner(u *User) *InvoiceUpdateOne {
	return iuo.SetOwnerID(u.ID)
}

// AddPaymentIDs adds the "payments" edge to the Invoices_payments entity by IDs.
func (iuo *InvoiceUpdateOne) AddPaymentIDs(ids ...int) *InvoiceUpdateOne {
	iuo.mutation.AddPaymentIDs(ids...)
	return iuo
}

// AddPayments adds the "payments" edges to the Invoices_payments entity.
func (iuo *InvoiceUpdateOne) AddPayments(i ...*Invoices_payments) *InvoiceUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.AddPaymentIDs(ids...)
}

// Mutation returns the InvoiceMutation object of the builder.
func (iuo *InvoiceUpdateOne) Mutation() *InvoiceMutation {
	return iuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (iuo *InvoiceUpdateOne) ClearOwner() *InvoiceUpdateOne {
	iuo.mutation.ClearOwner()
	return iuo
}

// ClearPayments clears all "payments" edges to the Invoices_payments entity.
func (iuo *InvoiceUpdateOne) ClearPayments() *InvoiceUpdateOne {
	iuo.mutation.ClearPayments()
	return iuo
}

// RemovePaymentIDs removes the "payments" edge to Invoices_payments entities by IDs.
func (iuo *InvoiceUpdateOne) RemovePaymentIDs(ids ...int) *InvoiceUpdateOne {
	iuo.mutation.RemovePaymentIDs(ids...)
	return iuo
}

// RemovePayments removes "payments" edges to Invoices_payments entities.
func (iuo *InvoiceUpdateOne) RemovePayments(i ...*Invoices_payments) *InvoiceUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.RemovePaymentIDs(ids...)
}

// Where appends a list predicates to the InvoiceUpdate builder.
func (iuo *InvoiceUpdateOne) Where(ps ...predicate.Invoice) *InvoiceUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InvoiceUpdateOne) Select(field string, fields ...string) *InvoiceUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Invoice entity.
func (iuo *InvoiceUpdateOne) Save(ctx context.Context) (*Invoice, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InvoiceUpdateOne) SaveX(ctx context.Context) *Invoice {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InvoiceUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InvoiceUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *InvoiceUpdateOne) check() error {
	if _, ok := iuo.mutation.OwnerID(); iuo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Invoice.owner"`)
	}
	return nil
}

func (iuo *InvoiceUpdateOne) sqlSave(ctx context.Context) (_node *Invoice, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(invoice.Table, invoice.Columns, sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Invoice.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, invoice.FieldID)
		for _, f := range fields {
			if !invoice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != invoice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Name(); ok {
		_spec.SetField(invoice.FieldName, field.TypeString, value)
	}
	if iuo.mutation.NameCleared() {
		_spec.ClearField(invoice.FieldName, field.TypeString)
	}
	if value, ok := iuo.mutation.Address(); ok {
		_spec.SetField(invoice.FieldAddress, field.TypeString, value)
	}
	if iuo.mutation.AddressCleared() {
		_spec.ClearField(invoice.FieldAddress, field.TypeString)
	}
	if value, ok := iuo.mutation.Amount(); ok {
		_spec.SetField(invoice.FieldAmount, field.TypeString, value)
	}
	if iuo.mutation.AmountCleared() {
		_spec.ClearField(invoice.FieldAmount, field.TypeString)
	}
	if value, ok := iuo.mutation.Currency(); ok {
		_spec.SetField(invoice.FieldCurrency, field.TypeString, value)
	}
	if iuo.mutation.CurrencyCleared() {
		_spec.ClearField(invoice.FieldCurrency, field.TypeString)
	}
	if value, ok := iuo.mutation.Comment(); ok {
		_spec.SetField(invoice.FieldComment, field.TypeString, value)
	}
	if iuo.mutation.CommentCleared() {
		_spec.ClearField(invoice.FieldComment, field.TypeString)
	}
	if value, ok := iuo.mutation.Active(); ok {
		_spec.SetField(invoice.FieldActive, field.TypeBool, value)
	}
	if iuo.mutation.ActiveCleared() {
		_spec.ClearField(invoice.FieldActive, field.TypeBool)
	}
	if value, ok := iuo.mutation.Repeatability(); ok {
		_spec.SetField(invoice.FieldRepeatability, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedRepeatability(); ok {
		_spec.AddField(invoice.FieldRepeatability, field.TypeInt, value)
	}
	if iuo.mutation.RepeatabilityCleared() {
		_spec.ClearField(invoice.FieldRepeatability, field.TypeInt)
	}
	if value, ok := iuo.mutation.Paid(); ok {
		_spec.SetField(invoice.FieldPaid, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedPaid(); ok {
		_spec.AddField(invoice.FieldPaid, field.TypeInt, value)
	}
	if iuo.mutation.PaidCleared() {
		_spec.ClearField(invoice.FieldPaid, field.TypeInt)
	}
	if value, ok := iuo.mutation.Short(); ok {
		_spec.SetField(invoice.FieldShort, field.TypeString, value)
	}
	if iuo.mutation.ShortCleared() {
		_spec.ClearField(invoice.FieldShort, field.TypeString)
	}
	if value, ok := iuo.mutation.Memo(); ok {
		_spec.SetField(invoice.FieldMemo, field.TypeUint64, value)
	}
	if value, ok := iuo.mutation.AddedMemo(); ok {
		_spec.AddField(invoice.FieldMemo, field.TypeUint64, value)
	}
	if iuo.mutation.MemoCleared() {
		_spec.ClearField(invoice.FieldMemo, field.TypeUint64)
	}
	if iuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.OwnerTable,
			Columns: []string{invoice.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.OwnerTable,
			Columns: []string{invoice.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.PaymentsTable,
			Columns: []string{invoice.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoices_payments.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedPaymentsIDs(); len(nodes) > 0 && !iuo.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.PaymentsTable,
			Columns: []string{invoice.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoices_payments.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.PaymentsTable,
			Columns: []string{invoice.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoices_payments.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Invoice{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invoice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
