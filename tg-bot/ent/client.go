// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/Simplewallethq/tg-bot/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Simplewallethq/tg-bot/ent/adressbook"
	"github.com/Simplewallethq/tg-bot/ent/balances"
	"github.com/Simplewallethq/tg-bot/ent/delegates"
	"github.com/Simplewallethq/tg-bot/ent/invoice"
	"github.com/Simplewallethq/tg-bot/ent/invoices_payments"
	"github.com/Simplewallethq/tg-bot/ent/privatekeys"
	"github.com/Simplewallethq/tg-bot/ent/recentinvoices"
	"github.com/Simplewallethq/tg-bot/ent/rewardsdata"
	"github.com/Simplewallethq/tg-bot/ent/settings"
	"github.com/Simplewallethq/tg-bot/ent/swaps"
	"github.com/Simplewallethq/tg-bot/ent/task"
	"github.com/Simplewallethq/tg-bot/ent/transfers"
	"github.com/Simplewallethq/tg-bot/ent/undelegates"
	"github.com/Simplewallethq/tg-bot/ent/user"
	"github.com/Simplewallethq/tg-bot/ent/userstate"
	"github.com/Simplewallethq/tg-bot/ent/validators"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AdressBook is the client for interacting with the AdressBook builders.
	AdressBook *AdressBookClient
	// Balances is the client for interacting with the Balances builders.
	Balances *BalancesClient
	// Delegates is the client for interacting with the Delegates builders.
	Delegates *DelegatesClient
	// Invoice is the client for interacting with the Invoice builders.
	Invoice *InvoiceClient
	// Invoices_payments is the client for interacting with the Invoices_payments builders.
	Invoices_payments *InvoicesPaymentsClient
	// PrivateKeys is the client for interacting with the PrivateKeys builders.
	PrivateKeys *PrivateKeysClient
	// RecentInvoices is the client for interacting with the RecentInvoices builders.
	RecentInvoices *RecentInvoicesClient
	// RewardsData is the client for interacting with the RewardsData builders.
	RewardsData *RewardsDataClient
	// Settings is the client for interacting with the Settings builders.
	Settings *SettingsClient
	// Swaps is the client for interacting with the Swaps builders.
	Swaps *SwapsClient
	// Task is the client for interacting with the Task builders.
	Task *TaskClient
	// Transfers is the client for interacting with the Transfers builders.
	Transfers *TransfersClient
	// Undelegates is the client for interacting with the Undelegates builders.
	Undelegates *UndelegatesClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserState is the client for interacting with the UserState builders.
	UserState *UserStateClient
	// Validators is the client for interacting with the Validators builders.
	Validators *ValidatorsClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AdressBook = NewAdressBookClient(c.config)
	c.Balances = NewBalancesClient(c.config)
	c.Delegates = NewDelegatesClient(c.config)
	c.Invoice = NewInvoiceClient(c.config)
	c.Invoices_payments = NewInvoicesPaymentsClient(c.config)
	c.PrivateKeys = NewPrivateKeysClient(c.config)
	c.RecentInvoices = NewRecentInvoicesClient(c.config)
	c.RewardsData = NewRewardsDataClient(c.config)
	c.Settings = NewSettingsClient(c.config)
	c.Swaps = NewSwapsClient(c.config)
	c.Task = NewTaskClient(c.config)
	c.Transfers = NewTransfersClient(c.config)
	c.Undelegates = NewUndelegatesClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserState = NewUserStateClient(c.config)
	c.Validators = NewValidatorsClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		AdressBook:        NewAdressBookClient(cfg),
		Balances:          NewBalancesClient(cfg),
		Delegates:         NewDelegatesClient(cfg),
		Invoice:           NewInvoiceClient(cfg),
		Invoices_payments: NewInvoicesPaymentsClient(cfg),
		PrivateKeys:       NewPrivateKeysClient(cfg),
		RecentInvoices:    NewRecentInvoicesClient(cfg),
		RewardsData:       NewRewardsDataClient(cfg),
		Settings:          NewSettingsClient(cfg),
		Swaps:             NewSwapsClient(cfg),
		Task:              NewTaskClient(cfg),
		Transfers:         NewTransfersClient(cfg),
		Undelegates:       NewUndelegatesClient(cfg),
		User:              NewUserClient(cfg),
		UserState:         NewUserStateClient(cfg),
		Validators:        NewValidatorsClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		AdressBook:        NewAdressBookClient(cfg),
		Balances:          NewBalancesClient(cfg),
		Delegates:         NewDelegatesClient(cfg),
		Invoice:           NewInvoiceClient(cfg),
		Invoices_payments: NewInvoicesPaymentsClient(cfg),
		PrivateKeys:       NewPrivateKeysClient(cfg),
		RecentInvoices:    NewRecentInvoicesClient(cfg),
		RewardsData:       NewRewardsDataClient(cfg),
		Settings:          NewSettingsClient(cfg),
		Swaps:             NewSwapsClient(cfg),
		Task:              NewTaskClient(cfg),
		Transfers:         NewTransfersClient(cfg),
		Undelegates:       NewUndelegatesClient(cfg),
		User:              NewUserClient(cfg),
		UserState:         NewUserStateClient(cfg),
		Validators:        NewValidatorsClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AdressBook.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.AdressBook, c.Balances, c.Delegates, c.Invoice, c.Invoices_payments,
		c.PrivateKeys, c.RecentInvoices, c.RewardsData, c.Settings, c.Swaps, c.Task,
		c.Transfers, c.Undelegates, c.User, c.UserState, c.Validators,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.AdressBook, c.Balances, c.Delegates, c.Invoice, c.Invoices_payments,
		c.PrivateKeys, c.RecentInvoices, c.RewardsData, c.Settings, c.Swaps, c.Task,
		c.Transfers, c.Undelegates, c.User, c.UserState, c.Validators,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AdressBookMutation:
		return c.AdressBook.mutate(ctx, m)
	case *BalancesMutation:
		return c.Balances.mutate(ctx, m)
	case *DelegatesMutation:
		return c.Delegates.mutate(ctx, m)
	case *InvoiceMutation:
		return c.Invoice.mutate(ctx, m)
	case *InvoicesPaymentsMutation:
		return c.Invoices_payments.mutate(ctx, m)
	case *PrivateKeysMutation:
		return c.PrivateKeys.mutate(ctx, m)
	case *RecentInvoicesMutation:
		return c.RecentInvoices.mutate(ctx, m)
	case *RewardsDataMutation:
		return c.RewardsData.mutate(ctx, m)
	case *SettingsMutation:
		return c.Settings.mutate(ctx, m)
	case *SwapsMutation:
		return c.Swaps.mutate(ctx, m)
	case *TaskMutation:
		return c.Task.mutate(ctx, m)
	case *TransfersMutation:
		return c.Transfers.mutate(ctx, m)
	case *UndelegatesMutation:
		return c.Undelegates.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserStateMutation:
		return c.UserState.mutate(ctx, m)
	case *ValidatorsMutation:
		return c.Validators.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AdressBookClient is a client for the AdressBook schema.
type AdressBookClient struct {
	config
}

// NewAdressBookClient returns a client for the AdressBook from the given config.
func NewAdressBookClient(c config) *AdressBookClient {
	return &AdressBookClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `adressbook.Hooks(f(g(h())))`.
func (c *AdressBookClient) Use(hooks ...Hook) {
	c.hooks.AdressBook = append(c.hooks.AdressBook, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `adressbook.Intercept(f(g(h())))`.
func (c *AdressBookClient) Intercept(interceptors ...Interceptor) {
	c.inters.AdressBook = append(c.inters.AdressBook, interceptors...)
}

// Create returns a builder for creating a AdressBook entity.
func (c *AdressBookClient) Create() *AdressBookCreate {
	mutation := newAdressBookMutation(c.config, OpCreate)
	return &AdressBookCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AdressBook entities.
func (c *AdressBookClient) CreateBulk(builders ...*AdressBookCreate) *AdressBookCreateBulk {
	return &AdressBookCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AdressBook.
func (c *AdressBookClient) Update() *AdressBookUpdate {
	mutation := newAdressBookMutation(c.config, OpUpdate)
	return &AdressBookUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdressBookClient) UpdateOne(ab *AdressBook) *AdressBookUpdateOne {
	mutation := newAdressBookMutation(c.config, OpUpdateOne, withAdressBook(ab))
	return &AdressBookUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdressBookClient) UpdateOneID(id int) *AdressBookUpdateOne {
	mutation := newAdressBookMutation(c.config, OpUpdateOne, withAdressBookID(id))
	return &AdressBookUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AdressBook.
func (c *AdressBookClient) Delete() *AdressBookDelete {
	mutation := newAdressBookMutation(c.config, OpDelete)
	return &AdressBookDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AdressBookClient) DeleteOne(ab *AdressBook) *AdressBookDeleteOne {
	return c.DeleteOneID(ab.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AdressBookClient) DeleteOneID(id int) *AdressBookDeleteOne {
	builder := c.Delete().Where(adressbook.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdressBookDeleteOne{builder}
}

// Query returns a query builder for AdressBook.
func (c *AdressBookClient) Query() *AdressBookQuery {
	return &AdressBookQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAdressBook},
		inters: c.Interceptors(),
	}
}

// Get returns a AdressBook entity by its id.
func (c *AdressBookClient) Get(ctx context.Context, id int) (*AdressBook, error) {
	return c.Query().Where(adressbook.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdressBookClient) GetX(ctx context.Context, id int) *AdressBook {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a AdressBook.
func (c *AdressBookClient) QueryOwner(ab *AdressBook) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ab.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(adressbook.Table, adressbook.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, adressbook.OwnerTable, adressbook.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(ab.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AdressBookClient) Hooks() []Hook {
	return c.hooks.AdressBook
}

// Interceptors returns the client interceptors.
func (c *AdressBookClient) Interceptors() []Interceptor {
	return c.inters.AdressBook
}

func (c *AdressBookClient) mutate(ctx context.Context, m *AdressBookMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AdressBookCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AdressBookUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AdressBookUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AdressBookDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AdressBook mutation op: %q", m.Op())
	}
}

// BalancesClient is a client for the Balances schema.
type BalancesClient struct {
	config
}

// NewBalancesClient returns a client for the Balances from the given config.
func NewBalancesClient(c config) *BalancesClient {
	return &BalancesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `balances.Hooks(f(g(h())))`.
func (c *BalancesClient) Use(hooks ...Hook) {
	c.hooks.Balances = append(c.hooks.Balances, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `balances.Intercept(f(g(h())))`.
func (c *BalancesClient) Intercept(interceptors ...Interceptor) {
	c.inters.Balances = append(c.inters.Balances, interceptors...)
}

// Create returns a builder for creating a Balances entity.
func (c *BalancesClient) Create() *BalancesCreate {
	mutation := newBalancesMutation(c.config, OpCreate)
	return &BalancesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Balances entities.
func (c *BalancesClient) CreateBulk(builders ...*BalancesCreate) *BalancesCreateBulk {
	return &BalancesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Balances.
func (c *BalancesClient) Update() *BalancesUpdate {
	mutation := newBalancesMutation(c.config, OpUpdate)
	return &BalancesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BalancesClient) UpdateOne(b *Balances) *BalancesUpdateOne {
	mutation := newBalancesMutation(c.config, OpUpdateOne, withBalances(b))
	return &BalancesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BalancesClient) UpdateOneID(id int) *BalancesUpdateOne {
	mutation := newBalancesMutation(c.config, OpUpdateOne, withBalancesID(id))
	return &BalancesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Balances.
func (c *BalancesClient) Delete() *BalancesDelete {
	mutation := newBalancesMutation(c.config, OpDelete)
	return &BalancesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BalancesClient) DeleteOne(b *Balances) *BalancesDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BalancesClient) DeleteOneID(id int) *BalancesDeleteOne {
	builder := c.Delete().Where(balances.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BalancesDeleteOne{builder}
}

// Query returns a query builder for Balances.
func (c *BalancesClient) Query() *BalancesQuery {
	return &BalancesQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBalances},
		inters: c.Interceptors(),
	}
}

// Get returns a Balances entity by its id.
func (c *BalancesClient) Get(ctx context.Context, id int) (*Balances, error) {
	return c.Query().Where(balances.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BalancesClient) GetX(ctx context.Context, id int) *Balances {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a Balances.
func (c *BalancesClient) QueryOwner(b *Balances) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(balances.Table, balances.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, balances.OwnerTable, balances.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BalancesClient) Hooks() []Hook {
	return c.hooks.Balances
}

// Interceptors returns the client interceptors.
func (c *BalancesClient) Interceptors() []Interceptor {
	return c.inters.Balances
}

func (c *BalancesClient) mutate(ctx context.Context, m *BalancesMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BalancesCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BalancesUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BalancesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BalancesDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Balances mutation op: %q", m.Op())
	}
}

// DelegatesClient is a client for the Delegates schema.
type DelegatesClient struct {
	config
}

// NewDelegatesClient returns a client for the Delegates from the given config.
func NewDelegatesClient(c config) *DelegatesClient {
	return &DelegatesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `delegates.Hooks(f(g(h())))`.
func (c *DelegatesClient) Use(hooks ...Hook) {
	c.hooks.Delegates = append(c.hooks.Delegates, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `delegates.Intercept(f(g(h())))`.
func (c *DelegatesClient) Intercept(interceptors ...Interceptor) {
	c.inters.Delegates = append(c.inters.Delegates, interceptors...)
}

// Create returns a builder for creating a Delegates entity.
func (c *DelegatesClient) Create() *DelegatesCreate {
	mutation := newDelegatesMutation(c.config, OpCreate)
	return &DelegatesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Delegates entities.
func (c *DelegatesClient) CreateBulk(builders ...*DelegatesCreate) *DelegatesCreateBulk {
	return &DelegatesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Delegates.
func (c *DelegatesClient) Update() *DelegatesUpdate {
	mutation := newDelegatesMutation(c.config, OpUpdate)
	return &DelegatesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DelegatesClient) UpdateOne(d *Delegates) *DelegatesUpdateOne {
	mutation := newDelegatesMutation(c.config, OpUpdateOne, withDelegates(d))
	return &DelegatesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DelegatesClient) UpdateOneID(id int) *DelegatesUpdateOne {
	mutation := newDelegatesMutation(c.config, OpUpdateOne, withDelegatesID(id))
	return &DelegatesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Delegates.
func (c *DelegatesClient) Delete() *DelegatesDelete {
	mutation := newDelegatesMutation(c.config, OpDelete)
	return &DelegatesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DelegatesClient) DeleteOne(d *Delegates) *DelegatesDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DelegatesClient) DeleteOneID(id int) *DelegatesDeleteOne {
	builder := c.Delete().Where(delegates.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DelegatesDeleteOne{builder}
}

// Query returns a query builder for Delegates.
func (c *DelegatesClient) Query() *DelegatesQuery {
	return &DelegatesQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDelegates},
		inters: c.Interceptors(),
	}
}

// Get returns a Delegates entity by its id.
func (c *DelegatesClient) Get(ctx context.Context, id int) (*Delegates, error) {
	return c.Query().Where(delegates.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DelegatesClient) GetX(ctx context.Context, id int) *Delegates {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a Delegates.
func (c *DelegatesClient) QueryOwner(d *Delegates) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(delegates.Table, delegates.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, delegates.OwnerTable, delegates.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DelegatesClient) Hooks() []Hook {
	return c.hooks.Delegates
}

// Interceptors returns the client interceptors.
func (c *DelegatesClient) Interceptors() []Interceptor {
	return c.inters.Delegates
}

func (c *DelegatesClient) mutate(ctx context.Context, m *DelegatesMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DelegatesCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DelegatesUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DelegatesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DelegatesDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Delegates mutation op: %q", m.Op())
	}
}

// InvoiceClient is a client for the Invoice schema.
type InvoiceClient struct {
	config
}

// NewInvoiceClient returns a client for the Invoice from the given config.
func NewInvoiceClient(c config) *InvoiceClient {
	return &InvoiceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `invoice.Hooks(f(g(h())))`.
func (c *InvoiceClient) Use(hooks ...Hook) {
	c.hooks.Invoice = append(c.hooks.Invoice, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `invoice.Intercept(f(g(h())))`.
func (c *InvoiceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Invoice = append(c.inters.Invoice, interceptors...)
}

// Create returns a builder for creating a Invoice entity.
func (c *InvoiceClient) Create() *InvoiceCreate {
	mutation := newInvoiceMutation(c.config, OpCreate)
	return &InvoiceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Invoice entities.
func (c *InvoiceClient) CreateBulk(builders ...*InvoiceCreate) *InvoiceCreateBulk {
	return &InvoiceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Invoice.
func (c *InvoiceClient) Update() *InvoiceUpdate {
	mutation := newInvoiceMutation(c.config, OpUpdate)
	return &InvoiceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InvoiceClient) UpdateOne(i *Invoice) *InvoiceUpdateOne {
	mutation := newInvoiceMutation(c.config, OpUpdateOne, withInvoice(i))
	return &InvoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InvoiceClient) UpdateOneID(id int) *InvoiceUpdateOne {
	mutation := newInvoiceMutation(c.config, OpUpdateOne, withInvoiceID(id))
	return &InvoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Invoice.
func (c *InvoiceClient) Delete() *InvoiceDelete {
	mutation := newInvoiceMutation(c.config, OpDelete)
	return &InvoiceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InvoiceClient) DeleteOne(i *Invoice) *InvoiceDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InvoiceClient) DeleteOneID(id int) *InvoiceDeleteOne {
	builder := c.Delete().Where(invoice.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InvoiceDeleteOne{builder}
}

// Query returns a query builder for Invoice.
func (c *InvoiceClient) Query() *InvoiceQuery {
	return &InvoiceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInvoice},
		inters: c.Interceptors(),
	}
}

// Get returns a Invoice entity by its id.
func (c *InvoiceClient) Get(ctx context.Context, id int) (*Invoice, error) {
	return c.Query().Where(invoice.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InvoiceClient) GetX(ctx context.Context, id int) *Invoice {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a Invoice.
func (c *InvoiceClient) QueryOwner(i *Invoice) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invoice.Table, invoice.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, invoice.OwnerTable, invoice.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPayments queries the payments edge of a Invoice.
func (c *InvoiceClient) QueryPayments(i *Invoice) *InvoicesPaymentsQuery {
	query := (&InvoicesPaymentsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invoice.Table, invoice.FieldID, id),
			sqlgraph.To(invoices_payments.Table, invoices_payments.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, invoice.PaymentsTable, invoice.PaymentsColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InvoiceClient) Hooks() []Hook {
	return c.hooks.Invoice
}

// Interceptors returns the client interceptors.
func (c *InvoiceClient) Interceptors() []Interceptor {
	return c.inters.Invoice
}

func (c *InvoiceClient) mutate(ctx context.Context, m *InvoiceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InvoiceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InvoiceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InvoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InvoiceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Invoice mutation op: %q", m.Op())
	}
}

// InvoicesPaymentsClient is a client for the Invoices_payments schema.
type InvoicesPaymentsClient struct {
	config
}

// NewInvoicesPaymentsClient returns a client for the Invoices_payments from the given config.
func NewInvoicesPaymentsClient(c config) *InvoicesPaymentsClient {
	return &InvoicesPaymentsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `invoices_payments.Hooks(f(g(h())))`.
func (c *InvoicesPaymentsClient) Use(hooks ...Hook) {
	c.hooks.Invoices_payments = append(c.hooks.Invoices_payments, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `invoices_payments.Intercept(f(g(h())))`.
func (c *InvoicesPaymentsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Invoices_payments = append(c.inters.Invoices_payments, interceptors...)
}

// Create returns a builder for creating a Invoices_payments entity.
func (c *InvoicesPaymentsClient) Create() *InvoicesPaymentsCreate {
	mutation := newInvoicesPaymentsMutation(c.config, OpCreate)
	return &InvoicesPaymentsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Invoices_payments entities.
func (c *InvoicesPaymentsClient) CreateBulk(builders ...*InvoicesPaymentsCreate) *InvoicesPaymentsCreateBulk {
	return &InvoicesPaymentsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Invoices_payments.
func (c *InvoicesPaymentsClient) Update() *InvoicesPaymentsUpdate {
	mutation := newInvoicesPaymentsMutation(c.config, OpUpdate)
	return &InvoicesPaymentsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InvoicesPaymentsClient) UpdateOne(ip *Invoices_payments) *InvoicesPaymentsUpdateOne {
	mutation := newInvoicesPaymentsMutation(c.config, OpUpdateOne, withInvoices_payments(ip))
	return &InvoicesPaymentsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InvoicesPaymentsClient) UpdateOneID(id int) *InvoicesPaymentsUpdateOne {
	mutation := newInvoicesPaymentsMutation(c.config, OpUpdateOne, withInvoices_paymentsID(id))
	return &InvoicesPaymentsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Invoices_payments.
func (c *InvoicesPaymentsClient) Delete() *InvoicesPaymentsDelete {
	mutation := newInvoicesPaymentsMutation(c.config, OpDelete)
	return &InvoicesPaymentsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InvoicesPaymentsClient) DeleteOne(ip *Invoices_payments) *InvoicesPaymentsDeleteOne {
	return c.DeleteOneID(ip.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InvoicesPaymentsClient) DeleteOneID(id int) *InvoicesPaymentsDeleteOne {
	builder := c.Delete().Where(invoices_payments.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InvoicesPaymentsDeleteOne{builder}
}

// Query returns a query builder for Invoices_payments.
func (c *InvoicesPaymentsClient) Query() *InvoicesPaymentsQuery {
	return &InvoicesPaymentsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInvoicesPayments},
		inters: c.Interceptors(),
	}
}

// Get returns a Invoices_payments entity by its id.
func (c *InvoicesPaymentsClient) Get(ctx context.Context, id int) (*Invoices_payments, error) {
	return c.Query().Where(invoices_payments.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InvoicesPaymentsClient) GetX(ctx context.Context, id int) *Invoices_payments {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryInvoice queries the invoice edge of a Invoices_payments.
func (c *InvoicesPaymentsClient) QueryInvoice(ip *Invoices_payments) *InvoiceQuery {
	query := (&InvoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ip.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invoices_payments.Table, invoices_payments.FieldID, id),
			sqlgraph.To(invoice.Table, invoice.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, invoices_payments.InvoiceTable, invoices_payments.InvoiceColumn),
		)
		fromV = sqlgraph.Neighbors(ip.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InvoicesPaymentsClient) Hooks() []Hook {
	return c.hooks.Invoices_payments
}

// Interceptors returns the client interceptors.
func (c *InvoicesPaymentsClient) Interceptors() []Interceptor {
	return c.inters.Invoices_payments
}

func (c *InvoicesPaymentsClient) mutate(ctx context.Context, m *InvoicesPaymentsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InvoicesPaymentsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InvoicesPaymentsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InvoicesPaymentsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InvoicesPaymentsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Invoices_payments mutation op: %q", m.Op())
	}
}

// PrivateKeysClient is a client for the PrivateKeys schema.
type PrivateKeysClient struct {
	config
}

// NewPrivateKeysClient returns a client for the PrivateKeys from the given config.
func NewPrivateKeysClient(c config) *PrivateKeysClient {
	return &PrivateKeysClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `privatekeys.Hooks(f(g(h())))`.
func (c *PrivateKeysClient) Use(hooks ...Hook) {
	c.hooks.PrivateKeys = append(c.hooks.PrivateKeys, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `privatekeys.Intercept(f(g(h())))`.
func (c *PrivateKeysClient) Intercept(interceptors ...Interceptor) {
	c.inters.PrivateKeys = append(c.inters.PrivateKeys, interceptors...)
}

// Create returns a builder for creating a PrivateKeys entity.
func (c *PrivateKeysClient) Create() *PrivateKeysCreate {
	mutation := newPrivateKeysMutation(c.config, OpCreate)
	return &PrivateKeysCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PrivateKeys entities.
func (c *PrivateKeysClient) CreateBulk(builders ...*PrivateKeysCreate) *PrivateKeysCreateBulk {
	return &PrivateKeysCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PrivateKeys.
func (c *PrivateKeysClient) Update() *PrivateKeysUpdate {
	mutation := newPrivateKeysMutation(c.config, OpUpdate)
	return &PrivateKeysUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PrivateKeysClient) UpdateOne(pk *PrivateKeys) *PrivateKeysUpdateOne {
	mutation := newPrivateKeysMutation(c.config, OpUpdateOne, withPrivateKeys(pk))
	return &PrivateKeysUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PrivateKeysClient) UpdateOneID(id int) *PrivateKeysUpdateOne {
	mutation := newPrivateKeysMutation(c.config, OpUpdateOne, withPrivateKeysID(id))
	return &PrivateKeysUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PrivateKeys.
func (c *PrivateKeysClient) Delete() *PrivateKeysDelete {
	mutation := newPrivateKeysMutation(c.config, OpDelete)
	return &PrivateKeysDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PrivateKeysClient) DeleteOne(pk *PrivateKeys) *PrivateKeysDeleteOne {
	return c.DeleteOneID(pk.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PrivateKeysClient) DeleteOneID(id int) *PrivateKeysDeleteOne {
	builder := c.Delete().Where(privatekeys.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PrivateKeysDeleteOne{builder}
}

// Query returns a query builder for PrivateKeys.
func (c *PrivateKeysClient) Query() *PrivateKeysQuery {
	return &PrivateKeysQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePrivateKeys},
		inters: c.Interceptors(),
	}
}

// Get returns a PrivateKeys entity by its id.
func (c *PrivateKeysClient) Get(ctx context.Context, id int) (*PrivateKeys, error) {
	return c.Query().Where(privatekeys.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PrivateKeysClient) GetX(ctx context.Context, id int) *PrivateKeys {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a PrivateKeys.
func (c *PrivateKeysClient) QueryOwner(pk *PrivateKeys) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pk.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(privatekeys.Table, privatekeys.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, privatekeys.OwnerTable, privatekeys.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(pk.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PrivateKeysClient) Hooks() []Hook {
	return c.hooks.PrivateKeys
}

// Interceptors returns the client interceptors.
func (c *PrivateKeysClient) Interceptors() []Interceptor {
	return c.inters.PrivateKeys
}

func (c *PrivateKeysClient) mutate(ctx context.Context, m *PrivateKeysMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PrivateKeysCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PrivateKeysUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PrivateKeysUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PrivateKeysDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PrivateKeys mutation op: %q", m.Op())
	}
}

// RecentInvoicesClient is a client for the RecentInvoices schema.
type RecentInvoicesClient struct {
	config
}

// NewRecentInvoicesClient returns a client for the RecentInvoices from the given config.
func NewRecentInvoicesClient(c config) *RecentInvoicesClient {
	return &RecentInvoicesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `recentinvoices.Hooks(f(g(h())))`.
func (c *RecentInvoicesClient) Use(hooks ...Hook) {
	c.hooks.RecentInvoices = append(c.hooks.RecentInvoices, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `recentinvoices.Intercept(f(g(h())))`.
func (c *RecentInvoicesClient) Intercept(interceptors ...Interceptor) {
	c.inters.RecentInvoices = append(c.inters.RecentInvoices, interceptors...)
}

// Create returns a builder for creating a RecentInvoices entity.
func (c *RecentInvoicesClient) Create() *RecentInvoicesCreate {
	mutation := newRecentInvoicesMutation(c.config, OpCreate)
	return &RecentInvoicesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RecentInvoices entities.
func (c *RecentInvoicesClient) CreateBulk(builders ...*RecentInvoicesCreate) *RecentInvoicesCreateBulk {
	return &RecentInvoicesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RecentInvoices.
func (c *RecentInvoicesClient) Update() *RecentInvoicesUpdate {
	mutation := newRecentInvoicesMutation(c.config, OpUpdate)
	return &RecentInvoicesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RecentInvoicesClient) UpdateOne(ri *RecentInvoices) *RecentInvoicesUpdateOne {
	mutation := newRecentInvoicesMutation(c.config, OpUpdateOne, withRecentInvoices(ri))
	return &RecentInvoicesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RecentInvoicesClient) UpdateOneID(id int) *RecentInvoicesUpdateOne {
	mutation := newRecentInvoicesMutation(c.config, OpUpdateOne, withRecentInvoicesID(id))
	return &RecentInvoicesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RecentInvoices.
func (c *RecentInvoicesClient) Delete() *RecentInvoicesDelete {
	mutation := newRecentInvoicesMutation(c.config, OpDelete)
	return &RecentInvoicesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RecentInvoicesClient) DeleteOne(ri *RecentInvoices) *RecentInvoicesDeleteOne {
	return c.DeleteOneID(ri.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RecentInvoicesClient) DeleteOneID(id int) *RecentInvoicesDeleteOne {
	builder := c.Delete().Where(recentinvoices.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RecentInvoicesDeleteOne{builder}
}

// Query returns a query builder for RecentInvoices.
func (c *RecentInvoicesClient) Query() *RecentInvoicesQuery {
	return &RecentInvoicesQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRecentInvoices},
		inters: c.Interceptors(),
	}
}

// Get returns a RecentInvoices entity by its id.
func (c *RecentInvoicesClient) Get(ctx context.Context, id int) (*RecentInvoices, error) {
	return c.Query().Where(recentinvoices.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RecentInvoicesClient) GetX(ctx context.Context, id int) *RecentInvoices {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a RecentInvoices.
func (c *RecentInvoicesClient) QueryOwner(ri *RecentInvoices) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ri.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(recentinvoices.Table, recentinvoices.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, recentinvoices.OwnerTable, recentinvoices.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(ri.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RecentInvoicesClient) Hooks() []Hook {
	return c.hooks.RecentInvoices
}

// Interceptors returns the client interceptors.
func (c *RecentInvoicesClient) Interceptors() []Interceptor {
	return c.inters.RecentInvoices
}

func (c *RecentInvoicesClient) mutate(ctx context.Context, m *RecentInvoicesMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RecentInvoicesCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RecentInvoicesUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RecentInvoicesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RecentInvoicesDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RecentInvoices mutation op: %q", m.Op())
	}
}

// RewardsDataClient is a client for the RewardsData schema.
type RewardsDataClient struct {
	config
}

// NewRewardsDataClient returns a client for the RewardsData from the given config.
func NewRewardsDataClient(c config) *RewardsDataClient {
	return &RewardsDataClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rewardsdata.Hooks(f(g(h())))`.
func (c *RewardsDataClient) Use(hooks ...Hook) {
	c.hooks.RewardsData = append(c.hooks.RewardsData, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rewardsdata.Intercept(f(g(h())))`.
func (c *RewardsDataClient) Intercept(interceptors ...Interceptor) {
	c.inters.RewardsData = append(c.inters.RewardsData, interceptors...)
}

// Create returns a builder for creating a RewardsData entity.
func (c *RewardsDataClient) Create() *RewardsDataCreate {
	mutation := newRewardsDataMutation(c.config, OpCreate)
	return &RewardsDataCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RewardsData entities.
func (c *RewardsDataClient) CreateBulk(builders ...*RewardsDataCreate) *RewardsDataCreateBulk {
	return &RewardsDataCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RewardsData.
func (c *RewardsDataClient) Update() *RewardsDataUpdate {
	mutation := newRewardsDataMutation(c.config, OpUpdate)
	return &RewardsDataUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RewardsDataClient) UpdateOne(rd *RewardsData) *RewardsDataUpdateOne {
	mutation := newRewardsDataMutation(c.config, OpUpdateOne, withRewardsData(rd))
	return &RewardsDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RewardsDataClient) UpdateOneID(id int) *RewardsDataUpdateOne {
	mutation := newRewardsDataMutation(c.config, OpUpdateOne, withRewardsDataID(id))
	return &RewardsDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RewardsData.
func (c *RewardsDataClient) Delete() *RewardsDataDelete {
	mutation := newRewardsDataMutation(c.config, OpDelete)
	return &RewardsDataDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RewardsDataClient) DeleteOne(rd *RewardsData) *RewardsDataDeleteOne {
	return c.DeleteOneID(rd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RewardsDataClient) DeleteOneID(id int) *RewardsDataDeleteOne {
	builder := c.Delete().Where(rewardsdata.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RewardsDataDeleteOne{builder}
}

// Query returns a query builder for RewardsData.
func (c *RewardsDataClient) Query() *RewardsDataQuery {
	return &RewardsDataQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRewardsData},
		inters: c.Interceptors(),
	}
}

// Get returns a RewardsData entity by its id.
func (c *RewardsDataClient) Get(ctx context.Context, id int) (*RewardsData, error) {
	return c.Query().Where(rewardsdata.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RewardsDataClient) GetX(ctx context.Context, id int) *RewardsData {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a RewardsData.
func (c *RewardsDataClient) QueryOwner(rd *RewardsData) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rewardsdata.Table, rewardsdata.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, rewardsdata.OwnerTable, rewardsdata.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(rd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RewardsDataClient) Hooks() []Hook {
	return c.hooks.RewardsData
}

// Interceptors returns the client interceptors.
func (c *RewardsDataClient) Interceptors() []Interceptor {
	return c.inters.RewardsData
}

func (c *RewardsDataClient) mutate(ctx context.Context, m *RewardsDataMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RewardsDataCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RewardsDataUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RewardsDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RewardsDataDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RewardsData mutation op: %q", m.Op())
	}
}

// SettingsClient is a client for the Settings schema.
type SettingsClient struct {
	config
}

// NewSettingsClient returns a client for the Settings from the given config.
func NewSettingsClient(c config) *SettingsClient {
	return &SettingsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `settings.Hooks(f(g(h())))`.
func (c *SettingsClient) Use(hooks ...Hook) {
	c.hooks.Settings = append(c.hooks.Settings, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `settings.Intercept(f(g(h())))`.
func (c *SettingsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Settings = append(c.inters.Settings, interceptors...)
}

// Create returns a builder for creating a Settings entity.
func (c *SettingsClient) Create() *SettingsCreate {
	mutation := newSettingsMutation(c.config, OpCreate)
	return &SettingsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Settings entities.
func (c *SettingsClient) CreateBulk(builders ...*SettingsCreate) *SettingsCreateBulk {
	return &SettingsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Settings.
func (c *SettingsClient) Update() *SettingsUpdate {
	mutation := newSettingsMutation(c.config, OpUpdate)
	return &SettingsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SettingsClient) UpdateOne(s *Settings) *SettingsUpdateOne {
	mutation := newSettingsMutation(c.config, OpUpdateOne, withSettings(s))
	return &SettingsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SettingsClient) UpdateOneID(id int) *SettingsUpdateOne {
	mutation := newSettingsMutation(c.config, OpUpdateOne, withSettingsID(id))
	return &SettingsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Settings.
func (c *SettingsClient) Delete() *SettingsDelete {
	mutation := newSettingsMutation(c.config, OpDelete)
	return &SettingsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SettingsClient) DeleteOne(s *Settings) *SettingsDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SettingsClient) DeleteOneID(id int) *SettingsDeleteOne {
	builder := c.Delete().Where(settings.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SettingsDeleteOne{builder}
}

// Query returns a query builder for Settings.
func (c *SettingsClient) Query() *SettingsQuery {
	return &SettingsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSettings},
		inters: c.Interceptors(),
	}
}

// Get returns a Settings entity by its id.
func (c *SettingsClient) Get(ctx context.Context, id int) (*Settings, error) {
	return c.Query().Where(settings.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SettingsClient) GetX(ctx context.Context, id int) *Settings {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SettingsClient) Hooks() []Hook {
	return c.hooks.Settings
}

// Interceptors returns the client interceptors.
func (c *SettingsClient) Interceptors() []Interceptor {
	return c.inters.Settings
}

func (c *SettingsClient) mutate(ctx context.Context, m *SettingsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SettingsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SettingsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SettingsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SettingsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Settings mutation op: %q", m.Op())
	}
}

// SwapsClient is a client for the Swaps schema.
type SwapsClient struct {
	config
}

// NewSwapsClient returns a client for the Swaps from the given config.
func NewSwapsClient(c config) *SwapsClient {
	return &SwapsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `swaps.Hooks(f(g(h())))`.
func (c *SwapsClient) Use(hooks ...Hook) {
	c.hooks.Swaps = append(c.hooks.Swaps, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `swaps.Intercept(f(g(h())))`.
func (c *SwapsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Swaps = append(c.inters.Swaps, interceptors...)
}

// Create returns a builder for creating a Swaps entity.
func (c *SwapsClient) Create() *SwapsCreate {
	mutation := newSwapsMutation(c.config, OpCreate)
	return &SwapsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Swaps entities.
func (c *SwapsClient) CreateBulk(builders ...*SwapsCreate) *SwapsCreateBulk {
	return &SwapsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Swaps.
func (c *SwapsClient) Update() *SwapsUpdate {
	mutation := newSwapsMutation(c.config, OpUpdate)
	return &SwapsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SwapsClient) UpdateOne(s *Swaps) *SwapsUpdateOne {
	mutation := newSwapsMutation(c.config, OpUpdateOne, withSwaps(s))
	return &SwapsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SwapsClient) UpdateOneID(id int) *SwapsUpdateOne {
	mutation := newSwapsMutation(c.config, OpUpdateOne, withSwapsID(id))
	return &SwapsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Swaps.
func (c *SwapsClient) Delete() *SwapsDelete {
	mutation := newSwapsMutation(c.config, OpDelete)
	return &SwapsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SwapsClient) DeleteOne(s *Swaps) *SwapsDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SwapsClient) DeleteOneID(id int) *SwapsDeleteOne {
	builder := c.Delete().Where(swaps.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SwapsDeleteOne{builder}
}

// Query returns a query builder for Swaps.
func (c *SwapsClient) Query() *SwapsQuery {
	return &SwapsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSwaps},
		inters: c.Interceptors(),
	}
}

// Get returns a Swaps entity by its id.
func (c *SwapsClient) Get(ctx context.Context, id int) (*Swaps, error) {
	return c.Query().Where(swaps.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SwapsClient) GetX(ctx context.Context, id int) *Swaps {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a Swaps.
func (c *SwapsClient) QueryOwner(s *Swaps) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(swaps.Table, swaps.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, swaps.OwnerTable, swaps.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SwapsClient) Hooks() []Hook {
	return c.hooks.Swaps
}

// Interceptors returns the client interceptors.
func (c *SwapsClient) Interceptors() []Interceptor {
	return c.inters.Swaps
}

func (c *SwapsClient) mutate(ctx context.Context, m *SwapsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SwapsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SwapsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SwapsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SwapsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Swaps mutation op: %q", m.Op())
	}
}

// TaskClient is a client for the Task schema.
type TaskClient struct {
	config
}

// NewTaskClient returns a client for the Task from the given config.
func NewTaskClient(c config) *TaskClient {
	return &TaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `task.Hooks(f(g(h())))`.
func (c *TaskClient) Use(hooks ...Hook) {
	c.hooks.Task = append(c.hooks.Task, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `task.Intercept(f(g(h())))`.
func (c *TaskClient) Intercept(interceptors ...Interceptor) {
	c.inters.Task = append(c.inters.Task, interceptors...)
}

// Create returns a builder for creating a Task entity.
func (c *TaskClient) Create() *TaskCreate {
	mutation := newTaskMutation(c.config, OpCreate)
	return &TaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Task entities.
func (c *TaskClient) CreateBulk(builders ...*TaskCreate) *TaskCreateBulk {
	return &TaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Task.
func (c *TaskClient) Update() *TaskUpdate {
	mutation := newTaskMutation(c.config, OpUpdate)
	return &TaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskClient) UpdateOne(t *Task) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTask(t))
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskClient) UpdateOneID(id int64) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTaskID(id))
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Task.
func (c *TaskClient) Delete() *TaskDelete {
	mutation := newTaskMutation(c.config, OpDelete)
	return &TaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TaskClient) DeleteOne(t *Task) *TaskDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TaskClient) DeleteOneID(id int64) *TaskDeleteOne {
	builder := c.Delete().Where(task.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskDeleteOne{builder}
}

// Query returns a query builder for Task.
func (c *TaskClient) Query() *TaskQuery {
	return &TaskQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTask},
		inters: c.Interceptors(),
	}
}

// Get returns a Task entity by its id.
func (c *TaskClient) Get(ctx context.Context, id int64) (*Task, error) {
	return c.Query().Where(task.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskClient) GetX(ctx context.Context, id int64) *Task {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TaskClient) Hooks() []Hook {
	return c.hooks.Task
}

// Interceptors returns the client interceptors.
func (c *TaskClient) Interceptors() []Interceptor {
	return c.inters.Task
}

func (c *TaskClient) mutate(ctx context.Context, m *TaskMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TaskCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TaskUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TaskDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Task mutation op: %q", m.Op())
	}
}

// TransfersClient is a client for the Transfers schema.
type TransfersClient struct {
	config
}

// NewTransfersClient returns a client for the Transfers from the given config.
func NewTransfersClient(c config) *TransfersClient {
	return &TransfersClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `transfers.Hooks(f(g(h())))`.
func (c *TransfersClient) Use(hooks ...Hook) {
	c.hooks.Transfers = append(c.hooks.Transfers, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `transfers.Intercept(f(g(h())))`.
func (c *TransfersClient) Intercept(interceptors ...Interceptor) {
	c.inters.Transfers = append(c.inters.Transfers, interceptors...)
}

// Create returns a builder for creating a Transfers entity.
func (c *TransfersClient) Create() *TransfersCreate {
	mutation := newTransfersMutation(c.config, OpCreate)
	return &TransfersCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Transfers entities.
func (c *TransfersClient) CreateBulk(builders ...*TransfersCreate) *TransfersCreateBulk {
	return &TransfersCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Transfers.
func (c *TransfersClient) Update() *TransfersUpdate {
	mutation := newTransfersMutation(c.config, OpUpdate)
	return &TransfersUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TransfersClient) UpdateOne(t *Transfers) *TransfersUpdateOne {
	mutation := newTransfersMutation(c.config, OpUpdateOne, withTransfers(t))
	return &TransfersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TransfersClient) UpdateOneID(id int) *TransfersUpdateOne {
	mutation := newTransfersMutation(c.config, OpUpdateOne, withTransfersID(id))
	return &TransfersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Transfers.
func (c *TransfersClient) Delete() *TransfersDelete {
	mutation := newTransfersMutation(c.config, OpDelete)
	return &TransfersDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TransfersClient) DeleteOne(t *Transfers) *TransfersDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TransfersClient) DeleteOneID(id int) *TransfersDeleteOne {
	builder := c.Delete().Where(transfers.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TransfersDeleteOne{builder}
}

// Query returns a query builder for Transfers.
func (c *TransfersClient) Query() *TransfersQuery {
	return &TransfersQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTransfers},
		inters: c.Interceptors(),
	}
}

// Get returns a Transfers entity by its id.
func (c *TransfersClient) Get(ctx context.Context, id int) (*Transfers, error) {
	return c.Query().Where(transfers.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TransfersClient) GetX(ctx context.Context, id int) *Transfers {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a Transfers.
func (c *TransfersClient) QueryOwner(t *Transfers) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(transfers.Table, transfers.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, transfers.OwnerTable, transfers.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TransfersClient) Hooks() []Hook {
	return c.hooks.Transfers
}

// Interceptors returns the client interceptors.
func (c *TransfersClient) Interceptors() []Interceptor {
	return c.inters.Transfers
}

func (c *TransfersClient) mutate(ctx context.Context, m *TransfersMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TransfersCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TransfersUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TransfersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TransfersDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Transfers mutation op: %q", m.Op())
	}
}

// UndelegatesClient is a client for the Undelegates schema.
type UndelegatesClient struct {
	config
}

// NewUndelegatesClient returns a client for the Undelegates from the given config.
func NewUndelegatesClient(c config) *UndelegatesClient {
	return &UndelegatesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `undelegates.Hooks(f(g(h())))`.
func (c *UndelegatesClient) Use(hooks ...Hook) {
	c.hooks.Undelegates = append(c.hooks.Undelegates, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `undelegates.Intercept(f(g(h())))`.
func (c *UndelegatesClient) Intercept(interceptors ...Interceptor) {
	c.inters.Undelegates = append(c.inters.Undelegates, interceptors...)
}

// Create returns a builder for creating a Undelegates entity.
func (c *UndelegatesClient) Create() *UndelegatesCreate {
	mutation := newUndelegatesMutation(c.config, OpCreate)
	return &UndelegatesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Undelegates entities.
func (c *UndelegatesClient) CreateBulk(builders ...*UndelegatesCreate) *UndelegatesCreateBulk {
	return &UndelegatesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Undelegates.
func (c *UndelegatesClient) Update() *UndelegatesUpdate {
	mutation := newUndelegatesMutation(c.config, OpUpdate)
	return &UndelegatesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UndelegatesClient) UpdateOne(u *Undelegates) *UndelegatesUpdateOne {
	mutation := newUndelegatesMutation(c.config, OpUpdateOne, withUndelegates(u))
	return &UndelegatesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UndelegatesClient) UpdateOneID(id int) *UndelegatesUpdateOne {
	mutation := newUndelegatesMutation(c.config, OpUpdateOne, withUndelegatesID(id))
	return &UndelegatesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Undelegates.
func (c *UndelegatesClient) Delete() *UndelegatesDelete {
	mutation := newUndelegatesMutation(c.config, OpDelete)
	return &UndelegatesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UndelegatesClient) DeleteOne(u *Undelegates) *UndelegatesDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UndelegatesClient) DeleteOneID(id int) *UndelegatesDeleteOne {
	builder := c.Delete().Where(undelegates.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UndelegatesDeleteOne{builder}
}

// Query returns a query builder for Undelegates.
func (c *UndelegatesClient) Query() *UndelegatesQuery {
	return &UndelegatesQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUndelegates},
		inters: c.Interceptors(),
	}
}

// Get returns a Undelegates entity by its id.
func (c *UndelegatesClient) Get(ctx context.Context, id int) (*Undelegates, error) {
	return c.Query().Where(undelegates.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UndelegatesClient) GetX(ctx context.Context, id int) *Undelegates {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a Undelegates.
func (c *UndelegatesClient) QueryOwner(u *Undelegates) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(undelegates.Table, undelegates.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, undelegates.OwnerTable, undelegates.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UndelegatesClient) Hooks() []Hook {
	return c.hooks.Undelegates
}

// Interceptors returns the client interceptors.
func (c *UndelegatesClient) Interceptors() []Interceptor {
	return c.inters.Undelegates
}

func (c *UndelegatesClient) mutate(ctx context.Context, m *UndelegatesMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UndelegatesCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UndelegatesUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UndelegatesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UndelegatesDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Undelegates mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int64) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int64) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int64) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int64) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBalance queries the balance edge of a User.
func (c *UserClient) QueryBalance(u *User) *BalancesQuery {
	query := (&BalancesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(balances.Table, balances.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.BalanceTable, user.BalanceColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAddressBook queries the address_book edge of a User.
func (c *UserClient) QueryAddressBook(u *User) *AdressBookQuery {
	query := (&AdressBookClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(adressbook.Table, adressbook.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AddressBookTable, user.AddressBookColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryState queries the state edge of a User.
func (c *UserClient) QueryState(u *User) *UserStateQuery {
	query := (&UserStateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userstate.Table, userstate.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.StateTable, user.StateColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRewardsData queries the rewards_data edge of a User.
func (c *UserClient) QueryRewardsData(u *User) *RewardsDataQuery {
	query := (&RewardsDataClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(rewardsdata.Table, rewardsdata.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.RewardsDataTable, user.RewardsDataColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPrivateKey queries the PrivateKey edge of a User.
func (c *UserClient) QueryPrivateKey(u *User) *PrivateKeysQuery {
	query := (&PrivateKeysClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(privatekeys.Table, privatekeys.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.PrivateKeyTable, user.PrivateKeyColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTransfers queries the transfers edge of a User.
func (c *UserClient) QueryTransfers(u *User) *TransfersQuery {
	query := (&TransfersClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(transfers.Table, transfers.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.TransfersTable, user.TransfersColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDelegates queries the delegates edge of a User.
func (c *UserClient) QueryDelegates(u *User) *DelegatesQuery {
	query := (&DelegatesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(delegates.Table, delegates.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.DelegatesTable, user.DelegatesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUndelegates queries the undelegates edge of a User.
func (c *UserClient) QueryUndelegates(u *User) *UndelegatesQuery {
	query := (&UndelegatesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(undelegates.Table, undelegates.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UndelegatesTable, user.UndelegatesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySwaps queries the swaps edge of a User.
func (c *UserClient) QuerySwaps(u *User) *SwapsQuery {
	query := (&SwapsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(swaps.Table, swaps.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SwapsTable, user.SwapsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInvoices queries the invoices edge of a User.
func (c *UserClient) QueryInvoices(u *User) *InvoiceQuery {
	query := (&InvoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(invoice.Table, invoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.InvoicesTable, user.InvoicesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRecentInvoices queries the recentInvoices edge of a User.
func (c *UserClient) QueryRecentInvoices(u *User) *RecentInvoicesQuery {
	query := (&RecentInvoicesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(recentinvoices.Table, recentinvoices.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.RecentInvoicesTable, user.RecentInvoicesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// UserStateClient is a client for the UserState schema.
type UserStateClient struct {
	config
}

// NewUserStateClient returns a client for the UserState from the given config.
func NewUserStateClient(c config) *UserStateClient {
	return &UserStateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userstate.Hooks(f(g(h())))`.
func (c *UserStateClient) Use(hooks ...Hook) {
	c.hooks.UserState = append(c.hooks.UserState, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userstate.Intercept(f(g(h())))`.
func (c *UserStateClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserState = append(c.inters.UserState, interceptors...)
}

// Create returns a builder for creating a UserState entity.
func (c *UserStateClient) Create() *UserStateCreate {
	mutation := newUserStateMutation(c.config, OpCreate)
	return &UserStateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserState entities.
func (c *UserStateClient) CreateBulk(builders ...*UserStateCreate) *UserStateCreateBulk {
	return &UserStateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserState.
func (c *UserStateClient) Update() *UserStateUpdate {
	mutation := newUserStateMutation(c.config, OpUpdate)
	return &UserStateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserStateClient) UpdateOne(us *UserState) *UserStateUpdateOne {
	mutation := newUserStateMutation(c.config, OpUpdateOne, withUserState(us))
	return &UserStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserStateClient) UpdateOneID(id int) *UserStateUpdateOne {
	mutation := newUserStateMutation(c.config, OpUpdateOne, withUserStateID(id))
	return &UserStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserState.
func (c *UserStateClient) Delete() *UserStateDelete {
	mutation := newUserStateMutation(c.config, OpDelete)
	return &UserStateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserStateClient) DeleteOne(us *UserState) *UserStateDeleteOne {
	return c.DeleteOneID(us.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserStateClient) DeleteOneID(id int) *UserStateDeleteOne {
	builder := c.Delete().Where(userstate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserStateDeleteOne{builder}
}

// Query returns a query builder for UserState.
func (c *UserStateClient) Query() *UserStateQuery {
	return &UserStateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserState},
		inters: c.Interceptors(),
	}
}

// Get returns a UserState entity by its id.
func (c *UserStateClient) Get(ctx context.Context, id int) (*UserState, error) {
	return c.Query().Where(userstate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserStateClient) GetX(ctx context.Context, id int) *UserState {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a UserState.
func (c *UserStateClient) QueryOwner(us *UserState) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := us.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userstate.Table, userstate.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, userstate.OwnerTable, userstate.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(us.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserStateClient) Hooks() []Hook {
	return c.hooks.UserState
}

// Interceptors returns the client interceptors.
func (c *UserStateClient) Interceptors() []Interceptor {
	return c.inters.UserState
}

func (c *UserStateClient) mutate(ctx context.Context, m *UserStateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserStateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserStateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserStateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserState mutation op: %q", m.Op())
	}
}

// ValidatorsClient is a client for the Validators schema.
type ValidatorsClient struct {
	config
}

// NewValidatorsClient returns a client for the Validators from the given config.
func NewValidatorsClient(c config) *ValidatorsClient {
	return &ValidatorsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `validators.Hooks(f(g(h())))`.
func (c *ValidatorsClient) Use(hooks ...Hook) {
	c.hooks.Validators = append(c.hooks.Validators, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `validators.Intercept(f(g(h())))`.
func (c *ValidatorsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Validators = append(c.inters.Validators, interceptors...)
}

// Create returns a builder for creating a Validators entity.
func (c *ValidatorsClient) Create() *ValidatorsCreate {
	mutation := newValidatorsMutation(c.config, OpCreate)
	return &ValidatorsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Validators entities.
func (c *ValidatorsClient) CreateBulk(builders ...*ValidatorsCreate) *ValidatorsCreateBulk {
	return &ValidatorsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Validators.
func (c *ValidatorsClient) Update() *ValidatorsUpdate {
	mutation := newValidatorsMutation(c.config, OpUpdate)
	return &ValidatorsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ValidatorsClient) UpdateOne(v *Validators) *ValidatorsUpdateOne {
	mutation := newValidatorsMutation(c.config, OpUpdateOne, withValidators(v))
	return &ValidatorsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ValidatorsClient) UpdateOneID(id int) *ValidatorsUpdateOne {
	mutation := newValidatorsMutation(c.config, OpUpdateOne, withValidatorsID(id))
	return &ValidatorsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Validators.
func (c *ValidatorsClient) Delete() *ValidatorsDelete {
	mutation := newValidatorsMutation(c.config, OpDelete)
	return &ValidatorsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ValidatorsClient) DeleteOne(v *Validators) *ValidatorsDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ValidatorsClient) DeleteOneID(id int) *ValidatorsDeleteOne {
	builder := c.Delete().Where(validators.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ValidatorsDeleteOne{builder}
}

// Query returns a query builder for Validators.
func (c *ValidatorsClient) Query() *ValidatorsQuery {
	return &ValidatorsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeValidators},
		inters: c.Interceptors(),
	}
}

// Get returns a Validators entity by its id.
func (c *ValidatorsClient) Get(ctx context.Context, id int) (*Validators, error) {
	return c.Query().Where(validators.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ValidatorsClient) GetX(ctx context.Context, id int) *Validators {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ValidatorsClient) Hooks() []Hook {
	return c.hooks.Validators
}

// Interceptors returns the client interceptors.
func (c *ValidatorsClient) Interceptors() []Interceptor {
	return c.inters.Validators
}

func (c *ValidatorsClient) mutate(ctx context.Context, m *ValidatorsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ValidatorsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ValidatorsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ValidatorsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ValidatorsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Validators mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		AdressBook, Balances, Delegates, Invoice, Invoices_payments, PrivateKeys,
		RecentInvoices, RewardsData, Settings, Swaps, Task, Transfers, Undelegates,
		User, UserState, Validators []ent.Hook
	}
	inters struct {
		AdressBook, Balances, Delegates, Invoice, Invoices_payments, PrivateKeys,
		RecentInvoices, RewardsData, Settings, Swaps, Task, Transfers, Undelegates,
		User, UserState, Validators []ent.Interceptor
	}
)
