// Code generated by ent, DO NOT EDIT.

package delegates

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Simplewallethq/tg-bot/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Delegates {
	return predicate.Delegates(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Delegates {
	return predicate.Delegates(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Delegates {
	return predicate.Delegates(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Delegates {
	return predicate.Delegates(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Delegates {
	return predicate.Delegates(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Delegates {
	return predicate.Delegates(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Delegates {
	return predicate.Delegates(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Delegates {
	return predicate.Delegates(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Delegates {
	return predicate.Delegates(sql.FieldLTE(FieldID, id))
}

// Delegator applies equality check predicate on the "delegator" field. It's identical to DelegatorEQ.
func Delegator(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldEQ(FieldDelegator, v))
}

// Validator applies equality check predicate on the "validator" field. It's identical to ValidatorEQ.
func Validator(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldEQ(FieldValidator, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldEQ(FieldName, v))
}

// UserBalance applies equality check predicate on the "user_balance" field. It's identical to UserBalanceEQ.
func UserBalance(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldEQ(FieldUserBalance, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldEQ(FieldAmount, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Delegates {
	return predicate.Delegates(sql.FieldEQ(FieldCreatedAt, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldEQ(FieldStatus, v))
}

// Deploy applies equality check predicate on the "Deploy" field. It's identical to DeployEQ.
func Deploy(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldEQ(FieldDeploy, v))
}

// DelegatorEQ applies the EQ predicate on the "delegator" field.
func DelegatorEQ(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldEQ(FieldDelegator, v))
}

// DelegatorNEQ applies the NEQ predicate on the "delegator" field.
func DelegatorNEQ(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldNEQ(FieldDelegator, v))
}

// DelegatorIn applies the In predicate on the "delegator" field.
func DelegatorIn(vs ...string) predicate.Delegates {
	return predicate.Delegates(sql.FieldIn(FieldDelegator, vs...))
}

// DelegatorNotIn applies the NotIn predicate on the "delegator" field.
func DelegatorNotIn(vs ...string) predicate.Delegates {
	return predicate.Delegates(sql.FieldNotIn(FieldDelegator, vs...))
}

// DelegatorGT applies the GT predicate on the "delegator" field.
func DelegatorGT(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldGT(FieldDelegator, v))
}

// DelegatorGTE applies the GTE predicate on the "delegator" field.
func DelegatorGTE(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldGTE(FieldDelegator, v))
}

// DelegatorLT applies the LT predicate on the "delegator" field.
func DelegatorLT(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldLT(FieldDelegator, v))
}

// DelegatorLTE applies the LTE predicate on the "delegator" field.
func DelegatorLTE(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldLTE(FieldDelegator, v))
}

// DelegatorContains applies the Contains predicate on the "delegator" field.
func DelegatorContains(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldContains(FieldDelegator, v))
}

// DelegatorHasPrefix applies the HasPrefix predicate on the "delegator" field.
func DelegatorHasPrefix(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldHasPrefix(FieldDelegator, v))
}

// DelegatorHasSuffix applies the HasSuffix predicate on the "delegator" field.
func DelegatorHasSuffix(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldHasSuffix(FieldDelegator, v))
}

// DelegatorEqualFold applies the EqualFold predicate on the "delegator" field.
func DelegatorEqualFold(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldEqualFold(FieldDelegator, v))
}

// DelegatorContainsFold applies the ContainsFold predicate on the "delegator" field.
func DelegatorContainsFold(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldContainsFold(FieldDelegator, v))
}

// ValidatorEQ applies the EQ predicate on the "validator" field.
func ValidatorEQ(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldEQ(FieldValidator, v))
}

// ValidatorNEQ applies the NEQ predicate on the "validator" field.
func ValidatorNEQ(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldNEQ(FieldValidator, v))
}

// ValidatorIn applies the In predicate on the "validator" field.
func ValidatorIn(vs ...string) predicate.Delegates {
	return predicate.Delegates(sql.FieldIn(FieldValidator, vs...))
}

// ValidatorNotIn applies the NotIn predicate on the "validator" field.
func ValidatorNotIn(vs ...string) predicate.Delegates {
	return predicate.Delegates(sql.FieldNotIn(FieldValidator, vs...))
}

// ValidatorGT applies the GT predicate on the "validator" field.
func ValidatorGT(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldGT(FieldValidator, v))
}

// ValidatorGTE applies the GTE predicate on the "validator" field.
func ValidatorGTE(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldGTE(FieldValidator, v))
}

// ValidatorLT applies the LT predicate on the "validator" field.
func ValidatorLT(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldLT(FieldValidator, v))
}

// ValidatorLTE applies the LTE predicate on the "validator" field.
func ValidatorLTE(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldLTE(FieldValidator, v))
}

// ValidatorContains applies the Contains predicate on the "validator" field.
func ValidatorContains(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldContains(FieldValidator, v))
}

// ValidatorHasPrefix applies the HasPrefix predicate on the "validator" field.
func ValidatorHasPrefix(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldHasPrefix(FieldValidator, v))
}

// ValidatorHasSuffix applies the HasSuffix predicate on the "validator" field.
func ValidatorHasSuffix(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldHasSuffix(FieldValidator, v))
}

// ValidatorIsNil applies the IsNil predicate on the "validator" field.
func ValidatorIsNil() predicate.Delegates {
	return predicate.Delegates(sql.FieldIsNull(FieldValidator))
}

// ValidatorNotNil applies the NotNil predicate on the "validator" field.
func ValidatorNotNil() predicate.Delegates {
	return predicate.Delegates(sql.FieldNotNull(FieldValidator))
}

// ValidatorEqualFold applies the EqualFold predicate on the "validator" field.
func ValidatorEqualFold(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldEqualFold(FieldValidator, v))
}

// ValidatorContainsFold applies the ContainsFold predicate on the "validator" field.
func ValidatorContainsFold(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldContainsFold(FieldValidator, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Delegates {
	return predicate.Delegates(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Delegates {
	return predicate.Delegates(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Delegates {
	return predicate.Delegates(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Delegates {
	return predicate.Delegates(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldContainsFold(FieldName, v))
}

// UserBalanceEQ applies the EQ predicate on the "user_balance" field.
func UserBalanceEQ(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldEQ(FieldUserBalance, v))
}

// UserBalanceNEQ applies the NEQ predicate on the "user_balance" field.
func UserBalanceNEQ(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldNEQ(FieldUserBalance, v))
}

// UserBalanceIn applies the In predicate on the "user_balance" field.
func UserBalanceIn(vs ...string) predicate.Delegates {
	return predicate.Delegates(sql.FieldIn(FieldUserBalance, vs...))
}

// UserBalanceNotIn applies the NotIn predicate on the "user_balance" field.
func UserBalanceNotIn(vs ...string) predicate.Delegates {
	return predicate.Delegates(sql.FieldNotIn(FieldUserBalance, vs...))
}

// UserBalanceGT applies the GT predicate on the "user_balance" field.
func UserBalanceGT(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldGT(FieldUserBalance, v))
}

// UserBalanceGTE applies the GTE predicate on the "user_balance" field.
func UserBalanceGTE(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldGTE(FieldUserBalance, v))
}

// UserBalanceLT applies the LT predicate on the "user_balance" field.
func UserBalanceLT(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldLT(FieldUserBalance, v))
}

// UserBalanceLTE applies the LTE predicate on the "user_balance" field.
func UserBalanceLTE(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldLTE(FieldUserBalance, v))
}

// UserBalanceContains applies the Contains predicate on the "user_balance" field.
func UserBalanceContains(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldContains(FieldUserBalance, v))
}

// UserBalanceHasPrefix applies the HasPrefix predicate on the "user_balance" field.
func UserBalanceHasPrefix(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldHasPrefix(FieldUserBalance, v))
}

// UserBalanceHasSuffix applies the HasSuffix predicate on the "user_balance" field.
func UserBalanceHasSuffix(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldHasSuffix(FieldUserBalance, v))
}

// UserBalanceIsNil applies the IsNil predicate on the "user_balance" field.
func UserBalanceIsNil() predicate.Delegates {
	return predicate.Delegates(sql.FieldIsNull(FieldUserBalance))
}

// UserBalanceNotNil applies the NotNil predicate on the "user_balance" field.
func UserBalanceNotNil() predicate.Delegates {
	return predicate.Delegates(sql.FieldNotNull(FieldUserBalance))
}

// UserBalanceEqualFold applies the EqualFold predicate on the "user_balance" field.
func UserBalanceEqualFold(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldEqualFold(FieldUserBalance, v))
}

// UserBalanceContainsFold applies the ContainsFold predicate on the "user_balance" field.
func UserBalanceContainsFold(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldContainsFold(FieldUserBalance, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...string) predicate.Delegates {
	return predicate.Delegates(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...string) predicate.Delegates {
	return predicate.Delegates(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldLTE(FieldAmount, v))
}

// AmountContains applies the Contains predicate on the "amount" field.
func AmountContains(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldContains(FieldAmount, v))
}

// AmountHasPrefix applies the HasPrefix predicate on the "amount" field.
func AmountHasPrefix(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldHasPrefix(FieldAmount, v))
}

// AmountHasSuffix applies the HasSuffix predicate on the "amount" field.
func AmountHasSuffix(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldHasSuffix(FieldAmount, v))
}

// AmountIsNil applies the IsNil predicate on the "amount" field.
func AmountIsNil() predicate.Delegates {
	return predicate.Delegates(sql.FieldIsNull(FieldAmount))
}

// AmountNotNil applies the NotNil predicate on the "amount" field.
func AmountNotNil() predicate.Delegates {
	return predicate.Delegates(sql.FieldNotNull(FieldAmount))
}

// AmountEqualFold applies the EqualFold predicate on the "amount" field.
func AmountEqualFold(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldEqualFold(FieldAmount, v))
}

// AmountContainsFold applies the ContainsFold predicate on the "amount" field.
func AmountContainsFold(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldContainsFold(FieldAmount, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Delegates {
	return predicate.Delegates(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Delegates {
	return predicate.Delegates(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Delegates {
	return predicate.Delegates(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Delegates {
	return predicate.Delegates(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Delegates {
	return predicate.Delegates(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Delegates {
	return predicate.Delegates(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Delegates {
	return predicate.Delegates(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Delegates {
	return predicate.Delegates(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Delegates {
	return predicate.Delegates(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Delegates {
	return predicate.Delegates(sql.FieldNotNull(FieldCreatedAt))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Delegates {
	return predicate.Delegates(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Delegates {
	return predicate.Delegates(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Delegates {
	return predicate.Delegates(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Delegates {
	return predicate.Delegates(sql.FieldNotNull(FieldStatus))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldContainsFold(FieldStatus, v))
}

// DeployEQ applies the EQ predicate on the "Deploy" field.
func DeployEQ(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldEQ(FieldDeploy, v))
}

// DeployNEQ applies the NEQ predicate on the "Deploy" field.
func DeployNEQ(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldNEQ(FieldDeploy, v))
}

// DeployIn applies the In predicate on the "Deploy" field.
func DeployIn(vs ...string) predicate.Delegates {
	return predicate.Delegates(sql.FieldIn(FieldDeploy, vs...))
}

// DeployNotIn applies the NotIn predicate on the "Deploy" field.
func DeployNotIn(vs ...string) predicate.Delegates {
	return predicate.Delegates(sql.FieldNotIn(FieldDeploy, vs...))
}

// DeployGT applies the GT predicate on the "Deploy" field.
func DeployGT(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldGT(FieldDeploy, v))
}

// DeployGTE applies the GTE predicate on the "Deploy" field.
func DeployGTE(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldGTE(FieldDeploy, v))
}

// DeployLT applies the LT predicate on the "Deploy" field.
func DeployLT(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldLT(FieldDeploy, v))
}

// DeployLTE applies the LTE predicate on the "Deploy" field.
func DeployLTE(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldLTE(FieldDeploy, v))
}

// DeployContains applies the Contains predicate on the "Deploy" field.
func DeployContains(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldContains(FieldDeploy, v))
}

// DeployHasPrefix applies the HasPrefix predicate on the "Deploy" field.
func DeployHasPrefix(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldHasPrefix(FieldDeploy, v))
}

// DeployHasSuffix applies the HasSuffix predicate on the "Deploy" field.
func DeployHasSuffix(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldHasSuffix(FieldDeploy, v))
}

// DeployIsNil applies the IsNil predicate on the "Deploy" field.
func DeployIsNil() predicate.Delegates {
	return predicate.Delegates(sql.FieldIsNull(FieldDeploy))
}

// DeployNotNil applies the NotNil predicate on the "Deploy" field.
func DeployNotNil() predicate.Delegates {
	return predicate.Delegates(sql.FieldNotNull(FieldDeploy))
}

// DeployEqualFold applies the EqualFold predicate on the "Deploy" field.
func DeployEqualFold(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldEqualFold(FieldDeploy, v))
}

// DeployContainsFold applies the ContainsFold predicate on the "Deploy" field.
func DeployContainsFold(v string) predicate.Delegates {
	return predicate.Delegates(sql.FieldContainsFold(FieldDeploy, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Delegates {
	return predicate.Delegates(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Delegates {
	return predicate.Delegates(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Delegates) predicate.Delegates {
	return predicate.Delegates(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Delegates) predicate.Delegates {
	return predicate.Delegates(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Delegates) predicate.Delegates {
	return predicate.Delegates(func(s *sql.Selector) {
		p(s.Not())
	})
}
