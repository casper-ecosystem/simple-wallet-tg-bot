// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/predicate"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/rewardsdata"
)

// RewardsDataDelete is the builder for deleting a RewardsData entity.
type RewardsDataDelete struct {
	config
	hooks    []Hook
	mutation *RewardsDataMutation
}

// Where appends a list predicates to the RewardsDataDelete builder.
func (rdd *RewardsDataDelete) Where(ps ...predicate.RewardsData) *RewardsDataDelete {
	rdd.mutation.Where(ps...)
	return rdd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rdd *RewardsDataDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rdd.sqlExec, rdd.mutation, rdd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rdd *RewardsDataDelete) ExecX(ctx context.Context) int {
	n, err := rdd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rdd *RewardsDataDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(rewardsdata.Table, sqlgraph.NewFieldSpec(rewardsdata.FieldID, field.TypeInt))
	if ps := rdd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rdd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rdd.mutation.done = true
	return affected, err
}

// RewardsDataDeleteOne is the builder for deleting a single RewardsData entity.
type RewardsDataDeleteOne struct {
	rdd *RewardsDataDelete
}

// Where appends a list predicates to the RewardsDataDelete builder.
func (rddo *RewardsDataDeleteOne) Where(ps ...predicate.RewardsData) *RewardsDataDeleteOne {
	rddo.rdd.mutation.Where(ps...)
	return rddo
}

// Exec executes the deletion query.
func (rddo *RewardsDataDeleteOne) Exec(ctx context.Context) error {
	n, err := rddo.rdd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{rewardsdata.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rddo *RewardsDataDeleteOne) ExecX(ctx context.Context) {
	if err := rddo.Exec(ctx); err != nil {
		panic(err)
	}
}
