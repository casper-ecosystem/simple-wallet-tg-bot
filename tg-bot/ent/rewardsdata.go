// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Simplewallethq/tg-bot/ent/rewardsdata"
	"github.com/Simplewallethq/tg-bot/ent/user"
)

// RewardsData is the model entity for the RewardsData schema.
type RewardsData struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Validator holds the value of the "validator" field.
	Validator string `json:"validator,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount string `json:"amount,omitempty"`
	// LastReward holds the value of the "last_reward" field.
	LastReward time.Time `json:"last_reward,omitempty"`
	// FirstEra holds the value of the "first_era" field.
	FirstEra int64 `json:"first_era,omitempty"`
	// LastEra holds the value of the "last_era" field.
	LastEra int64 `json:"last_era,omitempty"`
	// FirstEraTimestamp holds the value of the "first_era_timestamp" field.
	FirstEraTimestamp string `json:"first_era_timestamp,omitempty"`
	// LastEraTimestamp holds the value of the "last_era_timestamp" field.
	LastEraTimestamp string `json:"last_era_timestamp,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RewardsDataQuery when eager-loading is set.
	Edges             RewardsDataEdges `json:"edges"`
	user_rewards_data *int64
	selectValues      sql.SelectValues
}

// RewardsDataEdges holds the relations/edges for other nodes in the graph.
type RewardsDataEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RewardsDataEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RewardsData) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rewardsdata.FieldID, rewardsdata.FieldFirstEra, rewardsdata.FieldLastEra:
			values[i] = new(sql.NullInt64)
		case rewardsdata.FieldValidator, rewardsdata.FieldAmount, rewardsdata.FieldFirstEraTimestamp, rewardsdata.FieldLastEraTimestamp:
			values[i] = new(sql.NullString)
		case rewardsdata.FieldLastReward:
			values[i] = new(sql.NullTime)
		case rewardsdata.ForeignKeys[0]: // user_rewards_data
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RewardsData fields.
func (rd *RewardsData) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rewardsdata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rd.ID = int(value.Int64)
		case rewardsdata.FieldValidator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field validator", values[i])
			} else if value.Valid {
				rd.Validator = value.String
			}
		case rewardsdata.FieldAmount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				rd.Amount = value.String
			}
		case rewardsdata.FieldLastReward:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_reward", values[i])
			} else if value.Valid {
				rd.LastReward = value.Time
			}
		case rewardsdata.FieldFirstEra:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field first_era", values[i])
			} else if value.Valid {
				rd.FirstEra = value.Int64
			}
		case rewardsdata.FieldLastEra:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field last_era", values[i])
			} else if value.Valid {
				rd.LastEra = value.Int64
			}
		case rewardsdata.FieldFirstEraTimestamp:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_era_timestamp", values[i])
			} else if value.Valid {
				rd.FirstEraTimestamp = value.String
			}
		case rewardsdata.FieldLastEraTimestamp:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_era_timestamp", values[i])
			} else if value.Valid {
				rd.LastEraTimestamp = value.String
			}
		case rewardsdata.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_rewards_data", value)
			} else if value.Valid {
				rd.user_rewards_data = new(int64)
				*rd.user_rewards_data = int64(value.Int64)
			}
		default:
			rd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RewardsData.
// This includes values selected through modifiers, order, etc.
func (rd *RewardsData) Value(name string) (ent.Value, error) {
	return rd.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the RewardsData entity.
func (rd *RewardsData) QueryOwner() *UserQuery {
	return NewRewardsDataClient(rd.config).QueryOwner(rd)
}

// Update returns a builder for updating this RewardsData.
// Note that you need to call RewardsData.Unwrap() before calling this method if this RewardsData
// was returned from a transaction, and the transaction was committed or rolled back.
func (rd *RewardsData) Update() *RewardsDataUpdateOne {
	return NewRewardsDataClient(rd.config).UpdateOne(rd)
}

// Unwrap unwraps the RewardsData entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rd *RewardsData) Unwrap() *RewardsData {
	_tx, ok := rd.config.driver.(*txDriver)
	if !ok {
		panic("ent: RewardsData is not a transactional entity")
	}
	rd.config.driver = _tx.drv
	return rd
}

// String implements the fmt.Stringer.
func (rd *RewardsData) String() string {
	var builder strings.Builder
	builder.WriteString("RewardsData(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rd.ID))
	builder.WriteString("validator=")
	builder.WriteString(rd.Validator)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(rd.Amount)
	builder.WriteString(", ")
	builder.WriteString("last_reward=")
	builder.WriteString(rd.LastReward.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("first_era=")
	builder.WriteString(fmt.Sprintf("%v", rd.FirstEra))
	builder.WriteString(", ")
	builder.WriteString("last_era=")
	builder.WriteString(fmt.Sprintf("%v", rd.LastEra))
	builder.WriteString(", ")
	builder.WriteString("first_era_timestamp=")
	builder.WriteString(rd.FirstEraTimestamp)
	builder.WriteString(", ")
	builder.WriteString("last_era_timestamp=")
	builder.WriteString(rd.LastEraTimestamp)
	builder.WriteByte(')')
	return builder.String()
}

// RewardsDataSlice is a parsable slice of RewardsData.
type RewardsDataSlice []*RewardsData
