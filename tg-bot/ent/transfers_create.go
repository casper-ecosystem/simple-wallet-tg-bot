// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/transfers"
	"github.com/Simplewallethq/simple-wallet-tg-bot/tg-bot/ent/user"
)

// TransfersCreate is the builder for creating a Transfers entity.
type TransfersCreate struct {
	config
	mutation *TransfersMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetFromPubkey sets the "from_pubkey" field.
func (tc *TransfersCreate) SetFromPubkey(s string) *TransfersCreate {
	tc.mutation.SetFromPubkey(s)
	return tc
}

// SetToPubkey sets the "to_pubkey" field.
func (tc *TransfersCreate) SetToPubkey(s string) *TransfersCreate {
	tc.mutation.SetToPubkey(s)
	return tc
}

// SetNillableToPubkey sets the "to_pubkey" field if the given value is not nil.
func (tc *TransfersCreate) SetNillableToPubkey(s *string) *TransfersCreate {
	if s != nil {
		tc.SetToPubkey(*s)
	}
	return tc
}

// SetName sets the "name" field.
func (tc *TransfersCreate) SetName(s string) *TransfersCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tc *TransfersCreate) SetNillableName(s *string) *TransfersCreate {
	if s != nil {
		tc.SetName(*s)
	}
	return tc
}

// SetSenderBalance sets the "sender_balance" field.
func (tc *TransfersCreate) SetSenderBalance(s string) *TransfersCreate {
	tc.mutation.SetSenderBalance(s)
	return tc
}

// SetNillableSenderBalance sets the "sender_balance" field if the given value is not nil.
func (tc *TransfersCreate) SetNillableSenderBalance(s *string) *TransfersCreate {
	if s != nil {
		tc.SetSenderBalance(*s)
	}
	return tc
}

// SetAmount sets the "amount" field.
func (tc *TransfersCreate) SetAmount(s string) *TransfersCreate {
	tc.mutation.SetAmount(s)
	return tc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tc *TransfersCreate) SetNillableAmount(s *string) *TransfersCreate {
	if s != nil {
		tc.SetAmount(*s)
	}
	return tc
}

// SetMemoID sets the "memo_id" field.
func (tc *TransfersCreate) SetMemoID(u uint64) *TransfersCreate {
	tc.mutation.SetMemoID(u)
	return tc
}

// SetNillableMemoID sets the "memo_id" field if the given value is not nil.
func (tc *TransfersCreate) SetNillableMemoID(u *uint64) *TransfersCreate {
	if u != nil {
		tc.SetMemoID(*u)
	}
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TransfersCreate) SetCreatedAt(t time.Time) *TransfersCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TransfersCreate) SetNillableCreatedAt(t *time.Time) *TransfersCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetStatus sets the "status" field.
func (tc *TransfersCreate) SetStatus(s string) *TransfersCreate {
	tc.mutation.SetStatus(s)
	return tc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tc *TransfersCreate) SetNillableStatus(s *string) *TransfersCreate {
	if s != nil {
		tc.SetStatus(*s)
	}
	return tc
}

// SetDeploy sets the "Deploy" field.
func (tc *TransfersCreate) SetDeploy(s string) *TransfersCreate {
	tc.mutation.SetDeploy(s)
	return tc
}

// SetNillableDeploy sets the "Deploy" field if the given value is not nil.
func (tc *TransfersCreate) SetNillableDeploy(s *string) *TransfersCreate {
	if s != nil {
		tc.SetDeploy(*s)
	}
	return tc
}

// SetAdditionalType sets the "AdditionalType" field.
func (tc *TransfersCreate) SetAdditionalType(s string) *TransfersCreate {
	tc.mutation.SetAdditionalType(s)
	return tc
}

// SetNillableAdditionalType sets the "AdditionalType" field if the given value is not nil.
func (tc *TransfersCreate) SetNillableAdditionalType(s *string) *TransfersCreate {
	if s != nil {
		tc.SetAdditionalType(*s)
	}
	return tc
}

// SetInvoiceID sets the "invoiceID" field.
func (tc *TransfersCreate) SetInvoiceID(i int64) *TransfersCreate {
	tc.mutation.SetInvoiceID(i)
	return tc
}

// SetNillableInvoiceID sets the "invoiceID" field if the given value is not nil.
func (tc *TransfersCreate) SetNillableInvoiceID(i *int64) *TransfersCreate {
	if i != nil {
		tc.SetInvoiceID(*i)
	}
	return tc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (tc *TransfersCreate) SetOwnerID(id int64) *TransfersCreate {
	tc.mutation.SetOwnerID(id)
	return tc
}

// SetOwner sets the "owner" edge to the User entity.
func (tc *TransfersCreate) SetOwner(u *User) *TransfersCreate {
	return tc.SetOwnerID(u.ID)
}

// Mutation returns the TransfersMutation object of the builder.
func (tc *TransfersCreate) Mutation() *TransfersMutation {
	return tc.mutation
}

// Save creates the Transfers in the database.
func (tc *TransfersCreate) Save(ctx context.Context) (*Transfers, error) {
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TransfersCreate) SaveX(ctx context.Context) *Transfers {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TransfersCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TransfersCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TransfersCreate) check() error {
	if _, ok := tc.mutation.FromPubkey(); !ok {
		return &ValidationError{Name: "from_pubkey", err: errors.New(`ent: missing required field "Transfers.from_pubkey"`)}
	}
	if _, ok := tc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "Transfers.owner"`)}
	}
	return nil
}

func (tc *TransfersCreate) sqlSave(ctx context.Context) (*Transfers, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TransfersCreate) createSpec() (*Transfers, *sqlgraph.CreateSpec) {
	var (
		_node = &Transfers{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(transfers.Table, sqlgraph.NewFieldSpec(transfers.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tc.conflict
	if value, ok := tc.mutation.FromPubkey(); ok {
		_spec.SetField(transfers.FieldFromPubkey, field.TypeString, value)
		_node.FromPubkey = value
	}
	if value, ok := tc.mutation.ToPubkey(); ok {
		_spec.SetField(transfers.FieldToPubkey, field.TypeString, value)
		_node.ToPubkey = value
	}
	if value, ok := tc.mutation.Name(); ok {
		_spec.SetField(transfers.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tc.mutation.SenderBalance(); ok {
		_spec.SetField(transfers.FieldSenderBalance, field.TypeString, value)
		_node.SenderBalance = value
	}
	if value, ok := tc.mutation.Amount(); ok {
		_spec.SetField(transfers.FieldAmount, field.TypeString, value)
		_node.Amount = value
	}
	if value, ok := tc.mutation.MemoID(); ok {
		_spec.SetField(transfers.FieldMemoID, field.TypeUint64, value)
		_node.MemoID = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(transfers.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.SetField(transfers.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := tc.mutation.Deploy(); ok {
		_spec.SetField(transfers.FieldDeploy, field.TypeString, value)
		_node.Deploy = value
	}
	if value, ok := tc.mutation.AdditionalType(); ok {
		_spec.SetField(transfers.FieldAdditionalType, field.TypeString, value)
		_node.AdditionalType = value
	}
	if value, ok := tc.mutation.InvoiceID(); ok {
		_spec.SetField(transfers.FieldInvoiceID, field.TypeInt64, value)
		_node.InvoiceID = value
	}
	if nodes := tc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transfers.OwnerTable,
			Columns: []string{transfers.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_transfers = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Transfers.Create().
//		SetFromPubkey(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TransfersUpsert) {
//			SetFromPubkey(v+v).
//		}).
//		Exec(ctx)
func (tc *TransfersCreate) OnConflict(opts ...sql.ConflictOption) *TransfersUpsertOne {
	tc.conflict = opts
	return &TransfersUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Transfers.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TransfersCreate) OnConflictColumns(columns ...string) *TransfersUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TransfersUpsertOne{
		create: tc,
	}
}

type (
	// TransfersUpsertOne is the builder for "upsert"-ing
	//  one Transfers node.
	TransfersUpsertOne struct {
		create *TransfersCreate
	}

	// TransfersUpsert is the "OnConflict" setter.
	TransfersUpsert struct {
		*sql.UpdateSet
	}
)

// SetFromPubkey sets the "from_pubkey" field.
func (u *TransfersUpsert) SetFromPubkey(v string) *TransfersUpsert {
	u.Set(transfers.FieldFromPubkey, v)
	return u
}

// UpdateFromPubkey sets the "from_pubkey" field to the value that was provided on create.
func (u *TransfersUpsert) UpdateFromPubkey() *TransfersUpsert {
	u.SetExcluded(transfers.FieldFromPubkey)
	return u
}

// SetToPubkey sets the "to_pubkey" field.
func (u *TransfersUpsert) SetToPubkey(v string) *TransfersUpsert {
	u.Set(transfers.FieldToPubkey, v)
	return u
}

// UpdateToPubkey sets the "to_pubkey" field to the value that was provided on create.
func (u *TransfersUpsert) UpdateToPubkey() *TransfersUpsert {
	u.SetExcluded(transfers.FieldToPubkey)
	return u
}

// ClearToPubkey clears the value of the "to_pubkey" field.
func (u *TransfersUpsert) ClearToPubkey() *TransfersUpsert {
	u.SetNull(transfers.FieldToPubkey)
	return u
}

// SetName sets the "name" field.
func (u *TransfersUpsert) SetName(v string) *TransfersUpsert {
	u.Set(transfers.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TransfersUpsert) UpdateName() *TransfersUpsert {
	u.SetExcluded(transfers.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *TransfersUpsert) ClearName() *TransfersUpsert {
	u.SetNull(transfers.FieldName)
	return u
}

// SetSenderBalance sets the "sender_balance" field.
func (u *TransfersUpsert) SetSenderBalance(v string) *TransfersUpsert {
	u.Set(transfers.FieldSenderBalance, v)
	return u
}

// UpdateSenderBalance sets the "sender_balance" field to the value that was provided on create.
func (u *TransfersUpsert) UpdateSenderBalance() *TransfersUpsert {
	u.SetExcluded(transfers.FieldSenderBalance)
	return u
}

// ClearSenderBalance clears the value of the "sender_balance" field.
func (u *TransfersUpsert) ClearSenderBalance() *TransfersUpsert {
	u.SetNull(transfers.FieldSenderBalance)
	return u
}

// SetAmount sets the "amount" field.
func (u *TransfersUpsert) SetAmount(v string) *TransfersUpsert {
	u.Set(transfers.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *TransfersUpsert) UpdateAmount() *TransfersUpsert {
	u.SetExcluded(transfers.FieldAmount)
	return u
}

// ClearAmount clears the value of the "amount" field.
func (u *TransfersUpsert) ClearAmount() *TransfersUpsert {
	u.SetNull(transfers.FieldAmount)
	return u
}

// SetMemoID sets the "memo_id" field.
func (u *TransfersUpsert) SetMemoID(v uint64) *TransfersUpsert {
	u.Set(transfers.FieldMemoID, v)
	return u
}

// UpdateMemoID sets the "memo_id" field to the value that was provided on create.
func (u *TransfersUpsert) UpdateMemoID() *TransfersUpsert {
	u.SetExcluded(transfers.FieldMemoID)
	return u
}

// AddMemoID adds v to the "memo_id" field.
func (u *TransfersUpsert) AddMemoID(v uint64) *TransfersUpsert {
	u.Add(transfers.FieldMemoID, v)
	return u
}

// ClearMemoID clears the value of the "memo_id" field.
func (u *TransfersUpsert) ClearMemoID() *TransfersUpsert {
	u.SetNull(transfers.FieldMemoID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TransfersUpsert) SetCreatedAt(v time.Time) *TransfersUpsert {
	u.Set(transfers.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TransfersUpsert) UpdateCreatedAt() *TransfersUpsert {
	u.SetExcluded(transfers.FieldCreatedAt)
	return u
}

// ClearCreatedAt clears the value of the "created_at" field.
func (u *TransfersUpsert) ClearCreatedAt() *TransfersUpsert {
	u.SetNull(transfers.FieldCreatedAt)
	return u
}

// SetStatus sets the "status" field.
func (u *TransfersUpsert) SetStatus(v string) *TransfersUpsert {
	u.Set(transfers.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TransfersUpsert) UpdateStatus() *TransfersUpsert {
	u.SetExcluded(transfers.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *TransfersUpsert) ClearStatus() *TransfersUpsert {
	u.SetNull(transfers.FieldStatus)
	return u
}

// SetDeploy sets the "Deploy" field.
func (u *TransfersUpsert) SetDeploy(v string) *TransfersUpsert {
	u.Set(transfers.FieldDeploy, v)
	return u
}

// UpdateDeploy sets the "Deploy" field to the value that was provided on create.
func (u *TransfersUpsert) UpdateDeploy() *TransfersUpsert {
	u.SetExcluded(transfers.FieldDeploy)
	return u
}

// ClearDeploy clears the value of the "Deploy" field.
func (u *TransfersUpsert) ClearDeploy() *TransfersUpsert {
	u.SetNull(transfers.FieldDeploy)
	return u
}

// SetAdditionalType sets the "AdditionalType" field.
func (u *TransfersUpsert) SetAdditionalType(v string) *TransfersUpsert {
	u.Set(transfers.FieldAdditionalType, v)
	return u
}

// UpdateAdditionalType sets the "AdditionalType" field to the value that was provided on create.
func (u *TransfersUpsert) UpdateAdditionalType() *TransfersUpsert {
	u.SetExcluded(transfers.FieldAdditionalType)
	return u
}

// ClearAdditionalType clears the value of the "AdditionalType" field.
func (u *TransfersUpsert) ClearAdditionalType() *TransfersUpsert {
	u.SetNull(transfers.FieldAdditionalType)
	return u
}

// SetInvoiceID sets the "invoiceID" field.
func (u *TransfersUpsert) SetInvoiceID(v int64) *TransfersUpsert {
	u.Set(transfers.FieldInvoiceID, v)
	return u
}

// UpdateInvoiceID sets the "invoiceID" field to the value that was provided on create.
func (u *TransfersUpsert) UpdateInvoiceID() *TransfersUpsert {
	u.SetExcluded(transfers.FieldInvoiceID)
	return u
}

// AddInvoiceID adds v to the "invoiceID" field.
func (u *TransfersUpsert) AddInvoiceID(v int64) *TransfersUpsert {
	u.Add(transfers.FieldInvoiceID, v)
	return u
}

// ClearInvoiceID clears the value of the "invoiceID" field.
func (u *TransfersUpsert) ClearInvoiceID() *TransfersUpsert {
	u.SetNull(transfers.FieldInvoiceID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Transfers.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TransfersUpsertOne) UpdateNewValues() *TransfersUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Transfers.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TransfersUpsertOne) Ignore() *TransfersUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TransfersUpsertOne) DoNothing() *TransfersUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TransfersCreate.OnConflict
// documentation for more info.
func (u *TransfersUpsertOne) Update(set func(*TransfersUpsert)) *TransfersUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TransfersUpsert{UpdateSet: update})
	}))
	return u
}

// SetFromPubkey sets the "from_pubkey" field.
func (u *TransfersUpsertOne) SetFromPubkey(v string) *TransfersUpsertOne {
	return u.Update(func(s *TransfersUpsert) {
		s.SetFromPubkey(v)
	})
}

// UpdateFromPubkey sets the "from_pubkey" field to the value that was provided on create.
func (u *TransfersUpsertOne) UpdateFromPubkey() *TransfersUpsertOne {
	return u.Update(func(s *TransfersUpsert) {
		s.UpdateFromPubkey()
	})
}

// SetToPubkey sets the "to_pubkey" field.
func (u *TransfersUpsertOne) SetToPubkey(v string) *TransfersUpsertOne {
	return u.Update(func(s *TransfersUpsert) {
		s.SetToPubkey(v)
	})
}

// UpdateToPubkey sets the "to_pubkey" field to the value that was provided on create.
func (u *TransfersUpsertOne) UpdateToPubkey() *TransfersUpsertOne {
	return u.Update(func(s *TransfersUpsert) {
		s.UpdateToPubkey()
	})
}

// ClearToPubkey clears the value of the "to_pubkey" field.
func (u *TransfersUpsertOne) ClearToPubkey() *TransfersUpsertOne {
	return u.Update(func(s *TransfersUpsert) {
		s.ClearToPubkey()
	})
}

// SetName sets the "name" field.
func (u *TransfersUpsertOne) SetName(v string) *TransfersUpsertOne {
	return u.Update(func(s *TransfersUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TransfersUpsertOne) UpdateName() *TransfersUpsertOne {
	return u.Update(func(s *TransfersUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *TransfersUpsertOne) ClearName() *TransfersUpsertOne {
	return u.Update(func(s *TransfersUpsert) {
		s.ClearName()
	})
}

// SetSenderBalance sets the "sender_balance" field.
func (u *TransfersUpsertOne) SetSenderBalance(v string) *TransfersUpsertOne {
	return u.Update(func(s *TransfersUpsert) {
		s.SetSenderBalance(v)
	})
}

// UpdateSenderBalance sets the "sender_balance" field to the value that was provided on create.
func (u *TransfersUpsertOne) UpdateSenderBalance() *TransfersUpsertOne {
	return u.Update(func(s *TransfersUpsert) {
		s.UpdateSenderBalance()
	})
}

// ClearSenderBalance clears the value of the "sender_balance" field.
func (u *TransfersUpsertOne) ClearSenderBalance() *TransfersUpsertOne {
	return u.Update(func(s *TransfersUpsert) {
		s.ClearSenderBalance()
	})
}

// SetAmount sets the "amount" field.
func (u *TransfersUpsertOne) SetAmount(v string) *TransfersUpsertOne {
	return u.Update(func(s *TransfersUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *TransfersUpsertOne) UpdateAmount() *TransfersUpsertOne {
	return u.Update(func(s *TransfersUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *TransfersUpsertOne) ClearAmount() *TransfersUpsertOne {
	return u.Update(func(s *TransfersUpsert) {
		s.ClearAmount()
	})
}

// SetMemoID sets the "memo_id" field.
func (u *TransfersUpsertOne) SetMemoID(v uint64) *TransfersUpsertOne {
	return u.Update(func(s *TransfersUpsert) {
		s.SetMemoID(v)
	})
}

// AddMemoID adds v to the "memo_id" field.
func (u *TransfersUpsertOne) AddMemoID(v uint64) *TransfersUpsertOne {
	return u.Update(func(s *TransfersUpsert) {
		s.AddMemoID(v)
	})
}

// UpdateMemoID sets the "memo_id" field to the value that was provided on create.
func (u *TransfersUpsertOne) UpdateMemoID() *TransfersUpsertOne {
	return u.Update(func(s *TransfersUpsert) {
		s.UpdateMemoID()
	})
}

// ClearMemoID clears the value of the "memo_id" field.
func (u *TransfersUpsertOne) ClearMemoID() *TransfersUpsertOne {
	return u.Update(func(s *TransfersUpsert) {
		s.ClearMemoID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TransfersUpsertOne) SetCreatedAt(v time.Time) *TransfersUpsertOne {
	return u.Update(func(s *TransfersUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TransfersUpsertOne) UpdateCreatedAt() *TransfersUpsertOne {
	return u.Update(func(s *TransfersUpsert) {
		s.UpdateCreatedAt()
	})
}

// ClearCreatedAt clears the value of the "created_at" field.
func (u *TransfersUpsertOne) ClearCreatedAt() *TransfersUpsertOne {
	return u.Update(func(s *TransfersUpsert) {
		s.ClearCreatedAt()
	})
}

// SetStatus sets the "status" field.
func (u *TransfersUpsertOne) SetStatus(v string) *TransfersUpsertOne {
	return u.Update(func(s *TransfersUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TransfersUpsertOne) UpdateStatus() *TransfersUpsertOne {
	return u.Update(func(s *TransfersUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *TransfersUpsertOne) ClearStatus() *TransfersUpsertOne {
	return u.Update(func(s *TransfersUpsert) {
		s.ClearStatus()
	})
}

// SetDeploy sets the "Deploy" field.
func (u *TransfersUpsertOne) SetDeploy(v string) *TransfersUpsertOne {
	return u.Update(func(s *TransfersUpsert) {
		s.SetDeploy(v)
	})
}

// UpdateDeploy sets the "Deploy" field to the value that was provided on create.
func (u *TransfersUpsertOne) UpdateDeploy() *TransfersUpsertOne {
	return u.Update(func(s *TransfersUpsert) {
		s.UpdateDeploy()
	})
}

// ClearDeploy clears the value of the "Deploy" field.
func (u *TransfersUpsertOne) ClearDeploy() *TransfersUpsertOne {
	return u.Update(func(s *TransfersUpsert) {
		s.ClearDeploy()
	})
}

// SetAdditionalType sets the "AdditionalType" field.
func (u *TransfersUpsertOne) SetAdditionalType(v string) *TransfersUpsertOne {
	return u.Update(func(s *TransfersUpsert) {
		s.SetAdditionalType(v)
	})
}

// UpdateAdditionalType sets the "AdditionalType" field to the value that was provided on create.
func (u *TransfersUpsertOne) UpdateAdditionalType() *TransfersUpsertOne {
	return u.Update(func(s *TransfersUpsert) {
		s.UpdateAdditionalType()
	})
}

// ClearAdditionalType clears the value of the "AdditionalType" field.
func (u *TransfersUpsertOne) ClearAdditionalType() *TransfersUpsertOne {
	return u.Update(func(s *TransfersUpsert) {
		s.ClearAdditionalType()
	})
}

// SetInvoiceID sets the "invoiceID" field.
func (u *TransfersUpsertOne) SetInvoiceID(v int64) *TransfersUpsertOne {
	return u.Update(func(s *TransfersUpsert) {
		s.SetInvoiceID(v)
	})
}

// AddInvoiceID adds v to the "invoiceID" field.
func (u *TransfersUpsertOne) AddInvoiceID(v int64) *TransfersUpsertOne {
	return u.Update(func(s *TransfersUpsert) {
		s.AddInvoiceID(v)
	})
}

// UpdateInvoiceID sets the "invoiceID" field to the value that was provided on create.
func (u *TransfersUpsertOne) UpdateInvoiceID() *TransfersUpsertOne {
	return u.Update(func(s *TransfersUpsert) {
		s.UpdateInvoiceID()
	})
}

// ClearInvoiceID clears the value of the "invoiceID" field.
func (u *TransfersUpsertOne) ClearInvoiceID() *TransfersUpsertOne {
	return u.Update(func(s *TransfersUpsert) {
		s.ClearInvoiceID()
	})
}

// Exec executes the query.
func (u *TransfersUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TransfersCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TransfersUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TransfersUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TransfersUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TransfersCreateBulk is the builder for creating many Transfers entities in bulk.
type TransfersCreateBulk struct {
	config
	builders []*TransfersCreate
	conflict []sql.ConflictOption
}

// Save creates the Transfers entities in the database.
func (tcb *TransfersCreateBulk) Save(ctx context.Context) ([]*Transfers, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Transfers, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TransfersMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TransfersCreateBulk) SaveX(ctx context.Context) []*Transfers {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TransfersCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TransfersCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Transfers.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TransfersUpsert) {
//			SetFromPubkey(v+v).
//		}).
//		Exec(ctx)
func (tcb *TransfersCreateBulk) OnConflict(opts ...sql.ConflictOption) *TransfersUpsertBulk {
	tcb.conflict = opts
	return &TransfersUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Transfers.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TransfersCreateBulk) OnConflictColumns(columns ...string) *TransfersUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TransfersUpsertBulk{
		create: tcb,
	}
}

// TransfersUpsertBulk is the builder for "upsert"-ing
// a bulk of Transfers nodes.
type TransfersUpsertBulk struct {
	create *TransfersCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Transfers.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TransfersUpsertBulk) UpdateNewValues() *TransfersUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Transfers.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TransfersUpsertBulk) Ignore() *TransfersUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TransfersUpsertBulk) DoNothing() *TransfersUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TransfersCreateBulk.OnConflict
// documentation for more info.
func (u *TransfersUpsertBulk) Update(set func(*TransfersUpsert)) *TransfersUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TransfersUpsert{UpdateSet: update})
	}))
	return u
}

// SetFromPubkey sets the "from_pubkey" field.
func (u *TransfersUpsertBulk) SetFromPubkey(v string) *TransfersUpsertBulk {
	return u.Update(func(s *TransfersUpsert) {
		s.SetFromPubkey(v)
	})
}

// UpdateFromPubkey sets the "from_pubkey" field to the value that was provided on create.
func (u *TransfersUpsertBulk) UpdateFromPubkey() *TransfersUpsertBulk {
	return u.Update(func(s *TransfersUpsert) {
		s.UpdateFromPubkey()
	})
}

// SetToPubkey sets the "to_pubkey" field.
func (u *TransfersUpsertBulk) SetToPubkey(v string) *TransfersUpsertBulk {
	return u.Update(func(s *TransfersUpsert) {
		s.SetToPubkey(v)
	})
}

// UpdateToPubkey sets the "to_pubkey" field to the value that was provided on create.
func (u *TransfersUpsertBulk) UpdateToPubkey() *TransfersUpsertBulk {
	return u.Update(func(s *TransfersUpsert) {
		s.UpdateToPubkey()
	})
}

// ClearToPubkey clears the value of the "to_pubkey" field.
func (u *TransfersUpsertBulk) ClearToPubkey() *TransfersUpsertBulk {
	return u.Update(func(s *TransfersUpsert) {
		s.ClearToPubkey()
	})
}

// SetName sets the "name" field.
func (u *TransfersUpsertBulk) SetName(v string) *TransfersUpsertBulk {
	return u.Update(func(s *TransfersUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TransfersUpsertBulk) UpdateName() *TransfersUpsertBulk {
	return u.Update(func(s *TransfersUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *TransfersUpsertBulk) ClearName() *TransfersUpsertBulk {
	return u.Update(func(s *TransfersUpsert) {
		s.ClearName()
	})
}

// SetSenderBalance sets the "sender_balance" field.
func (u *TransfersUpsertBulk) SetSenderBalance(v string) *TransfersUpsertBulk {
	return u.Update(func(s *TransfersUpsert) {
		s.SetSenderBalance(v)
	})
}

// UpdateSenderBalance sets the "sender_balance" field to the value that was provided on create.
func (u *TransfersUpsertBulk) UpdateSenderBalance() *TransfersUpsertBulk {
	return u.Update(func(s *TransfersUpsert) {
		s.UpdateSenderBalance()
	})
}

// ClearSenderBalance clears the value of the "sender_balance" field.
func (u *TransfersUpsertBulk) ClearSenderBalance() *TransfersUpsertBulk {
	return u.Update(func(s *TransfersUpsert) {
		s.ClearSenderBalance()
	})
}

// SetAmount sets the "amount" field.
func (u *TransfersUpsertBulk) SetAmount(v string) *TransfersUpsertBulk {
	return u.Update(func(s *TransfersUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *TransfersUpsertBulk) UpdateAmount() *TransfersUpsertBulk {
	return u.Update(func(s *TransfersUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *TransfersUpsertBulk) ClearAmount() *TransfersUpsertBulk {
	return u.Update(func(s *TransfersUpsert) {
		s.ClearAmount()
	})
}

// SetMemoID sets the "memo_id" field.
func (u *TransfersUpsertBulk) SetMemoID(v uint64) *TransfersUpsertBulk {
	return u.Update(func(s *TransfersUpsert) {
		s.SetMemoID(v)
	})
}

// AddMemoID adds v to the "memo_id" field.
func (u *TransfersUpsertBulk) AddMemoID(v uint64) *TransfersUpsertBulk {
	return u.Update(func(s *TransfersUpsert) {
		s.AddMemoID(v)
	})
}

// UpdateMemoID sets the "memo_id" field to the value that was provided on create.
func (u *TransfersUpsertBulk) UpdateMemoID() *TransfersUpsertBulk {
	return u.Update(func(s *TransfersUpsert) {
		s.UpdateMemoID()
	})
}

// ClearMemoID clears the value of the "memo_id" field.
func (u *TransfersUpsertBulk) ClearMemoID() *TransfersUpsertBulk {
	return u.Update(func(s *TransfersUpsert) {
		s.ClearMemoID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TransfersUpsertBulk) SetCreatedAt(v time.Time) *TransfersUpsertBulk {
	return u.Update(func(s *TransfersUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TransfersUpsertBulk) UpdateCreatedAt() *TransfersUpsertBulk {
	return u.Update(func(s *TransfersUpsert) {
		s.UpdateCreatedAt()
	})
}

// ClearCreatedAt clears the value of the "created_at" field.
func (u *TransfersUpsertBulk) ClearCreatedAt() *TransfersUpsertBulk {
	return u.Update(func(s *TransfersUpsert) {
		s.ClearCreatedAt()
	})
}

// SetStatus sets the "status" field.
func (u *TransfersUpsertBulk) SetStatus(v string) *TransfersUpsertBulk {
	return u.Update(func(s *TransfersUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TransfersUpsertBulk) UpdateStatus() *TransfersUpsertBulk {
	return u.Update(func(s *TransfersUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *TransfersUpsertBulk) ClearStatus() *TransfersUpsertBulk {
	return u.Update(func(s *TransfersUpsert) {
		s.ClearStatus()
	})
}

// SetDeploy sets the "Deploy" field.
func (u *TransfersUpsertBulk) SetDeploy(v string) *TransfersUpsertBulk {
	return u.Update(func(s *TransfersUpsert) {
		s.SetDeploy(v)
	})
}

// UpdateDeploy sets the "Deploy" field to the value that was provided on create.
func (u *TransfersUpsertBulk) UpdateDeploy() *TransfersUpsertBulk {
	return u.Update(func(s *TransfersUpsert) {
		s.UpdateDeploy()
	})
}

// ClearDeploy clears the value of the "Deploy" field.
func (u *TransfersUpsertBulk) ClearDeploy() *TransfersUpsertBulk {
	return u.Update(func(s *TransfersUpsert) {
		s.ClearDeploy()
	})
}

// SetAdditionalType sets the "AdditionalType" field.
func (u *TransfersUpsertBulk) SetAdditionalType(v string) *TransfersUpsertBulk {
	return u.Update(func(s *TransfersUpsert) {
		s.SetAdditionalType(v)
	})
}

// UpdateAdditionalType sets the "AdditionalType" field to the value that was provided on create.
func (u *TransfersUpsertBulk) UpdateAdditionalType() *TransfersUpsertBulk {
	return u.Update(func(s *TransfersUpsert) {
		s.UpdateAdditionalType()
	})
}

// ClearAdditionalType clears the value of the "AdditionalType" field.
func (u *TransfersUpsertBulk) ClearAdditionalType() *TransfersUpsertBulk {
	return u.Update(func(s *TransfersUpsert) {
		s.ClearAdditionalType()
	})
}

// SetInvoiceID sets the "invoiceID" field.
func (u *TransfersUpsertBulk) SetInvoiceID(v int64) *TransfersUpsertBulk {
	return u.Update(func(s *TransfersUpsert) {
		s.SetInvoiceID(v)
	})
}

// AddInvoiceID adds v to the "invoiceID" field.
func (u *TransfersUpsertBulk) AddInvoiceID(v int64) *TransfersUpsertBulk {
	return u.Update(func(s *TransfersUpsert) {
		s.AddInvoiceID(v)
	})
}

// UpdateInvoiceID sets the "invoiceID" field to the value that was provided on create.
func (u *TransfersUpsertBulk) UpdateInvoiceID() *TransfersUpsertBulk {
	return u.Update(func(s *TransfersUpsert) {
		s.UpdateInvoiceID()
	})
}

// ClearInvoiceID clears the value of the "invoiceID" field.
func (u *TransfersUpsertBulk) ClearInvoiceID() *TransfersUpsertBulk {
	return u.Update(func(s *TransfersUpsert) {
		s.ClearInvoiceID()
	})
}

// Exec executes the query.
func (u *TransfersUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TransfersCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TransfersCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TransfersUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
