// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Simplewallethq/tg-bot/ent/adressbook"
	"github.com/Simplewallethq/tg-bot/ent/user"
)

// AdressBookCreate is the builder for creating a AdressBook entity.
type AdressBookCreate struct {
	config
	mutation *AdressBookMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAddress sets the "address" field.
func (abc *AdressBookCreate) SetAddress(s string) *AdressBookCreate {
	abc.mutation.SetAddress(s)
	return abc
}

// SetName sets the "name" field.
func (abc *AdressBookCreate) SetName(s string) *AdressBookCreate {
	abc.mutation.SetName(s)
	return abc
}

// SetCreatedAt sets the "created_at" field.
func (abc *AdressBookCreate) SetCreatedAt(t time.Time) *AdressBookCreate {
	abc.mutation.SetCreatedAt(t)
	return abc
}

// SetInUpdate sets the "InUpdate" field.
func (abc *AdressBookCreate) SetInUpdate(b bool) *AdressBookCreate {
	abc.mutation.SetInUpdate(b)
	return abc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (abc *AdressBookCreate) SetOwnerID(id int64) *AdressBookCreate {
	abc.mutation.SetOwnerID(id)
	return abc
}

// SetOwner sets the "owner" edge to the User entity.
func (abc *AdressBookCreate) SetOwner(u *User) *AdressBookCreate {
	return abc.SetOwnerID(u.ID)
}

// Mutation returns the AdressBookMutation object of the builder.
func (abc *AdressBookCreate) Mutation() *AdressBookMutation {
	return abc.mutation
}

// Save creates the AdressBook in the database.
func (abc *AdressBookCreate) Save(ctx context.Context) (*AdressBook, error) {
	return withHooks(ctx, abc.sqlSave, abc.mutation, abc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (abc *AdressBookCreate) SaveX(ctx context.Context) *AdressBook {
	v, err := abc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (abc *AdressBookCreate) Exec(ctx context.Context) error {
	_, err := abc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (abc *AdressBookCreate) ExecX(ctx context.Context) {
	if err := abc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (abc *AdressBookCreate) check() error {
	if _, ok := abc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "AdressBook.address"`)}
	}
	if _, ok := abc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "AdressBook.name"`)}
	}
	if _, ok := abc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AdressBook.created_at"`)}
	}
	if _, ok := abc.mutation.InUpdate(); !ok {
		return &ValidationError{Name: "InUpdate", err: errors.New(`ent: missing required field "AdressBook.InUpdate"`)}
	}
	if _, ok := abc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "AdressBook.owner"`)}
	}
	return nil
}

func (abc *AdressBookCreate) sqlSave(ctx context.Context) (*AdressBook, error) {
	if err := abc.check(); err != nil {
		return nil, err
	}
	_node, _spec := abc.createSpec()
	if err := sqlgraph.CreateNode(ctx, abc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	abc.mutation.id = &_node.ID
	abc.mutation.done = true
	return _node, nil
}

func (abc *AdressBookCreate) createSpec() (*AdressBook, *sqlgraph.CreateSpec) {
	var (
		_node = &AdressBook{config: abc.config}
		_spec = sqlgraph.NewCreateSpec(adressbook.Table, sqlgraph.NewFieldSpec(adressbook.FieldID, field.TypeInt))
	)
	_spec.OnConflict = abc.conflict
	if value, ok := abc.mutation.Address(); ok {
		_spec.SetField(adressbook.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := abc.mutation.Name(); ok {
		_spec.SetField(adressbook.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := abc.mutation.CreatedAt(); ok {
		_spec.SetField(adressbook.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := abc.mutation.InUpdate(); ok {
		_spec.SetField(adressbook.FieldInUpdate, field.TypeBool, value)
		_node.InUpdate = value
	}
	if nodes := abc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adressbook.OwnerTable,
			Columns: []string{adressbook.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_address_book = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AdressBook.Create().
//		SetAddress(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AdressBookUpsert) {
//			SetAddress(v+v).
//		}).
//		Exec(ctx)
func (abc *AdressBookCreate) OnConflict(opts ...sql.ConflictOption) *AdressBookUpsertOne {
	abc.conflict = opts
	return &AdressBookUpsertOne{
		create: abc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AdressBook.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (abc *AdressBookCreate) OnConflictColumns(columns ...string) *AdressBookUpsertOne {
	abc.conflict = append(abc.conflict, sql.ConflictColumns(columns...))
	return &AdressBookUpsertOne{
		create: abc,
	}
}

type (
	// AdressBookUpsertOne is the builder for "upsert"-ing
	//  one AdressBook node.
	AdressBookUpsertOne struct {
		create *AdressBookCreate
	}

	// AdressBookUpsert is the "OnConflict" setter.
	AdressBookUpsert struct {
		*sql.UpdateSet
	}
)

// SetAddress sets the "address" field.
func (u *AdressBookUpsert) SetAddress(v string) *AdressBookUpsert {
	u.Set(adressbook.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *AdressBookUpsert) UpdateAddress() *AdressBookUpsert {
	u.SetExcluded(adressbook.FieldAddress)
	return u
}

// SetName sets the "name" field.
func (u *AdressBookUpsert) SetName(v string) *AdressBookUpsert {
	u.Set(adressbook.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AdressBookUpsert) UpdateName() *AdressBookUpsert {
	u.SetExcluded(adressbook.FieldName)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AdressBookUpsert) SetCreatedAt(v time.Time) *AdressBookUpsert {
	u.Set(adressbook.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AdressBookUpsert) UpdateCreatedAt() *AdressBookUpsert {
	u.SetExcluded(adressbook.FieldCreatedAt)
	return u
}

// SetInUpdate sets the "InUpdate" field.
func (u *AdressBookUpsert) SetInUpdate(v bool) *AdressBookUpsert {
	u.Set(adressbook.FieldInUpdate, v)
	return u
}

// UpdateInUpdate sets the "InUpdate" field to the value that was provided on create.
func (u *AdressBookUpsert) UpdateInUpdate() *AdressBookUpsert {
	u.SetExcluded(adressbook.FieldInUpdate)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.AdressBook.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AdressBookUpsertOne) UpdateNewValues() *AdressBookUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AdressBook.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AdressBookUpsertOne) Ignore() *AdressBookUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AdressBookUpsertOne) DoNothing() *AdressBookUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AdressBookCreate.OnConflict
// documentation for more info.
func (u *AdressBookUpsertOne) Update(set func(*AdressBookUpsert)) *AdressBookUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AdressBookUpsert{UpdateSet: update})
	}))
	return u
}

// SetAddress sets the "address" field.
func (u *AdressBookUpsertOne) SetAddress(v string) *AdressBookUpsertOne {
	return u.Update(func(s *AdressBookUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *AdressBookUpsertOne) UpdateAddress() *AdressBookUpsertOne {
	return u.Update(func(s *AdressBookUpsert) {
		s.UpdateAddress()
	})
}

// SetName sets the "name" field.
func (u *AdressBookUpsertOne) SetName(v string) *AdressBookUpsertOne {
	return u.Update(func(s *AdressBookUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AdressBookUpsertOne) UpdateName() *AdressBookUpsertOne {
	return u.Update(func(s *AdressBookUpsert) {
		s.UpdateName()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AdressBookUpsertOne) SetCreatedAt(v time.Time) *AdressBookUpsertOne {
	return u.Update(func(s *AdressBookUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AdressBookUpsertOne) UpdateCreatedAt() *AdressBookUpsertOne {
	return u.Update(func(s *AdressBookUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetInUpdate sets the "InUpdate" field.
func (u *AdressBookUpsertOne) SetInUpdate(v bool) *AdressBookUpsertOne {
	return u.Update(func(s *AdressBookUpsert) {
		s.SetInUpdate(v)
	})
}

// UpdateInUpdate sets the "InUpdate" field to the value that was provided on create.
func (u *AdressBookUpsertOne) UpdateInUpdate() *AdressBookUpsertOne {
	return u.Update(func(s *AdressBookUpsert) {
		s.UpdateInUpdate()
	})
}

// Exec executes the query.
func (u *AdressBookUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AdressBookCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AdressBookUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AdressBookUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AdressBookUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AdressBookCreateBulk is the builder for creating many AdressBook entities in bulk.
type AdressBookCreateBulk struct {
	config
	builders []*AdressBookCreate
	conflict []sql.ConflictOption
}

// Save creates the AdressBook entities in the database.
func (abcb *AdressBookCreateBulk) Save(ctx context.Context) ([]*AdressBook, error) {
	specs := make([]*sqlgraph.CreateSpec, len(abcb.builders))
	nodes := make([]*AdressBook, len(abcb.builders))
	mutators := make([]Mutator, len(abcb.builders))
	for i := range abcb.builders {
		func(i int, root context.Context) {
			builder := abcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AdressBookMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, abcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = abcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, abcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, abcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (abcb *AdressBookCreateBulk) SaveX(ctx context.Context) []*AdressBook {
	v, err := abcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (abcb *AdressBookCreateBulk) Exec(ctx context.Context) error {
	_, err := abcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (abcb *AdressBookCreateBulk) ExecX(ctx context.Context) {
	if err := abcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AdressBook.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AdressBookUpsert) {
//			SetAddress(v+v).
//		}).
//		Exec(ctx)
func (abcb *AdressBookCreateBulk) OnConflict(opts ...sql.ConflictOption) *AdressBookUpsertBulk {
	abcb.conflict = opts
	return &AdressBookUpsertBulk{
		create: abcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AdressBook.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (abcb *AdressBookCreateBulk) OnConflictColumns(columns ...string) *AdressBookUpsertBulk {
	abcb.conflict = append(abcb.conflict, sql.ConflictColumns(columns...))
	return &AdressBookUpsertBulk{
		create: abcb,
	}
}

// AdressBookUpsertBulk is the builder for "upsert"-ing
// a bulk of AdressBook nodes.
type AdressBookUpsertBulk struct {
	create *AdressBookCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AdressBook.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AdressBookUpsertBulk) UpdateNewValues() *AdressBookUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AdressBook.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AdressBookUpsertBulk) Ignore() *AdressBookUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AdressBookUpsertBulk) DoNothing() *AdressBookUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AdressBookCreateBulk.OnConflict
// documentation for more info.
func (u *AdressBookUpsertBulk) Update(set func(*AdressBookUpsert)) *AdressBookUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AdressBookUpsert{UpdateSet: update})
	}))
	return u
}

// SetAddress sets the "address" field.
func (u *AdressBookUpsertBulk) SetAddress(v string) *AdressBookUpsertBulk {
	return u.Update(func(s *AdressBookUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *AdressBookUpsertBulk) UpdateAddress() *AdressBookUpsertBulk {
	return u.Update(func(s *AdressBookUpsert) {
		s.UpdateAddress()
	})
}

// SetName sets the "name" field.
func (u *AdressBookUpsertBulk) SetName(v string) *AdressBookUpsertBulk {
	return u.Update(func(s *AdressBookUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AdressBookUpsertBulk) UpdateName() *AdressBookUpsertBulk {
	return u.Update(func(s *AdressBookUpsert) {
		s.UpdateName()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AdressBookUpsertBulk) SetCreatedAt(v time.Time) *AdressBookUpsertBulk {
	return u.Update(func(s *AdressBookUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AdressBookUpsertBulk) UpdateCreatedAt() *AdressBookUpsertBulk {
	return u.Update(func(s *AdressBookUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetInUpdate sets the "InUpdate" field.
func (u *AdressBookUpsertBulk) SetInUpdate(v bool) *AdressBookUpsertBulk {
	return u.Update(func(s *AdressBookUpsert) {
		s.SetInUpdate(v)
	})
}

// UpdateInUpdate sets the "InUpdate" field to the value that was provided on create.
func (u *AdressBookUpsertBulk) UpdateInUpdate() *AdressBookUpsertBulk {
	return u.Update(func(s *AdressBookUpsert) {
		s.UpdateInUpdate()
	})
}

// Exec executes the query.
func (u *AdressBookUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AdressBookCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AdressBookCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AdressBookUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
